# Generated from vba.g4 by ANTLR 4.5.3
# encoding: utf-8
from antlr4 import *
from io import StringIO

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3\u00de")
        buf.write("\u0a3d\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\3\2\3\2\3\2\3")
        buf.write("\3\5\3\u012d\n\3\3\3\7\3\u0130\n\3\f\3\16\3\u0133\13\3")
        buf.write("\3\3\3\3\7\3\u0137\n\3\f\3\16\3\u013a\13\3\5\3\u013c\n")
        buf.write("\3\3\3\5\3\u013f\n\3\3\3\7\3\u0142\n\3\f\3\16\3\u0145")
        buf.write("\13\3\3\3\5\3\u0148\n\3\3\3\7\3\u014b\n\3\f\3\16\3\u014e")
        buf.write("\13\3\3\3\5\3\u0151\n\3\3\3\7\3\u0154\n\3\f\3\16\3\u0157")
        buf.write("\13\3\3\3\5\3\u015a\n\3\3\3\7\3\u015d\n\3\f\3\16\3\u0160")
        buf.write("\13\3\3\3\5\3\u0163\n\3\3\4\3\4\3\4\3\4\3\4\3\4\3\5\3")
        buf.write("\5\7\5\u016d\n\5\f\5\16\5\u0170\13\5\3\5\6\5\u0173\n\5")
        buf.write("\r\5\16\5\u0174\3\5\3\5\3\6\3\6\5\6\u017b\n\6\3\6\3\6")
        buf.write("\5\6\u017f\n\6\3\6\3\6\7\6\u0183\n\6\f\6\16\6\u0186\13")
        buf.write("\6\3\7\3\7\6\7\u018a\n\7\r\7\16\7\u018b\6\7\u018e\n\7")
        buf.write("\r\7\16\7\u018f\3\b\3\b\6\b\u0194\n\b\r\b\16\b\u0195\3")
        buf.write("\b\3\b\7\b\u019a\n\b\f\b\16\b\u019d\13\b\3\b\7\b\u01a0")
        buf.write("\n\b\f\b\16\b\u01a3\13\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3")
        buf.write("\t\5\t\u01ad\n\t\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3")
        buf.write("\n\5\n\u01b9\n\n\3\13\3\13\5\13\u01bd\n\13\3\f\3\f\6\f")
        buf.write("\u01c1\n\f\r\f\16\f\u01c2\3\f\3\f\7\f\u01c7\n\f\f\f\16")
        buf.write("\f\u01ca\13\f\3\f\7\f\u01cd\n\f\f\f\16\f\u01d0\13\f\3")
        buf.write("\r\3\r\3\r\3\r\3\r\3\r\5\r\u01d8\n\r\3\16\3\16\3\16\3")
        buf.write("\16\5\16\u01de\n\16\3\16\3\16\5\16\u01e2\n\16\3\16\3\16")
        buf.write("\5\16\u01e6\n\16\3\16\3\16\5\16\u01ea\n\16\3\16\7\16\u01ed")
        buf.write("\n\16\f\16\16\16\u01f0\13\16\3\17\3\17\3\17\3\17\7\17")
        buf.write("\u01f6\n\17\f\17\16\17\u01f9\13\17\3\17\3\17\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20")
        buf.write("\u0240\n\20\3\21\3\21\3\21\3\21\5\21\u0246\n\21\3\21\3")
        buf.write("\21\5\21\u024a\n\21\3\21\5\21\u024d\n\21\3\22\3\22\3\23")
        buf.write("\3\23\3\23\3\23\3\24\3\24\3\24\3\24\3\25\3\25\3\25\3\25")
        buf.write("\5\25\u025d\n\25\3\25\3\25\5\25\u0261\n\25\3\25\7\25\u0264")
        buf.write("\n\25\f\25\16\25\u0267\13\25\5\25\u0269\n\25\3\26\3\26")
        buf.write("\3\26\5\26\u026e\n\26\3\26\3\26\3\26\3\26\5\26\u0274\n")
        buf.write("\26\3\26\3\26\5\26\u0278\n\26\3\26\7\26\u027b\n\26\f\26")
        buf.write("\16\26\u027e\13\26\3\27\3\27\5\27\u0282\n\27\3\27\3\27")
        buf.write("\5\27\u0286\n\27\3\27\5\27\u0289\n\27\3\27\3\27\5\27\u028d")
        buf.write("\n\27\3\27\3\27\3\30\3\30\5\30\u0293\n\30\3\30\3\30\5")
        buf.write("\30\u0297\n\30\3\30\3\30\3\31\3\31\3\31\5\31\u029e\n\31")
        buf.write("\3\31\3\31\3\31\3\31\5\31\u02a4\n\31\3\31\3\31\5\31\u02a8")
        buf.write("\n\31\3\31\5\31\u02ab\n\31\3\31\3\31\3\31\5\31\u02b0\n")
        buf.write("\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\5\31\u02ba")
        buf.write("\n\31\3\31\5\31\u02bd\n\31\3\31\5\31\u02c0\n\31\3\31\3")
        buf.write("\31\5\31\u02c4\n\31\3\32\3\32\3\32\3\32\5\32\u02ca\n\32")
        buf.write("\3\32\3\32\5\32\u02ce\n\32\3\32\7\32\u02d1\n\32\f\32\16")
        buf.write("\32\u02d4\13\32\3\33\3\33\3\33\3\33\5\33\u02da\n\33\3")
        buf.write("\33\3\33\5\33\u02de\n\33\3\33\3\33\5\33\u02e2\n\33\3\33")
        buf.write("\3\33\5\33\u02e6\n\33\3\33\5\33\u02e9\n\33\3\34\3\34\3")
        buf.write("\34\5\34\u02ee\n\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34")
        buf.write("\3\34\3\34\5\34\u02f9\n\34\3\34\3\34\3\34\3\34\3\34\3")
        buf.write("\34\3\34\3\34\3\34\3\34\3\34\5\34\u0306\n\34\3\35\3\35")
        buf.write("\3\36\3\36\3\36\5\36\u030d\n\36\3\36\3\36\3\36\3\36\3")
        buf.write("\36\7\36\u0314\n\36\f\36\16\36\u0317\13\36\3\36\3\36\3")
        buf.write("\37\3\37\5\37\u031d\n\37\3\37\3\37\5\37\u0321\n\37\3\37")
        buf.write("\5\37\u0324\n\37\3\37\3\37\3 \3 \3 \3 \3!\3!\3!\3!\3\"")
        buf.write("\3\"\3\"\5\"\u0333\n\"\3\"\3\"\3\"\3\"\5\"\u0339\n\"\3")
        buf.write("\"\3\"\3#\3#\3$\3$\3$\3$\5$\u0343\n$\3$\3$\5$\u0347\n")
        buf.write("$\3$\3$\3%\3%\3%\3%\3%\3%\5%\u0351\n%\3%\3%\3%\3%\3%\3")
        buf.write("%\5%\u0359\n%\3%\3%\3%\5%\u035e\n%\3&\3&\3&\3&\5&\u0364")
        buf.write("\n&\3&\3&\5&\u0368\n&\3&\5&\u036b\n&\3&\3&\5&\u036f\n")
        buf.write("&\3&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u037a\n&\3&\3&\5&\u037e")
        buf.write("\n&\3&\3&\3&\5&\u0383\n&\3\'\3\'\3\'\5\'\u0388\n\'\3\'")
        buf.write("\3\'\5\'\u038c\n\'\3\'\3\'\5\'\u0390\n\'\3\'\3\'\5\'\u0394")
        buf.write("\n\'\3\'\5\'\u0397\n\'\3\'\5\'\u039a\n\'\3\'\5\'\u039d")
        buf.write("\n\'\3\'\5\'\u03a0\n\'\3\'\3\'\5\'\u03a4\n\'\3\'\3\'\3")
        buf.write("(\3(\3(\3(\5(\u03ac\n(\3(\3(\5(\u03b0\n(\3(\5(\u03b3\n")
        buf.write("(\3(\5(\u03b6\n(\3(\3(\5(\u03ba\n(\3(\3(\3)\3)\3)\3)\3")
        buf.write("*\3*\3*\3*\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\5+\u03d1\n")
        buf.write("+\3+\3+\7+\u03d5\n+\f+\16+\u03d8\13+\3+\5+\u03db\n+\3")
        buf.write("+\3+\5+\u03df\n+\3,\3,\3,\3,\3,\3,\3,\5,\u03e8\n,\3-\3")
        buf.write("-\3.\3.\3.\3.\3.\3.\3.\5.\u03f3\n.\3/\3/\3/\5/\u03f8\n")
        buf.write("/\3\60\3\60\3\60\3\60\3\61\3\61\3\61\3\61\5\61\u0402\n")
        buf.write("\61\3\61\3\61\5\61\u0406\n\61\3\61\6\61\u0409\n\61\r\61")
        buf.write("\16\61\u040a\3\62\3\62\3\62\3\62\3\63\3\63\5\63\u0413")
        buf.write("\n\63\3\63\3\63\5\63\u0417\n\63\3\63\3\63\5\63\u041b\n")
        buf.write("\63\3\63\3\63\3\64\3\64\3\64\3\64\5\64\u0423\n\64\3\64")
        buf.write("\3\64\5\64\u0427\n\64\3\64\3\64\3\65\3\65\3\65\3\65\3")
        buf.write("\66\3\66\3\66\3\66\5\66\u0433\n\66\3\66\3\66\5\66\u0437")
        buf.write("\n\66\3\66\3\66\3\66\3\66\3\66\5\66\u043e\n\66\5\66\u0440")
        buf.write("\n\66\3\67\3\67\3\67\3\67\5\67\u0446\n\67\3\67\3\67\5")
        buf.write("\67\u044a\n\67\3\67\3\67\38\38\58\u0450\n8\38\38\58\u0454")
        buf.write("\n8\38\38\58\u0458\n8\38\38\39\39\79\u045e\n9\f9\169\u0461")
        buf.write("\139\39\59\u0464\n9\39\39\3:\3:\5:\u046a\n:\3:\3:\3:\3")
        buf.write(":\3:\3:\3:\7:\u0473\n:\f:\16:\u0476\13:\3;\3;\5;\u047a")
        buf.write("\n;\3;\3;\3;\3;\3;\3;\3;\7;\u0483\n;\f;\16;\u0486\13;")
        buf.write("\3<\3<\3<\3<\3<\7<\u048d\n<\f<\16<\u0490\13<\3=\3=\5=")
        buf.write("\u0494\n=\3=\3=\5=\u0498\n=\3=\3=\5=\u049c\n=\3=\3=\3")
        buf.write(">\3>\3>\3>\3?\3?\3?\3?\3?\3?\3?\3?\3@\3@\3@\3@\3@\3@\3")
        buf.write("@\3@\5@\u04b4\n@\3A\3A\3A\3A\3A\3A\3A\3A\5A\u04be\nA\3")
        buf.write("A\3A\5A\u04c2\nA\3A\7A\u04c5\nA\fA\16A\u04c8\13A\3B\3")
        buf.write("B\3B\3B\3B\3B\3B\3B\5B\u04d2\nB\3B\3B\5B\u04d6\nB\3B\7")
        buf.write("B\u04d9\nB\fB\16B\u04dc\13B\3C\3C\3C\3C\3C\3C\3C\3C\3")
        buf.write("C\3C\3C\5C\u04e9\nC\3C\3C\5C\u04ed\nC\3C\3C\3C\3C\3C\3")
        buf.write("C\3C\5C\u04f6\nC\3C\3C\5C\u04fa\nC\3C\5C\u04fd\nC\3D\3")
        buf.write("D\5D\u0501\nD\3D\3D\5D\u0505\nD\3D\5D\u0508\nD\7D\u050a")
        buf.write("\nD\fD\16D\u050d\13D\3D\5D\u0510\nD\3D\5D\u0513\nD\3D")
        buf.write("\3D\5D\u0517\nD\3D\5D\u051a\nD\6D\u051c\nD\rD\16D\u051d")
        buf.write("\5D\u0520\nD\3E\3E\3E\5E\u0525\nE\3E\3E\5E\u0529\nE\3")
        buf.write("E\3E\5E\u052d\nE\3E\3E\5E\u0531\nE\5E\u0533\nE\3F\3F\3")
        buf.write("F\3F\5F\u0539\nF\3F\3F\5F\u053d\nF\3F\5F\u0540\nF\3G\3")
        buf.write("G\3G\5G\u0545\nG\3G\3G\5G\u0549\nG\3G\3G\3G\3G\5G\u054f")
        buf.write("\nG\3G\5G\u0552\nG\3G\5G\u0555\nG\3G\3G\5G\u0559\nG\3")
        buf.write("G\3G\5G\u055d\nG\3G\3G\3H\3H\3H\5H\u0564\nH\3H\3H\5H\u0568")
        buf.write("\nH\3H\3H\3H\3H\5H\u056e\nH\3H\5H\u0571\nH\3H\3H\5H\u0575")
        buf.write("\nH\3H\3H\3I\3I\3I\5I\u057c\nI\3I\3I\5I\u0580\nI\3I\3")
        buf.write("I\3I\3I\5I\u0586\nI\3I\5I\u0589\nI\3I\3I\5I\u058d\nI\3")
        buf.write("I\3I\3J\3J\3J\3J\5J\u0595\nJ\3J\3J\5J\u0599\nJ\3J\5J\u059c")
        buf.write("\nJ\3J\5J\u059f\nJ\3J\3J\5J\u05a3\nJ\3J\3J\3K\3K\3K\3")
        buf.write("K\5K\u05ab\nK\3K\3K\5K\u05af\nK\3K\3K\5K\u05b3\nK\5K\u05b5")
        buf.write("\nK\3K\5K\u05b8\nK\3L\3L\3L\5L\u05bd\nL\3M\3M\3M\3M\5")
        buf.write("M\u05c3\nM\3M\3M\5M\u05c7\nM\3M\3M\5M\u05cb\nM\3M\7M\u05ce")
        buf.write("\nM\fM\16M\u05d1\13M\3N\3N\5N\u05d5\nN\3N\3N\5N\u05d9")
        buf.write("\nN\3N\3N\5N\u05dd\nN\3N\3N\3N\5N\u05e2\nN\3O\3O\3P\3")
        buf.write("P\3P\3P\5P\u05ea\nP\5P\u05ec\nP\3Q\3Q\3R\3R\3R\3R\3S\3")
        buf.write("S\3S\3S\5S\u05f8\nS\3S\3S\5S\u05fc\nS\3S\3S\3T\3T\3T\3")
        buf.write("T\5T\u0604\nT\3T\3T\5T\u0608\nT\3T\3T\3U\3U\3U\3U\5U\u0610")
        buf.write("\nU\3U\3U\5U\u0614\nU\3U\3U\5U\u0618\nU\3U\3U\5U\u061c")
        buf.write("\nU\3U\3U\5U\u0620\nU\3U\3U\5U\u0624\nU\3U\3U\3V\3V\3")
        buf.write("V\3V\5V\u062c\nV\3V\3V\5V\u0630\nV\3V\3V\3W\3W\3W\3W\3")
        buf.write("W\3W\3W\7W\u063b\nW\fW\16W\u063e\13W\3W\3W\3X\3X\5X\u0644")
        buf.write("\nX\3X\3X\5X\u0648\nX\3X\3X\3X\3X\3X\3X\3X\3X\3X\5X\u0653")
        buf.write("\nX\3Y\3Y\3Y\3Y\3Y\5Y\u065a\nY\3Z\3Z\3Z\5Z\u065f\nZ\3")
        buf.write("Z\3Z\5Z\u0663\nZ\3Z\7Z\u0666\nZ\fZ\16Z\u0669\13Z\5Z\u066b")
        buf.write("\nZ\3[\3[\3[\3[\5[\u0671\n[\3[\3[\5[\u0675\n[\3[\5[\u0678")
        buf.write("\n[\3\\\3\\\3\\\3\\\5\\\u067e\n\\\3\\\3\\\5\\\u0682\n")
        buf.write("\\\3\\\3\\\3]\3]\3]\3]\5]\u068a\n]\3]\3]\5]\u068e\n]\3")
        buf.write("]\3]\3^\3^\3_\3_\3_\5_\u0697\n_\3_\3_\5_\u069b\n_\3_\3")
        buf.write("_\5_\u069f\n_\3_\3_\5_\u06a3\n_\3_\5_\u06a6\n_\3_\3_\5")
        buf.write("_\u06aa\n_\3_\3_\3`\3`\5`\u06b0\n`\3`\3`\5`\u06b4\n`\3")
        buf.write("`\3`\3a\3a\3a\5a\u06bb\na\3a\3a\3a\3a\3a\7a\u06c2\na\f")
        buf.write("a\16a\u06c5\13a\3a\3a\3b\3b\5b\u06cb\nb\3b\3b\5b\u06cf")
        buf.write("\nb\3b\5b\u06d2\nb\3b\5b\u06d5\nb\3b\5b\u06d8\nb\3b\3")
        buf.write("b\5b\u06dc\nb\3b\3b\3c\3c\3c\3c\3c\3c\3c\5c\u06e7\nc\3")
        buf.write("d\3d\3d\3d\3e\3e\3e\3e\5e\u06f1\ne\3e\3e\5e\u06f5\ne\3")
        buf.write("e\3e\3e\3e\3e\5e\u06fc\ne\5e\u06fe\ne\3f\3f\3f\3f\3f\5")
        buf.write("f\u0705\nf\3f\3f\5f\u0709\nf\3f\3f\5f\u070d\nf\3f\7f\u0710")
        buf.write("\nf\ff\16f\u0713\13f\3f\3f\3f\3f\5f\u0719\nf\3f\3f\3f")
        buf.write("\3f\3f\5f\u0720\nf\3f\3f\3f\5f\u0725\nf\3f\3f\5f\u0729")
        buf.write("\nf\3f\3f\3f\3f\5f\u072f\nf\3f\3f\3f\5f\u0734\nf\3f\3")
        buf.write("f\3f\5f\u0739\nf\3f\5f\u073c\nf\3f\3f\5f\u0740\nf\3f\3")
        buf.write("f\5f\u0744\nf\3f\3f\3f\5f\u0749\nf\3f\3f\5f\u074d\nf\3")
        buf.write("f\3f\3f\5f\u0752\nf\3f\3f\5f\u0756\nf\3f\3f\3f\5f\u075b")
        buf.write("\nf\3f\3f\5f\u075f\nf\3f\3f\3f\5f\u0764\nf\3f\3f\5f\u0768")
        buf.write("\nf\3f\3f\3f\5f\u076d\nf\3f\3f\5f\u0771\nf\3f\3f\3f\5")
        buf.write("f\u0776\nf\3f\3f\5f\u077a\nf\3f\3f\3f\5f\u077f\nf\3f\3")
        buf.write("f\5f\u0783\nf\3f\3f\3f\5f\u0788\nf\3f\3f\5f\u078c\nf\3")
        buf.write("f\3f\3f\5f\u0791\nf\3f\3f\5f\u0795\nf\3f\3f\3f\5f\u079a")
        buf.write("\nf\3f\3f\5f\u079e\nf\3f\3f\3f\5f\u07a3\nf\3f\3f\5f\u07a7")
        buf.write("\nf\3f\3f\3f\5f\u07ac\nf\3f\3f\5f\u07b0\nf\3f\3f\3f\5")
        buf.write("f\u07b5\nf\3f\3f\5f\u07b9\nf\3f\3f\3f\5f\u07be\nf\3f\3")
        buf.write("f\5f\u07c2\nf\3f\3f\3f\5f\u07c7\nf\3f\3f\5f\u07cb\nf\3")
        buf.write("f\3f\3f\5f\u07d0\nf\3f\3f\5f\u07d4\nf\3f\3f\3f\5f\u07d9")
        buf.write("\nf\3f\3f\5f\u07dd\nf\3f\3f\3f\5f\u07e2\nf\3f\3f\5f\u07e6")
        buf.write("\nf\3f\3f\3f\5f\u07eb\nf\3f\3f\5f\u07ef\nf\3f\7f\u07f2")
        buf.write("\nf\ff\16f\u07f5\13f\3g\3g\3g\5g\u07fa\ng\3g\3g\3g\5g")
        buf.write("\u07ff\ng\3g\3g\3h\3h\5h\u0805\nh\3h\3h\5h\u0809\nh\3")
        buf.write("h\7h\u080c\nh\fh\16h\u080f\13h\3i\3i\5i\u0813\ni\3i\3")
        buf.write("i\5i\u0817\ni\3i\3i\5i\u081b\ni\5i\u081d\ni\3i\3i\5i\u0821")
        buf.write("\ni\5i\u0823\ni\3i\5i\u0826\ni\3i\3i\5i\u082a\ni\3j\3")
        buf.write("j\3j\3j\3j\5j\u0831\nj\3j\3j\3k\3k\3k\3k\5k\u0839\nk\3")
        buf.write("k\3k\5k\u083d\nk\3k\3k\3l\3l\3l\3l\3l\3l\5l\u0847\nl\3")
        buf.write("l\3l\5l\u084b\nl\3l\3l\3m\3m\3m\3m\5m\u0853\nm\3m\3m\5")
        buf.write("m\u0857\nm\3m\5m\u085a\nm\3n\5n\u085d\nn\3n\3n\3o\3o\5")
        buf.write("o\u0863\no\3p\3p\3p\3p\5p\u0869\np\3p\5p\u086c\np\3p\3")
        buf.write("p\5p\u0870\np\3p\3p\5p\u0874\np\3p\3p\5p\u0878\np\3p\5")
        buf.write("p\u087b\np\3p\3p\3p\3p\7p\u0881\np\fp\16p\u0884\13p\3")
        buf.write("q\3q\3q\5q\u0889\nq\3q\3q\3q\5q\u088e\nq\3q\5q\u0891\n")
        buf.write("q\3q\3q\5q\u0895\nq\3q\3q\5q\u0899\nq\3q\3q\5q\u089d\n")
        buf.write("q\3q\5q\u08a0\nq\3q\3q\3q\3q\7q\u08a6\nq\fq\16q\u08a9")
        buf.write("\13q\3r\3r\5r\u08ad\nr\3s\5s\u08b0\ns\3s\3s\3s\5s\u08b5")
        buf.write("\ns\3s\3s\5s\u08b9\ns\3s\5s\u08bc\ns\3s\5s\u08bf\ns\3")
        buf.write("s\3s\3s\3s\7s\u08c5\ns\fs\16s\u08c8\13s\3t\3t\3t\5t\u08cd")
        buf.write("\nt\3t\5t\u08d0\nt\3t\3t\3t\3t\7t\u08d6\nt\ft\16t\u08d9")
        buf.write("\13t\3u\3u\3u\3u\5u\u08df\nu\3v\3v\5v\u08e3\nv\3v\5v\u08e6")
        buf.write("\nv\3v\5v\u08e9\nv\3v\3v\3v\3v\7v\u08ef\nv\fv\16v\u08f2")
        buf.write("\13v\3w\3w\5w\u08f6\nw\3w\5w\u08f9\nw\3w\5w\u08fc\nw\3")
        buf.write("w\3w\5w\u0900\nw\3w\3w\5w\u0904\nw\5w\u0906\nw\3w\3w\5")
        buf.write("w\u090a\nw\3w\5w\u090d\nw\3w\3w\3w\3w\7w\u0913\nw\fw\16")
        buf.write("w\u0916\13w\3x\3x\5x\u091a\nx\3x\6x\u091d\nx\rx\16x\u091e")
        buf.write("\3x\5x\u0922\nx\3x\5x\u0925\nx\3x\3x\3x\3x\7x\u092b\n")
        buf.write("x\fx\16x\u092e\13x\3y\3y\3y\5y\u0933\ny\3z\3z\3{\5{\u0938")
        buf.write("\n{\3{\5{\u093b\n{\3{\3{\5{\u093f\n{\7{\u0941\n{\f{\16")
        buf.write("{\u0944\13{\3{\3{\5{\u0948\n{\3{\3{\5{\u094c\n{\3{\5{")
        buf.write("\u094f\n{\7{\u0951\n{\f{\16{\u0954\13{\3|\5|\u0957\n|")
        buf.write("\3|\3|\5|\u095b\n|\3|\5|\u095e\n|\3|\3|\3}\3}\3}\5}\u0965")
        buf.write("\n}\3~\3~\5~\u0969\n~\3~\3~\5~\u096d\n~\3~\3~\5~\u0971")
        buf.write("\n~\3~\7~\u0974\n~\f~\16~\u0977\13~\5~\u0979\n~\3~\5~")
        buf.write("\u097c\n~\3~\3~\3\177\3\177\5\177\u0982\n\177\3\177\3")
        buf.write("\177\5\177\u0986\n\177\3\177\3\177\5\177\u098a\n\177\3")
        buf.write("\177\3\177\5\177\u098e\n\177\3\177\5\177\u0991\n\177\3")
        buf.write("\177\3\177\5\177\u0995\n\177\3\177\5\177\u0998\n\177\3")
        buf.write("\177\5\177\u099b\n\177\3\177\5\177\u099e\n\177\3\177\5")
        buf.write("\177\u09a1\n\177\3\177\5\177\u09a4\n\177\3\u0080\3\u0080")
        buf.write("\5\u0080\u09a8\n\u0080\3\u0080\3\u0080\3\u0081\3\u0081")
        buf.write("\5\u0081\u09ae\n\u0081\3\u0081\3\u0081\5\u0081\u09b2\n")
        buf.write("\u0081\3\u0081\7\u0081\u09b5\n\u0081\f\u0081\16\u0081")
        buf.write("\u09b8\13\u0081\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082")
        buf.write("\5\u0082\u09bf\n\u0082\3\u0082\3\u0082\3\u0083\3\u0083")
        buf.write("\6\u0083\u09c5\n\u0083\r\u0083\16\u0083\u09c6\3\u0084")
        buf.write("\3\u0084\5\u0084\u09cb\n\u0084\3\u0084\3\u0084\5\u0084")
        buf.write("\u09cf\n\u0084\3\u0084\3\u0084\5\u0084\u09d3\n\u0084\3")
        buf.write("\u0084\5\u0084\u09d6\n\u0084\3\u0085\3\u0085\3\u0086\3")
        buf.write("\u0086\3\u0086\7\u0086\u09dd\n\u0086\f\u0086\16\u0086")
        buf.write("\u09e0\13\u0086\3\u0086\3\u0086\3\u0086\6\u0086\u09e5")
        buf.write("\n\u0086\r\u0086\16\u0086\u09e6\5\u0086\u09e9\n\u0086")
        buf.write("\3\u0087\3\u0087\3\u0088\3\u0088\3\u0088\7\u0088\u09f0")
        buf.write("\n\u0088\f\u0088\16\u0088\u09f3\13\u0088\3\u0089\3\u0089")
        buf.write("\5\u0089\u09f7\n\u0089\3\u0089\3\u0089\5\u0089\u09fb\n")
        buf.write("\u0089\3\u008a\3\u008a\5\u008a\u09ff\n\u008a\3\u008a\3")
        buf.write("\u008a\5\u008a\u0a03\n\u008a\3\u008a\5\u008a\u0a06\n\u008a")
        buf.write("\3\u008b\3\u008b\3\u008b\3\u008c\3\u008c\3\u008d\3\u008d")
        buf.write("\5\u008d\u0a0f\n\u008d\3\u008d\5\u008d\u0a12\n\u008d\3")
        buf.write("\u008d\3\u008d\5\u008d\u0a16\n\u008d\3\u008d\5\u008d\u0a19")
        buf.write("\n\u008d\3\u008e\3\u008e\3\u008f\3\u008f\3\u0090\3\u0090")
        buf.write("\3\u0091\3\u0091\3\u0092\3\u0092\3\u0093\5\u0093\u0a26")
        buf.write("\n\u0093\3\u0093\3\u0093\3\u0093\5\u0093\u0a2b\n\u0093")
        buf.write("\3\u0093\5\u0093\u0a2e\n\u0093\3\u0094\3\u0094\5\u0094")
        buf.write("\u0a32\n\u0094\3\u0094\3\u0094\5\u0094\u0a36\n\u0094\7")
        buf.write("\u0094\u0a38\n\u0094\f\u0094\16\u0094\u0a3b\13\u0094\3")
        buf.write("\u0094\2\3\u00ca\u0095\2\4\6\b\n\f\16\20\22\24\26\30\32")
        buf.write("\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfh")
        buf.write("jlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c")
        buf.write("\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e")
        buf.write("\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0")
        buf.write("\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2")
        buf.write("\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4")
        buf.write("\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6")
        buf.write("\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8")
        buf.write("\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a")
        buf.write("\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c")
        buf.write("\u011e\u0120\u0122\u0124\u0126\2\26\5\2\25\25\"\"\u00a9")
        buf.write("\u00a9\3\2%\60\4\2\u00b2\u00b2\u00b6\u00b6\3\2FJ\5\2\u00bf")
        buf.write("\u00bf\u00c6\u00c6\u00ca\u00ca\3\2yz\7\2\21\21\25\25X")
        buf.write("X\u0082\u0082\u008d\u008d\4\2\u0090\u0091\u00ba\u00ba")
        buf.write("\4\2eg\u00a0\u00a0\3\2\3\4\4\2\u00a2\u00a2\u00a8\u00a8")
        buf.write("\3\2\6\7\4\2\27\30\u0083\u0083\3\2\27\30\f\2\26\26\31")
        buf.write("\31  ##\64\64ZZ^^\u00a1\u00a1\u00a6\u00a6\u00b3\u00b3")
        buf.write("\7\2YYcc\u00bf\u00c2\u00c4\u00c4\u00c8\u00c8\6\2KKvw\u00ad")
        buf.write("\u00ad\u00cf\u00d5\5\2\5\5\7\n\u00bc\u00bc\6\2MMQQ\u0086")
        buf.write("\u0086\u008b\u008b\13\2\13\67@EKchhnx{|\u0081\u0086\u008b")
        buf.write("\u0090\u0092\u00bb\u0bda\2\u0128\3\2\2\2\4\u012c\3\2\2")
        buf.write("\2\6\u0164\3\2\2\2\b\u016a\3\2\2\2\n\u0178\3\2\2\2\f\u018d")
        buf.write("\3\2\2\2\16\u0191\3\2\2\2\20\u01ac\3\2\2\2\22\u01b8\3")
        buf.write("\2\2\2\24\u01bc\3\2\2\2\26\u01be\3\2\2\2\30\u01d7\3\2")
        buf.write("\2\2\32\u01d9\3\2\2\2\34\u01f1\3\2\2\2\36\u023f\3\2\2")
        buf.write("\2 \u0241\3\2\2\2\"\u024e\3\2\2\2$\u0250\3\2\2\2&\u0254")
        buf.write("\3\2\2\2(\u0258\3\2\2\2*\u026d\3\2\2\2,\u027f\3\2\2\2")
        buf.write(".\u0290\3\2\2\2\60\u029d\3\2\2\2\62\u02c5\3\2\2\2\64\u02d5")
        buf.write("\3\2\2\2\66\u0305\3\2\2\28\u0307\3\2\2\2:\u030c\3\2\2")
        buf.write("\2<\u031a\3\2\2\2>\u0327\3\2\2\2@\u032b\3\2\2\2B\u0332")
        buf.write("\3\2\2\2D\u033c\3\2\2\2F\u033e\3\2\2\2H\u034a\3\2\2\2")
        buf.write("J\u035f\3\2\2\2L\u0387\3\2\2\2N\u03a7\3\2\2\2P\u03bd\3")
        buf.write("\2\2\2R\u03c1\3\2\2\2T\u03de\3\2\2\2V\u03e0\3\2\2\2X\u03e9")
        buf.write("\3\2\2\2Z\u03eb\3\2\2\2\\\u03f4\3\2\2\2^\u03f9\3\2\2\2")
        buf.write("`\u03fd\3\2\2\2b\u040c\3\2\2\2d\u0412\3\2\2\2f\u041e\3")
        buf.write("\2\2\2h\u042a\3\2\2\2j\u042e\3\2\2\2l\u0441\3\2\2\2n\u044d")
        buf.write("\3\2\2\2p\u045b\3\2\2\2r\u0467\3\2\2\2t\u0477\3\2\2\2")
        buf.write("v\u0487\3\2\2\2x\u0491\3\2\2\2z\u049f\3\2\2\2|\u04a3\3")
        buf.write("\2\2\2~\u04ab\3\2\2\2\u0080\u04b5\3\2\2\2\u0082\u04c9")
        buf.write("\3\2\2\2\u0084\u04dd\3\2\2\2\u0086\u051f\3\2\2\2\u0088")
        buf.write("\u0532\3\2\2\2\u008a\u0534\3\2\2\2\u008c\u0544\3\2\2\2")
        buf.write("\u008e\u0563\3\2\2\2\u0090\u057b\3\2\2\2\u0092\u0590\3")
        buf.write("\2\2\2\u0094\u05a6\3\2\2\2\u0096\u05b9\3\2\2\2\u0098\u05be")
        buf.write("\3\2\2\2\u009a\u05d2\3\2\2\2\u009c\u05e3\3\2\2\2\u009e")
        buf.write("\u05e5\3\2\2\2\u00a0\u05ed\3\2\2\2\u00a2\u05ef\3\2\2\2")
        buf.write("\u00a4\u05f3\3\2\2\2\u00a6\u05ff\3\2\2\2\u00a8\u060b\3")
        buf.write("\2\2\2\u00aa\u0627\3\2\2\2\u00ac\u0633\3\2\2\2\u00ae\u0652")
        buf.write("\3\2\2\2\u00b0\u0654\3\2\2\2\u00b2\u066a\3\2\2\2\u00b4")
        buf.write("\u066c\3\2\2\2\u00b6\u0679\3\2\2\2\u00b8\u0685\3\2\2\2")
        buf.write("\u00ba\u0691\3\2\2\2\u00bc\u0696\3\2\2\2\u00be\u06ad\3")
        buf.write("\2\2\2\u00c0\u06ba\3\2\2\2\u00c2\u06c8\3\2\2\2\u00c4\u06df")
        buf.write("\3\2\2\2\u00c6\u06e8\3\2\2\2\u00c8\u06ec\3\2\2\2\u00ca")
        buf.write("\u073b\3\2\2\2\u00cc\u07f9\3\2\2\2\u00ce\u0802\3\2\2\2")
        buf.write("\u00d0\u0810\3\2\2\2\u00d2\u082b\3\2\2\2\u00d4\u0834\3")
        buf.write("\2\2\2\u00d6\u0840\3\2\2\2\u00d8\u084e\3\2\2\2\u00da\u085c")
        buf.write("\3\2\2\2\u00dc\u0862\3\2\2\2\u00de\u0864\3\2\2\2\u00e0")
        buf.write("\u0885\3\2\2\2\u00e2\u08ac\3\2\2\2\u00e4\u08af\3\2\2\2")
        buf.write("\u00e6\u08c9\3\2\2\2\u00e8\u08de\3\2\2\2\u00ea\u08e0\3")
        buf.write("\2\2\2\u00ec\u08f5\3\2\2\2\u00ee\u0919\3\2\2\2\u00f0\u092f")
        buf.write("\3\2\2\2\u00f2\u0934\3\2\2\2\u00f4\u0942\3\2\2\2\u00f6")
        buf.write("\u0956\3\2\2\2\u00f8\u0961\3\2\2\2\u00fa\u0966\3\2\2\2")
        buf.write("\u00fc\u0981\3\2\2\2\u00fe\u09a5\3\2\2\2\u0100\u09ab\3")
        buf.write("\2\2\2\u0102\u09be\3\2\2\2\u0104\u09c4\3\2\2\2\u0106\u09c8")
        buf.write("\3\2\2\2\u0108\u09d7\3\2\2\2\u010a\u09e8\3\2\2\2\u010c")
        buf.write("\u09ea\3\2\2\2\u010e\u09ec\3\2\2\2\u0110\u09f4\3\2\2\2")
        buf.write("\u0112\u09fc\3\2\2\2\u0114\u0a07\3\2\2\2\u0116\u0a0a\3")
        buf.write("\2\2\2\u0118\u0a0e\3\2\2\2\u011a\u0a1a\3\2\2\2\u011c\u0a1c")
        buf.write("\3\2\2\2\u011e\u0a1e\3\2\2\2\u0120\u0a20\3\2\2\2\u0122")
        buf.write("\u0a22\3\2\2\2\u0124\u0a25\3\2\2\2\u0126\u0a39\3\2\2\2")
        buf.write("\u0128\u0129\5\4\3\2\u0129\u012a\7\2\2\3\u012a\3\3\2\2")
        buf.write("\2\u012b\u012d\7\u00dd\2\2\u012c\u012b\3\2\2\2\u012c\u012d")
        buf.write("\3\2\2\2\u012d\u0131\3\2\2\2\u012e\u0130\5\u0124\u0093")
        buf.write("\2\u012f\u012e\3\2\2\2\u0130\u0133\3\2\2\2\u0131\u012f")
        buf.write("\3\2\2\2\u0131\u0132\3\2\2\2\u0132\u013b\3\2\2\2\u0133")
        buf.write("\u0131\3\2\2\2\u0134\u0138\5\6\4\2\u0135\u0137\5\u0124")
        buf.write("\u0093\2\u0136\u0135\3\2\2\2\u0137\u013a\3\2\2\2\u0138")
        buf.write("\u0136\3\2\2\2\u0138\u0139\3\2\2\2\u0139\u013c\3\2\2\2")
        buf.write("\u013a\u0138\3\2\2\2\u013b\u0134\3\2\2\2\u013b\u013c\3")
        buf.write("\2\2\2\u013c\u013e\3\2\2\2\u013d\u013f\5\b\5\2\u013e\u013d")
        buf.write("\3\2\2\2\u013e\u013f\3\2\2\2\u013f\u0143\3\2\2\2\u0140")
        buf.write("\u0142\5\u0124\u0093\2\u0141\u0140\3\2\2\2\u0142\u0145")
        buf.write("\3\2\2\2\u0143\u0141\3\2\2\2\u0143\u0144\3\2\2\2\u0144")
        buf.write("\u0147\3\2\2\2\u0145\u0143\3\2\2\2\u0146\u0148\5\f\7\2")
        buf.write("\u0147\u0146\3\2\2\2\u0147\u0148\3\2\2\2\u0148\u014c\3")
        buf.write("\2\2\2\u0149\u014b\5\u0124\u0093\2\u014a\u0149\3\2\2\2")
        buf.write("\u014b\u014e\3\2\2\2\u014c\u014a\3\2\2\2\u014c\u014d\3")
        buf.write("\2\2\2\u014d\u0150\3\2\2\2\u014e\u014c\3\2\2\2\u014f\u0151")
        buf.write("\5\16\b\2\u0150\u014f\3\2\2\2\u0150\u0151\3\2\2\2\u0151")
        buf.write("\u0155\3\2\2\2\u0152\u0154\5\u0124\u0093\2\u0153\u0152")
        buf.write("\3\2\2\2\u0154\u0157\3\2\2\2\u0155\u0153\3\2\2\2\u0155")
        buf.write("\u0156\3\2\2\2\u0156\u0159\3\2\2\2\u0157\u0155\3\2\2\2")
        buf.write("\u0158\u015a\5\26\f\2\u0159\u0158\3\2\2\2\u0159\u015a")
        buf.write("\3\2\2\2\u015a\u015e\3\2\2\2\u015b\u015d\5\u0124\u0093")
        buf.write("\2\u015c\u015b\3\2\2\2\u015d\u0160\3\2\2\2\u015e\u015c")
        buf.write("\3\2\2\2\u015e\u015f\3\2\2\2\u015f\u0162\3\2\2\2\u0160")
        buf.write("\u015e\3\2\2\2\u0161\u0163\7\u00dd\2\2\u0162\u0161\3\2")
        buf.write("\2\2\u0162\u0163\3\2\2\2\u0163\5\3\2\2\2\u0164\u0165\7")
        buf.write("\u00b4\2\2\u0165\u0166\7\u00dd\2\2\u0166\u0167\7\u00d4")
        buf.write("\2\2\u0167\u0168\7\u00dd\2\2\u0168\u0169\7\36\2\2\u0169")
        buf.write("\7\3\2\2\2\u016a\u016e\7\23\2\2\u016b\u016d\5\u0124\u0093")
        buf.write("\2\u016c\u016b\3\2\2\2\u016d\u0170\3\2\2\2\u016e\u016c")
        buf.write("\3\2\2\2\u016e\u016f\3\2\2\2\u016f\u0172\3\2\2\2\u0170")
        buf.write("\u016e\3\2\2\2\u0171\u0173\5\n\6\2\u0172\u0171\3\2\2\2")
        buf.write("\u0173\u0174\3\2\2\2\u0174\u0172\3\2\2\2\u0174\u0175\3")
        buf.write("\2\2\2\u0175\u0176\3\2\2\2\u0176\u0177\7@\2\2\u0177\t")
        buf.write("\3\2\2\2\u0178\u017a\5\u0104\u0083\2\u0179\u017b\7\u00dd")
        buf.write("\2\2\u017a\u0179\3\2\2\2\u017a\u017b\3\2\2\2\u017b\u017c")
        buf.write("\3\2\2\2\u017c\u017e\7\u00bf\2\2\u017d\u017f\7\u00dd\2")
        buf.write("\2\u017e\u017d\3\2\2\2\u017e\u017f\3\2\2\2\u017f\u0180")
        buf.write("\3\2\2\2\u0180\u0184\5\u0116\u008c\2\u0181\u0183\5\u0124")
        buf.write("\u0093\2\u0182\u0181\3\2\2\2\u0183\u0186\3\2\2\2\u0184")
        buf.write("\u0182\3\2\2\2\u0184\u0185\3\2\2\2\u0185\13\3\2\2\2\u0186")
        buf.write("\u0184\3\2\2\2\u0187\u0189\5\32\16\2\u0188\u018a\5\u0124")
        buf.write("\u0093\2\u0189\u0188\3\2\2\2\u018a\u018b\3\2\2\2\u018b")
        buf.write("\u0189\3\2\2\2\u018b\u018c\3\2\2\2\u018c\u018e\3\2\2\2")
        buf.write("\u018d\u0187\3\2\2\2\u018e\u018f\3\2\2\2\u018f\u018d\3")
        buf.write("\2\2\2\u018f\u0190\3\2\2\2\u0190\r\3\2\2\2\u0191\u019b")
        buf.write("\5\22\n\2\u0192\u0194\5\u0124\u0093\2\u0193\u0192\3\2")
        buf.write("\2\2\u0194\u0195\3\2\2\2\u0195\u0193\3\2\2\2\u0195\u0196")
        buf.write("\3\2\2\2\u0196\u0197\3\2\2\2\u0197\u0198\5\22\n\2\u0198")
        buf.write("\u019a\3\2\2\2\u0199\u0193\3\2\2\2\u019a\u019d\3\2\2\2")
        buf.write("\u019b\u0199\3\2\2\2\u019b\u019c\3\2\2\2\u019c\u01a1\3")
        buf.write("\2\2\2\u019d\u019b\3\2\2\2\u019e\u01a0\5\u0124\u0093\2")
        buf.write("\u019f\u019e\3\2\2\2\u01a0\u01a3\3\2\2\2\u01a1\u019f\3")
        buf.write("\2\2\2\u01a1\u01a2\3\2\2\2\u01a2\17\3\2\2\2\u01a3\u01a1")
        buf.write("\3\2\2\2\u01a4\u01a5\7}\2\2\u01a5\u01a6\7\u00dd\2\2\u01a6")
        buf.write("\u01ad\7\u00d2\2\2\u01a7\u01a8\7\177\2\2\u01a8\u01a9\7")
        buf.write("\u00dd\2\2\u01a9\u01ad\t\2\2\2\u01aa\u01ad\7~\2\2\u01ab")
        buf.write("\u01ad\7\u0080\2\2\u01ac\u01a4\3\2\2\2\u01ac\u01a7\3\2")
        buf.write("\2\2\u01ac\u01aa\3\2\2\2\u01ac\u01ab\3\2\2\2\u01ad\21")
        buf.write("\3\2\2\2\u01ae\u01b9\5\u0122\u0092\2\u01af\u01b9\5\60")
        buf.write("\31\2\u01b0\u01b9\5:\36\2\u01b1\u01b9\5B\"\2\u01b2\u01b9")
        buf.write("\5*\26\2\u01b3\u01b9\5^\60\2\u01b4\u01b9\5\u00ccg\2\u01b5")
        buf.write("\u01b9\5\20\t\2\u01b6\u01b9\5\u00c0a\2\u01b7\u01b9\5\24")
        buf.write("\13\2\u01b8\u01ae\3\2\2\2\u01b8\u01af\3\2\2\2\u01b8\u01b0")
        buf.write("\3\2\2\2\u01b8\u01b1\3\2\2\2\u01b8\u01b2\3\2\2\2\u01b8")
        buf.write("\u01b3\3\2\2\2\u01b8\u01b4\3\2\2\2\u01b8\u01b5\3\2\2\2")
        buf.write("\u01b8\u01b6\3\2\2\2\u01b8\u01b7\3\2\2\2\u01b9\23\3\2")
        buf.write("\2\2\u01ba\u01bd\5n8\2\u01bb\u01bd\5p9\2\u01bc\u01ba\3")
        buf.write("\2\2\2\u01bc\u01bb\3\2\2\2\u01bd\25\3\2\2\2\u01be\u01c8")
        buf.write("\5\30\r\2\u01bf\u01c1\5\u0124\u0093\2\u01c0\u01bf\3\2")
        buf.write("\2\2\u01c1\u01c2\3\2\2\2\u01c2\u01c0\3\2\2\2\u01c2\u01c3")
        buf.write("\3\2\2\2\u01c3\u01c4\3\2\2\2\u01c4\u01c5\5\30\r\2\u01c5")
        buf.write("\u01c7\3\2\2\2\u01c6\u01c0\3\2\2\2\u01c7\u01ca\3\2\2\2")
        buf.write("\u01c8\u01c6\3\2\2\2\u01c8\u01c9\3\2\2\2\u01c9\u01ce\3")
        buf.write("\2\2\2\u01ca\u01c8\3\2\2\2\u01cb\u01cd\5\u0124\u0093\2")
        buf.write("\u01cc\u01cb\3\2\2\2\u01cd\u01d0\3\2\2\2\u01ce\u01cc\3")
        buf.write("\2\2\2\u01ce\u01cf\3\2\2\2\u01cf\27\3\2\2\2\u01d0\u01ce")
        buf.write("\3\2\2\2\u01d1\u01d8\5L\'\2\u01d2\u01d8\5\u008cG\2\u01d3")
        buf.write("\u01d8\5\u008eH\2\u01d4\u01d8\5\u0090I\2\u01d5\u01d8\5")
        buf.write("\u00bc_\2\u01d6\u01d8\5\24\13\2\u01d7\u01d1\3\2\2\2\u01d7")
        buf.write("\u01d2\3\2\2\2\u01d7\u01d3\3\2\2\2\u01d7\u01d4\3\2\2\2")
        buf.write("\u01d7\u01d5\3\2\2\2\u01d7\u01d6\3\2\2\2\u01d8\31\3\2")
        buf.write("\2\2\u01d9\u01da\7\17\2\2\u01da\u01db\7\u00dd\2\2\u01db")
        buf.write("\u01dd\5\u00e8u\2\u01dc\u01de\7\u00dd\2\2\u01dd\u01dc")
        buf.write("\3\2\2\2\u01dd\u01de\3\2\2\2\u01de\u01df\3\2\2\2\u01df")
        buf.write("\u01e1\7\u00bf\2\2\u01e0\u01e2\7\u00dd\2\2\u01e1\u01e0")
        buf.write("\3\2\2\2\u01e1\u01e2\3\2\2\2\u01e2\u01e3\3\2\2\2\u01e3")
        buf.write("\u01ee\5\u0116\u008c\2\u01e4\u01e6\7\u00dd\2\2\u01e5\u01e4")
        buf.write("\3\2\2\2\u01e5\u01e6\3\2\2\2\u01e6\u01e7\3\2\2\2\u01e7")
        buf.write("\u01e9\7\3\2\2\u01e8\u01ea\7\u00dd\2\2\u01e9\u01e8\3\2")
        buf.write("\2\2\u01e9\u01ea\3\2\2\2\u01ea\u01eb\3\2\2\2\u01eb\u01ed")
        buf.write("\5\u0116\u008c\2\u01ec\u01e5\3\2\2\2\u01ed\u01f0\3\2\2")
        buf.write("\2\u01ee\u01ec\3\2\2\2\u01ee\u01ef\3\2\2\2\u01ef\33\3")
        buf.write("\2\2\2\u01f0\u01ee\3\2\2\2\u01f1\u01f7\5\36\20\2\u01f2")
        buf.write("\u01f3\5\u0126\u0094\2\u01f3\u01f4\5\36\20\2\u01f4\u01f6")
        buf.write("\3\2\2\2\u01f5\u01f2\3\2\2\2\u01f6\u01f9\3\2\2\2\u01f7")
        buf.write("\u01f5\3\2\2\2\u01f7\u01f8\3\2\2\2\u01f8\u01fa\3\2\2\2")
        buf.write("\u01f9\u01f7\3\2\2\2\u01fa\u01fb\5\u0126\u0094\2\u01fb")
        buf.write("\35\3\2\2\2\u01fc\u0240\5\u0114\u008b\2\u01fd\u0240\5")
        buf.write(" \21\2\u01fe\u0240\5\32\16\2\u01ff\u0240\5\"\22\2\u0200")
        buf.write("\u0240\5$\23\2\u0201\u0240\5&\24\2\u0202\u0240\5(\25\2")
        buf.write("\u0203\u0240\5*\26\2\u0204\u0240\5.\30\2\u0205\u0240\5")
        buf.write("\64\33\2\u0206\u0240\5\62\32\2\u0207\u0240\5\66\34\2\u0208")
        buf.write("\u0240\58\35\2\u0209\u0240\5> \2\u020a\u0240\5@!\2\u020b")
        buf.write("\u0240\5D#\2\u020c\u0240\5\u00dco\2\u020d\u0240\5F$\2")
        buf.write("\u020e\u0240\5H%\2\u020f\u0240\5J&\2\u0210\u0240\5N(\2")
        buf.write("\u0211\u0240\5P)\2\u0212\u0240\5R*\2\u0213\u0240\5T+\2")
        buf.write("\u0214\u0240\5^\60\2\u0215\u0240\5`\61\2\u0216\u0240\5")
        buf.write("b\62\2\u0217\u0240\5d\63\2\u0218\u0240\5f\64\2\u0219\u0240")
        buf.write("\5h\65\2\u021a\u0240\5j\66\2\u021b\u0240\5l\67\2\u021c")
        buf.write("\u0240\5\24\13\2\u021d\u0240\5x=\2\u021e\u0240\5z>\2\u021f")
        buf.write("\u0240\5|?\2\u0220\u0240\5~@\2\u0221\u0240\5\u0080A\2")
        buf.write("\u0222\u0240\5\u0082B\2\u0223\u0240\5\u0084C\2\u0224\u0240")
        buf.write("\5\u008aF\2\u0225\u0240\5\u0092J\2\u0226\u0240\5\u0094")
        buf.write("K\2\u0227\u0240\5\u0096L\2\u0228\u0240\5\u0098M\2\u0229")
        buf.write("\u0240\5\u009cO\2\u022a\u0240\5\u009eP\2\u022b\u0240\5")
        buf.write("\u00a0Q\2\u022c\u0240\5\u00a2R\2\u022d\u0240\5\u00a4S")
        buf.write("\2\u022e\u0240\5\u00a6T\2\u022f\u0240\5\u00a8U\2\u0230")
        buf.write("\u0240\5\u00aaV\2\u0231\u0240\5\u00acW\2\u0232\u0240\5")
        buf.write("\u00b4[\2\u0233\u0240\5\u00b6\\\2\u0234\u0240\5\u00b8")
        buf.write("]\2\u0235\u0240\5\u00ba^\2\u0236\u0240\5\u00be`\2\u0237")
        buf.write("\u0240\5\u00c6d\2\u0238\u0240\5\u00c8e\2\u0239\u0240\5")
        buf.write("\u00ccg\2\u023a\u0240\5\u00d2j\2\u023b\u0240\5\u00d4k")
        buf.write("\2\u023c\u0240\5\u00d6l\2\u023d\u0240\5\u00d8m\2\u023e")
        buf.write("\u0240\5\u00e2r\2\u023f\u01fc\3\2\2\2\u023f\u01fd\3\2")
        buf.write("\2\2\u023f\u01fe\3\2\2\2\u023f\u01ff\3\2\2\2\u023f\u0200")
        buf.write("\3\2\2\2\u023f\u0201\3\2\2\2\u023f\u0202\3\2\2\2\u023f")
        buf.write("\u0203\3\2\2\2\u023f\u0204\3\2\2\2\u023f\u0205\3\2\2\2")
        buf.write("\u023f\u0206\3\2\2\2\u023f\u0207\3\2\2\2\u023f\u0208\3")
        buf.write("\2\2\2\u023f\u0209\3\2\2\2\u023f\u020a\3\2\2\2\u023f\u020b")
        buf.write("\3\2\2\2\u023f\u020c\3\2\2\2\u023f\u020d\3\2\2\2\u023f")
        buf.write("\u020e\3\2\2\2\u023f\u020f\3\2\2\2\u023f\u0210\3\2\2\2")
        buf.write("\u023f\u0211\3\2\2\2\u023f\u0212\3\2\2\2\u023f\u0213\3")
        buf.write("\2\2\2\u023f\u0214\3\2\2\2\u023f\u0215\3\2\2\2\u023f\u0216")
        buf.write("\3\2\2\2\u023f\u0217\3\2\2\2\u023f\u0218\3\2\2\2\u023f")
        buf.write("\u0219\3\2\2\2\u023f\u021a\3\2\2\2\u023f\u021b\3\2\2\2")
        buf.write("\u023f\u021c\3\2\2\2\u023f\u021d\3\2\2\2\u023f\u021e\3")
        buf.write("\2\2\2\u023f\u021f\3\2\2\2\u023f\u0220\3\2\2\2\u023f\u0221")
        buf.write("\3\2\2\2\u023f\u0222\3\2\2\2\u023f\u0223\3\2\2\2\u023f")
        buf.write("\u0224\3\2\2\2\u023f\u0225\3\2\2\2\u023f\u0226\3\2\2\2")
        buf.write("\u023f\u0227\3\2\2\2\u023f\u0228\3\2\2\2\u023f\u0229\3")
        buf.write("\2\2\2\u023f\u022a\3\2\2\2\u023f\u022b\3\2\2\2\u023f\u022c")
        buf.write("\3\2\2\2\u023f\u022d\3\2\2\2\u023f\u022e\3\2\2\2\u023f")
        buf.write("\u022f\3\2\2\2\u023f\u0230\3\2\2\2\u023f\u0231\3\2\2\2")
        buf.write("\u023f\u0232\3\2\2\2\u023f\u0233\3\2\2\2\u023f\u0234\3")
        buf.write("\2\2\2\u023f\u0235\3\2\2\2\u023f\u0236\3\2\2\2\u023f\u0237")
        buf.write("\3\2\2\2\u023f\u0238\3\2\2\2\u023f\u0239\3\2\2\2\u023f")
        buf.write("\u023a\3\2\2\2\u023f\u023b\3\2\2\2\u023f\u023c\3\2\2\2")
        buf.write("\u023f\u023d\3\2\2\2\u023f\u023e\3\2\2\2\u0240\37\3\2")
        buf.write("\2\2\u0241\u0242\7\20\2\2\u0242\u0243\7\u00dd\2\2\u0243")
        buf.write("\u024c\5\u00caf\2\u0244\u0246\7\u00dd\2\2\u0245\u0244")
        buf.write("\3\2\2\2\u0245\u0246\3\2\2\2\u0246\u0247\3\2\2\2\u0247")
        buf.write("\u0249\7\3\2\2\u0248\u024a\7\u00dd\2\2\u0249\u0248\3\2")
        buf.write("\2\2\u0249\u024a\3\2\2\2\u024a\u024b\3\2\2\2\u024b\u024d")
        buf.write("\5\u00caf\2\u024c\u0245\3\2\2\2\u024c\u024d\3\2\2\2\u024d")
        buf.write("!\3\2\2\2\u024e\u024f\7\24\2\2\u024f#\3\2\2\2\u0250\u0251")
        buf.write("\7\34\2\2\u0251\u0252\7\u00dd\2\2\u0252\u0253\5\u00ca")
        buf.write("f\2\u0253%\3\2\2\2\u0254\u0255\7\35\2\2\u0255\u0256\7")
        buf.write("\u00dd\2\2\u0256\u0257\5\u00caf\2\u0257\'\3\2\2\2\u0258")
        buf.write("\u0268\7\37\2\2\u0259\u025a\7\u00dd\2\2\u025a\u0265\5")
        buf.write("\u00dan\2\u025b\u025d\7\u00dd\2\2\u025c\u025b\3\2\2\2")
        buf.write("\u025c\u025d\3\2\2\2\u025d\u025e\3\2\2\2\u025e\u0260\7")
        buf.write("\3\2\2\u025f\u0261\7\u00dd\2\2\u0260\u025f\3\2\2\2\u0260")
        buf.write("\u0261\3\2\2\2\u0261\u0262\3\2\2\2\u0262\u0264\5\u00da")
        buf.write("n\2\u0263\u025c\3\2\2\2\u0264\u0267\3\2\2\2\u0265\u0263")
        buf.write("\3\2\2\2\u0265\u0266\3\2\2\2\u0266\u0269\3\2\2\2\u0267")
        buf.write("\u0265\3\2\2\2\u0268\u0259\3\2\2\2\u0268\u0269\3\2\2\2")
        buf.write("\u0269)\3\2\2\2\u026a\u026b\5\u011c\u008f\2\u026b\u026c")
        buf.write("\7\u00dd\2\2\u026c\u026e\3\2\2\2\u026d\u026a\3\2\2\2\u026d")
        buf.write("\u026e\3\2\2\2\u026e\u026f\3\2\2\2\u026f\u0270\7!\2\2")
        buf.write("\u0270\u0271\7\u00dd\2\2\u0271\u027c\5,\27\2\u0272\u0274")
        buf.write("\7\u00dd\2\2\u0273\u0272\3\2\2\2\u0273\u0274\3\2\2\2\u0274")
        buf.write("\u0275\3\2\2\2\u0275\u0277\7\3\2\2\u0276\u0278\7\u00dd")
        buf.write("\2\2\u0277\u0276\3\2\2\2\u0277\u0278\3\2\2\2\u0278\u0279")
        buf.write("\3\2\2\2\u0279\u027b\5,\27\2\u027a\u0273\3\2\2\2\u027b")
        buf.write("\u027e\3\2\2\2\u027c\u027a\3\2\2\2\u027c\u027d\3\2\2\2")
        buf.write("\u027d+\3\2\2\2\u027e\u027c\3\2\2\2\u027f\u0281\5\u0104")
        buf.write("\u0083\2\u0280\u0282\5\u011a\u008e\2\u0281\u0280\3\2\2")
        buf.write("\2\u0281\u0282\3\2\2\2\u0282\u0285\3\2\2\2\u0283\u0284")
        buf.write("\7\u00dd\2\2\u0284\u0286\5\u0106\u0084\2\u0285\u0283\3")
        buf.write("\2\2\2\u0285\u0286\3\2\2\2\u0286\u0288\3\2\2\2\u0287\u0289")
        buf.write("\7\u00dd\2\2\u0288\u0287\3\2\2\2\u0288\u0289\3\2\2\2\u0289")
        buf.write("\u028a\3\2\2\2\u028a\u028c\7\u00bf\2\2\u028b\u028d\7\u00dd")
        buf.write("\2\2\u028c\u028b\3\2\2\2\u028c\u028d\3\2\2\2\u028d\u028e")
        buf.write("\3\2\2\2\u028e\u028f\5\u00caf\2\u028f-\3\2\2\2\u0290\u0292")
        buf.write("\7#\2\2\u0291\u0293\7\u00dd\2\2\u0292\u0291\3\2\2\2\u0292")
        buf.write("\u0293\3\2\2\2\u0293\u0294\3\2\2\2\u0294\u0296\7\u00bf")
        buf.write("\2\2\u0295\u0297\7\u00dd\2\2\u0296\u0295\3\2\2\2\u0296")
        buf.write("\u0297\3\2\2\2\u0297\u0298\3\2\2\2\u0298\u0299\5\u00ca")
        buf.write("f\2\u0299/\3\2\2\2\u029a\u029b\5\u011c\u008f\2\u029b\u029c")
        buf.write("\7\u00dd\2\2\u029c\u029e\3\2\2\2\u029d\u029a\3\2\2\2\u029d")
        buf.write("\u029e\3\2\2\2\u029e\u029f\3\2\2\2\u029f\u02a0\7$\2\2")
        buf.write("\u02a0\u02a3\7\u00dd\2\2\u02a1\u02a2\7\u008a\2\2\u02a2")
        buf.write("\u02a4\7\u00dd\2\2\u02a3\u02a1\3\2\2\2\u02a3\u02a4\3\2")
        buf.write("\2\2\u02a4\u02aa\3\2\2\2\u02a5\u02a7\7O\2\2\u02a6\u02a8")
        buf.write("\5\u011a\u008e\2\u02a7\u02a6\3\2\2\2\u02a7\u02a8\3\2\2")
        buf.write("\2\u02a8\u02ab\3\2\2\2\u02a9\u02ab\7\u00a7\2\2\u02aa\u02a5")
        buf.write("\3\2\2\2\u02aa\u02a9\3\2\2\2\u02ab\u02ac\3\2\2\2\u02ac")
        buf.write("\u02ad\7\u00dd\2\2\u02ad\u02af\5\u0104\u0083\2\u02ae\u02b0")
        buf.write("\5\u011a\u008e\2\u02af\u02ae\3\2\2\2\u02af\u02b0\3\2\2")
        buf.write("\2\u02b0\u02b1\3\2\2\2\u02b1\u02b2\7\u00dd\2\2\u02b2\u02b3")
        buf.write("\7b\2\2\u02b3\u02b4\7\u00dd\2\2\u02b4\u02b9\7\u00cf\2")
        buf.write("\2\u02b5\u02b6\7\u00dd\2\2\u02b6\u02b7\7\r\2\2\u02b7\u02b8")
        buf.write("\7\u00dd\2\2\u02b8\u02ba\7\u00cf\2\2\u02b9\u02b5\3\2\2")
        buf.write("\2\u02b9\u02ba\3\2\2\2\u02ba\u02bf\3\2\2\2\u02bb\u02bd")
        buf.write("\7\u00dd\2\2\u02bc\u02bb\3\2\2\2\u02bc\u02bd\3\2\2\2\u02bd")
        buf.write("\u02be\3\2\2\2\u02be\u02c0\5\u00fa~\2\u02bf\u02bc\3\2")
        buf.write("\2\2\u02bf\u02c0\3\2\2\2\u02c0\u02c3\3\2\2\2\u02c1\u02c2")
        buf.write("\7\u00dd\2\2\u02c2\u02c4\5\u0106\u0084\2\u02c3\u02c1\3")
        buf.write("\2\2\2\u02c3\u02c4\3\2\2\2\u02c4\61\3\2\2\2\u02c5\u02c6")
        buf.write("\t\3\2\2\u02c6\u02c7\7\u00dd\2\2\u02c7\u02d2\5\u0112\u008a")
        buf.write("\2\u02c8\u02ca\7\u00dd\2\2\u02c9\u02c8\3\2\2\2\u02c9\u02ca")
        buf.write("\3\2\2\2\u02ca\u02cb\3\2\2\2\u02cb\u02cd\7\3\2\2\u02cc")
        buf.write("\u02ce\7\u00dd\2\2\u02cd\u02cc\3\2\2\2\u02cd\u02ce\3\2")
        buf.write("\2\2\u02ce\u02cf\3\2\2\2\u02cf\u02d1\5\u0112\u008a\2\u02d0")
        buf.write("\u02c9\3\2\2\2\u02d1\u02d4\3\2\2\2\u02d2\u02d0\3\2\2\2")
        buf.write("\u02d2\u02d3\3\2\2\2\u02d3\63\3\2\2\2\u02d4\u02d2\3\2")
        buf.write("\2\2\u02d5\u02d6\7\61\2\2\u02d6\u02d7\7\u00dd\2\2\u02d7")
        buf.write("\u02d9\5\u00caf\2\u02d8\u02da\7\u00dd\2\2\u02d9\u02d8")
        buf.write("\3\2\2\2\u02d9\u02da\3\2\2\2\u02da\u02db\3\2\2\2\u02db")
        buf.write("\u02dd\7\3\2\2\u02dc\u02de\7\u00dd\2\2\u02dd\u02dc\3\2")
        buf.write("\2\2\u02dd\u02de\3\2\2\2\u02de\u02df\3\2\2\2\u02df\u02e8")
        buf.write("\5\u00caf\2\u02e0\u02e2\7\u00dd\2\2\u02e1\u02e0\3\2\2")
        buf.write("\2\u02e1\u02e2\3\2\2\2\u02e2\u02e3\3\2\2\2\u02e3\u02e5")
        buf.write("\7\3\2\2\u02e4\u02e6\7\u00dd\2\2\u02e5\u02e4\3\2\2\2\u02e5")
        buf.write("\u02e6\3\2\2\2\u02e6\u02e7\3\2\2\2\u02e7\u02e9\5\u00ca")
        buf.write("f\2\u02e8\u02e1\3\2\2\2\u02e8\u02e9\3\2\2\2\u02e9\65\3")
        buf.write("\2\2\2\u02ea\u02eb\7\63\2\2\u02eb\u02ed\5\u0126\u0094")
        buf.write("\2\u02ec\u02ee\5\34\17\2\u02ed\u02ec\3\2\2\2\u02ed\u02ee")
        buf.write("\3\2\2\2\u02ee\u02ef\3\2\2\2\u02ef\u02f0\7_\2\2\u02f0")
        buf.write("\u0306\3\2\2\2\u02f1\u02f2\7\63\2\2\u02f2\u02f3\7\u00dd")
        buf.write("\2\2\u02f3\u02f4\t\4\2\2\u02f4\u02f5\7\u00dd\2\2\u02f5")
        buf.write("\u02f6\5\u00caf\2\u02f6\u02f8\5\u0126\u0094\2\u02f7\u02f9")
        buf.write("\5\34\17\2\u02f8\u02f7\3\2\2\2\u02f8\u02f9\3\2\2\2\u02f9")
        buf.write("\u02fa\3\2\2\2\u02fa\u02fb\7_\2\2\u02fb\u0306\3\2\2\2")
        buf.write("\u02fc\u02fd\7\63\2\2\u02fd\u02fe\5\u0126\u0094\2\u02fe")
        buf.write("\u02ff\5\34\17\2\u02ff\u0300\7_\2\2\u0300\u0301\7\u00dd")
        buf.write("\2\2\u0301\u0302\t\4\2\2\u0302\u0303\7\u00dd\2\2\u0303")
        buf.write("\u0304\5\u00caf\2\u0304\u0306\3\2\2\2\u0305\u02ea\3\2")
        buf.write("\2\2\u0305\u02f1\3\2\2\2\u0305\u02fc\3\2\2\2\u0306\67")
        buf.write("\3\2\2\2\u0307\u0308\7@\2\2\u03089\3\2\2\2\u0309\u030a")
        buf.write("\5\u011c\u008f\2\u030a\u030b\7\u00dd\2\2\u030b\u030d\3")
        buf.write("\2\2\2\u030c\u0309\3\2\2\2\u030c\u030d\3\2\2\2\u030d\u030e")
        buf.write("\3\2\2\2\u030e\u030f\7A\2\2\u030f\u0310\7\u00dd\2\2\u0310")
        buf.write("\u0311\5\u0104\u0083\2\u0311\u0315\5\u0126\u0094\2\u0312")
        buf.write("\u0314\5<\37\2\u0313\u0312\3\2\2\2\u0314\u0317\3\2\2\2")
        buf.write("\u0315\u0313\3\2\2\2\u0315\u0316\3\2\2\2\u0316\u0318\3")
        buf.write("\2\2\2\u0317\u0315\3\2\2\2\u0318\u0319\78\2\2\u0319;\3")
        buf.write("\2\2\2\u031a\u0323\5\u0104\u0083\2\u031b\u031d\7\u00dd")
        buf.write("\2\2\u031c\u031b\3\2\2\2\u031c\u031d\3\2\2\2\u031d\u031e")
        buf.write("\3\2\2\2\u031e\u0320\7\u00bf\2\2\u031f\u0321\7\u00dd\2")
        buf.write("\2\u0320\u031f\3\2\2\2\u0320\u0321\3\2\2\2\u0321\u0322")
        buf.write("\3\2\2\2\u0322\u0324\5\u00caf\2\u0323\u031c\3\2\2\2\u0323")
        buf.write("\u0324\3\2\2\2\u0324\u0325\3\2\2\2\u0325\u0326\5\u0126")
        buf.write("\u0094\2\u0326=\3\2\2\2\u0327\u0328\7C\2\2\u0328\u0329")
        buf.write("\7\u00dd\2\2\u0329\u032a\5\u00caf\2\u032a?\3\2\2\2\u032b")
        buf.write("\u032c\7D\2\2\u032c\u032d\7\u00dd\2\2\u032d\u032e\5\u00ca")
        buf.write("f\2\u032eA\3\2\2\2\u032f\u0330\5\u011c\u008f\2\u0330\u0331")
        buf.write("\7\u00dd\2\2\u0331\u0333\3\2\2\2\u0332\u032f\3\2\2\2\u0332")
        buf.write("\u0333\3\2\2\2\u0333\u0334\3\2\2\2\u0334\u0335\7E\2\2")
        buf.write("\u0335\u0336\7\u00dd\2\2\u0336\u0338\5\u0104\u0083\2\u0337")
        buf.write("\u0339\7\u00dd\2\2\u0338\u0337\3\2\2\2\u0338\u0339\3\2")
        buf.write("\2\2\u0339\u033a\3\2\2\2\u033a\u033b\5\u00fa~\2\u033b")
        buf.write("C\3\2\2\2\u033c\u033d\t\5\2\2\u033dE\3\2\2\2\u033e\u033f")
        buf.write("\7L\2\2\u033f\u0340\7\u00dd\2\2\u0340\u0342\5\u00caf\2")
        buf.write("\u0341\u0343\7\u00dd\2\2\u0342\u0341\3\2\2\2\u0342\u0343")
        buf.write("\3\2\2\2\u0343\u0344\3\2\2\2\u0344\u0346\7\3\2\2\u0345")
        buf.write("\u0347\7\u00dd\2\2\u0346\u0345\3\2\2\2\u0346\u0347\3\2")
        buf.write("\2\2\u0347\u0348\3\2\2\2\u0348\u0349\5\u00caf\2\u0349")
        buf.write("G\3\2\2\2\u034a\u034b\7N\2\2\u034b\u034c\7\u00dd\2\2\u034c")
        buf.write("\u034d\7\65\2\2\u034d\u034e\7\u00dd\2\2\u034e\u0350\5")
        buf.write("\u0104\u0083\2\u034f\u0351\5\u011a\u008e\2\u0350\u034f")
        buf.write("\3\2\2\2\u0350\u0351\3\2\2\2\u0351\u0352\3\2\2\2\u0352")
        buf.write("\u0353\7\u00dd\2\2\u0353\u0354\7W\2\2\u0354\u0355\7\u00dd")
        buf.write("\2\2\u0355\u0356\5\u00caf\2\u0356\u0358\5\u0126\u0094")
        buf.write("\2\u0357\u0359\5\34\17\2\u0358\u0357\3\2\2\2\u0358\u0359")
        buf.write("\3\2\2\2\u0359\u035a\3\2\2\2\u035a\u035d\7s\2\2\u035b")
        buf.write("\u035c\7\u00dd\2\2\u035c\u035e\5\u0104\u0083\2\u035d\u035b")
        buf.write("\3\2\2\2\u035d\u035e\3\2\2\2\u035eI\3\2\2\2\u035f\u0360")
        buf.write("\7N\2\2\u0360\u0361\7\u00dd\2\2\u0361\u0363\5\u0104\u0083")
        buf.write("\2\u0362\u0364\5\u011a\u008e\2\u0363\u0362\3\2\2\2\u0363")
        buf.write("\u0364\3\2\2\2\u0364\u0367\3\2\2\2\u0365\u0366\7\u00dd")
        buf.write("\2\2\u0366\u0368\5\u0106\u0084\2\u0367\u0365\3\2\2\2\u0367")
        buf.write("\u0368\3\2\2\2\u0368\u036a\3\2\2\2\u0369\u036b\7\u00dd")
        buf.write("\2\2\u036a\u0369\3\2\2\2\u036a\u036b\3\2\2\2\u036b\u036c")
        buf.write("\3\2\2\2\u036c\u036e\7\u00bf\2\2\u036d\u036f\7\u00dd\2")
        buf.write("\2\u036e\u036d\3\2\2\2\u036e\u036f\3\2\2\2\u036f\u0370")
        buf.write("\3\2\2\2\u0370\u0371\5\u00caf\2\u0371\u0372\7\u00dd\2")
        buf.write("\2\u0372\u0373\7\u00ac\2\2\u0373\u0374\7\u00dd\2\2\u0374")
        buf.write("\u0379\5\u00caf\2\u0375\u0376\7\u00dd\2\2\u0376\u0377")
        buf.write("\7\u00a4\2\2\u0377\u0378\7\u00dd\2\2\u0378\u037a\5\u00ca")
        buf.write("f\2\u0379\u0375\3\2\2\2\u0379\u037a\3\2\2\2\u037a\u037b")
        buf.write("\3\2\2\2\u037b\u037d\5\u0126\u0094\2\u037c\u037e\5\34")
        buf.write("\17\2\u037d\u037c\3\2\2\2\u037d\u037e\3\2\2\2\u037e\u037f")
        buf.write("\3\2\2\2\u037f\u0382\7s\2\2\u0380\u0381\7\u00dd\2\2\u0381")
        buf.write("\u0383\5\u0104\u0083\2\u0382\u0380\3\2\2\2\u0382\u0383")
        buf.write("\3\2\2\2\u0383K\3\2\2\2\u0384\u0385\5\u011c\u008f\2\u0385")
        buf.write("\u0386\7\u00dd\2\2\u0386\u0388\3\2\2\2\u0387\u0384\3\2")
        buf.write("\2\2\u0387\u0388\3\2\2\2\u0388\u038b\3\2\2\2\u0389\u038a")
        buf.write("\7\u00a3\2\2\u038a\u038c\7\u00dd\2\2\u038b\u0389\3\2\2")
        buf.write("\2\u038b\u038c\3\2\2\2\u038c\u038d\3\2\2\2\u038d\u038f")
        buf.write("\7O\2\2\u038e\u0390\7\u00dd\2\2\u038f\u038e\3\2\2\2\u038f")
        buf.write("\u0390\3\2\2\2\u0390\u0391\3\2\2\2\u0391\u0393\5\u0104")
        buf.write("\u0083\2\u0392\u0394\5\u011a\u008e\2\u0393\u0392\3\2\2")
        buf.write("\2\u0393\u0394\3\2\2\2\u0394\u0399\3\2\2\2\u0395\u0397")
        buf.write("\7\u00dd\2\2\u0396\u0395\3\2\2\2\u0396\u0397\3\2\2\2\u0397")
        buf.write("\u0398\3\2\2\2\u0398\u039a\5\u00fa~\2\u0399\u0396\3\2")
        buf.write("\2\2\u0399\u039a\3\2\2\2\u039a\u039f\3\2\2\2\u039b\u039d")
        buf.write("\7\u00dd\2\2\u039c\u039b\3\2\2\2\u039c\u039d\3\2\2\2\u039d")
        buf.write("\u039e\3\2\2\2\u039e\u03a0\5\u0106\u0084\2\u039f\u039c")
        buf.write("\3\2\2\2\u039f\u03a0\3\2\2\2\u03a0\u03a1\3\2\2\2\u03a1")
        buf.write("\u03a3\5\u0126\u0094\2\u03a2\u03a4\5\34\17\2\u03a3\u03a2")
        buf.write("\3\2\2\2\u03a3\u03a4\3\2\2\2\u03a4\u03a5\3\2\2\2\u03a5")
        buf.write("\u03a6\79\2\2\u03a6M\3\2\2\2\u03a7\u03a8\7P\2\2\u03a8")
        buf.write("\u03a9\7\u00dd\2\2\u03a9\u03ab\5\u00dan\2\u03aa\u03ac")
        buf.write("\7\u00dd\2\2\u03ab\u03aa\3\2\2\2\u03ab\u03ac\3\2\2\2\u03ac")
        buf.write("\u03ad\3\2\2\2\u03ad\u03af\7\3\2\2\u03ae\u03b0\7\u00dd")
        buf.write("\2\2\u03af\u03ae\3\2\2\2\u03af\u03b0\3\2\2\2\u03b0\u03b2")
        buf.write("\3\2\2\2\u03b1\u03b3\5\u00caf\2\u03b2\u03b1\3\2\2\2\u03b2")
        buf.write("\u03b3\3\2\2\2\u03b3\u03b5\3\2\2\2\u03b4\u03b6\7\u00dd")
        buf.write("\2\2\u03b5\u03b4\3\2\2\2\u03b5\u03b6\3\2\2\2\u03b6\u03b7")
        buf.write("\3\2\2\2\u03b7\u03b9\7\3\2\2\u03b8\u03ba\7\u00dd\2\2\u03b9")
        buf.write("\u03b8\3\2\2\2\u03b9\u03ba\3\2\2\2\u03ba\u03bb\3\2\2\2")
        buf.write("\u03bb\u03bc\5\u00caf\2\u03bcO\3\2\2\2\u03bd\u03be\7R")
        buf.write("\2\2\u03be\u03bf\7\u00dd\2\2\u03bf\u03c0\5\u00caf\2\u03c0")
        buf.write("Q\3\2\2\2\u03c1\u03c2\7S\2\2\u03c2\u03c3\7\u00dd\2\2\u03c3")
        buf.write("\u03c4\5\u00caf\2\u03c4S\3\2\2\2\u03c5\u03c6\7T\2\2\u03c6")
        buf.write("\u03c7\7\u00dd\2\2\u03c7\u03c8\5X-\2\u03c8\u03c9\7\u00dd")
        buf.write("\2\2\u03c9\u03ca\7\u00aa\2\2\u03ca\u03cb\7\u00dd\2\2\u03cb")
        buf.write("\u03d0\5\36\20\2\u03cc\u03cd\7\u00dd\2\2\u03cd\u03ce\7")
        buf.write("\66\2\2\u03ce\u03cf\7\u00dd\2\2\u03cf\u03d1\5\36\20\2")
        buf.write("\u03d0\u03cc\3\2\2\2\u03d0\u03d1\3\2\2\2\u03d1\u03df\3")
        buf.write("\2\2\2\u03d2\u03d6\5V,\2\u03d3\u03d5\5Z.\2\u03d4\u03d3")
        buf.write("\3\2\2\2\u03d5\u03d8\3\2\2\2\u03d6\u03d4\3\2\2\2\u03d6")
        buf.write("\u03d7\3\2\2\2\u03d7\u03da\3\2\2\2\u03d8\u03d6\3\2\2\2")
        buf.write("\u03d9\u03db\5\\/\2\u03da\u03d9\3\2\2\2\u03da\u03db\3")
        buf.write("\2\2\2\u03db\u03dc\3\2\2\2\u03dc\u03dd\7:\2\2\u03dd\u03df")
        buf.write("\3\2\2\2\u03de\u03c5\3\2\2\2\u03de\u03d2\3\2\2\2\u03df")
        buf.write("U\3\2\2\2\u03e0\u03e1\7T\2\2\u03e1\u03e2\7\u00dd\2\2\u03e2")
        buf.write("\u03e3\5X-\2\u03e3\u03e4\7\u00dd\2\2\u03e4\u03e5\7\u00aa")
        buf.write("\2\2\u03e5\u03e7\5\u0126\u0094\2\u03e6\u03e8\5\34\17\2")
        buf.write("\u03e7\u03e6\3\2\2\2\u03e7\u03e8\3\2\2\2\u03e8W\3\2\2")
        buf.write("\2\u03e9\u03ea\5\u00caf\2\u03eaY\3\2\2\2\u03eb\u03ec\7")
        buf.write("\67\2\2\u03ec\u03ed\7\u00dd\2\2\u03ed\u03ee\5X-\2\u03ee")
        buf.write("\u03ef\7\u00dd\2\2\u03ef\u03f0\7\u00aa\2\2\u03f0\u03f2")
        buf.write("\5\u0126\u0094\2\u03f1\u03f3\5\34\17\2\u03f2\u03f1\3\2")
        buf.write("\2\2\u03f2\u03f3\3\2\2\2\u03f3[\3\2\2\2\u03f4\u03f5\7")
        buf.write("\66\2\2\u03f5\u03f7\5\u0126\u0094\2\u03f6\u03f8\5\34\17")
        buf.write("\2\u03f7\u03f6\3\2\2\2\u03f7\u03f8\3\2\2\2\u03f8]\3\2")
        buf.write("\2\2\u03f9\u03fa\7V\2\2\u03fa\u03fb\7\u00dd\2\2\u03fb")
        buf.write("\u03fc\5\u0104\u0083\2\u03fc_\3\2\2\2\u03fd\u03fe\7X\2")
        buf.write("\2\u03fe\u03ff\7\u00dd\2\2\u03ff\u0408\5\u00dan\2\u0400")
        buf.write("\u0402\7\u00dd\2\2\u0401\u0400\3\2\2\2\u0401\u0402\3\2")
        buf.write("\2\2\u0402\u0403\3\2\2\2\u0403\u0405\7\3\2\2\u0404\u0406")
        buf.write("\7\u00dd\2\2\u0405\u0404\3\2\2\2\u0405\u0406\3\2\2\2\u0406")
        buf.write("\u0407\3\2\2\2\u0407\u0409\5\u00caf\2\u0408\u0401\3\2")
        buf.write("\2\2\u0409\u040a\3\2\2\2\u040a\u0408\3\2\2\2\u040a\u040b")
        buf.write("\3\2\2\2\u040ba\3\2\2\2\u040c\u040d\7[\2\2\u040d\u040e")
        buf.write("\7\u00dd\2\2\u040e\u040f\5\u00caf\2\u040fc\3\2\2\2\u0410")
        buf.write("\u0411\7a\2\2\u0411\u0413\7\u00dd\2\2\u0412\u0410\3\2")
        buf.write("\2\2\u0412\u0413\3\2\2\2\u0413\u0414\3\2\2\2\u0414\u0416")
        buf.write("\5\u00e8u\2\u0415\u0417\7\u00dd\2\2\u0416\u0415\3\2\2")
        buf.write("\2\u0416\u0417\3\2\2\2\u0417\u0418\3\2\2\2\u0418\u041a")
        buf.write("\t\6\2\2\u0419\u041b\7\u00dd\2\2\u041a\u0419\3\2\2\2\u041a")
        buf.write("\u041b\3\2\2\2\u041b\u041c\3\2\2\2\u041c\u041d\5\u00ca")
        buf.write("f\2\u041de\3\2\2\2\u041e\u041f\7d\2\2\u041f\u0420\7\u00dd")
        buf.write("\2\2\u0420\u0422\5\u00dan\2\u0421\u0423\7\u00dd\2\2\u0422")
        buf.write("\u0421\3\2\2\2\u0422\u0423\3\2\2\2\u0423\u0424\3\2\2\2")
        buf.write("\u0424\u0426\7\3\2\2\u0425\u0427\7\u00dd\2\2\u0426\u0425")
        buf.write("\3\2\2\2\u0426\u0427\3\2\2\2\u0427\u0428\3\2\2\2\u0428")
        buf.write("\u0429\5\u00caf\2\u0429g\3\2\2\2\u042a\u042b\7\\\2\2\u042b")
        buf.write("\u042c\7\u00dd\2\2\u042c\u042d\5\u00caf\2\u042di\3\2\2")
        buf.write("\2\u042e\u042f\7]\2\2\u042f\u0430\7\u00dd\2\2\u0430\u043f")
        buf.write("\5\u00caf\2\u0431\u0433\7\u00dd\2\2\u0432\u0431\3\2\2")
        buf.write("\2\u0432\u0433\3\2\2\2\u0433\u0434\3\2\2\2\u0434\u0436")
        buf.write("\7\3\2\2\u0435\u0437\7\u00dd\2\2\u0436\u0435\3\2\2\2\u0436")
        buf.write("\u0437\3\2\2\2\u0437\u0438\3\2\2\2\u0438\u043d\5\u00ca")
        buf.write("f\2\u0439\u043a\7\u00dd\2\2\u043a\u043b\7\u00ac\2\2\u043b")
        buf.write("\u043c\7\u00dd\2\2\u043c\u043e\5\u00caf\2\u043d\u0439")
        buf.write("\3\2\2\2\u043d\u043e\3\2\2\2\u043e\u0440\3\2\2\2\u043f")
        buf.write("\u0432\3\2\2\2\u043f\u0440\3\2\2\2\u0440k\3\2\2\2\u0441")
        buf.write("\u0442\7h\2\2\u0442\u0443\7\u00dd\2\2\u0443\u0445\5\u00e8")
        buf.write("u\2\u0444\u0446\7\u00dd\2\2\u0445\u0444\3\2\2\2\u0445")
        buf.write("\u0446\3\2\2\2\u0446\u0447\3\2\2\2\u0447\u0449\7\u00bf")
        buf.write("\2\2\u0448\u044a\7\u00dd\2\2\u0449\u0448\3\2\2\2\u0449")
        buf.write("\u044a\3\2\2\2\u044a\u044b\3\2\2\2\u044b\u044c\5\u00ca")
        buf.write("f\2\u044cm\3\2\2\2\u044d\u044f\7i\2\2\u044e\u0450\7\u00dd")
        buf.write("\2\2\u044f\u044e\3\2\2\2\u044f\u0450\3\2\2\2\u0450\u0451")
        buf.write("\3\2\2\2\u0451\u0453\5\u0104\u0083\2\u0452\u0454\7\u00dd")
        buf.write("\2\2\u0453\u0452\3\2\2\2\u0453\u0454\3\2\2\2\u0454\u0455")
        buf.write("\3\2\2\2\u0455\u0457\7\u00bf\2\2\u0456\u0458\7\u00dd\2")
        buf.write("\2\u0457\u0456\3\2\2\2\u0457\u0458\3\2\2\2\u0458\u0459")
        buf.write("\3\2\2\2\u0459\u045a\5\u00caf\2\u045ao\3\2\2\2\u045b\u045f")
        buf.write("\5r:\2\u045c\u045e\5t;\2\u045d\u045c\3\2\2\2\u045e\u0461")
        buf.write("\3\2\2\2\u045f\u045d\3\2\2\2\u045f\u0460\3\2\2\2\u0460")
        buf.write("\u0463\3\2\2\2\u0461\u045f\3\2\2\2\u0462\u0464\5v<\2\u0463")
        buf.write("\u0462\3\2\2\2\u0463\u0464\3\2\2\2\u0464\u0465\3\2\2\2")
        buf.write("\u0465\u0466\7m\2\2\u0466q\3\2\2\2\u0467\u0469\7j\2\2")
        buf.write("\u0468\u046a\7\u00dd\2\2\u0469\u0468\3\2\2\2\u0469\u046a")
        buf.write("\3\2\2\2\u046a\u046b\3\2\2\2\u046b\u046c\5X-\2\u046c\u046d")
        buf.write("\7\u00dd\2\2\u046d\u046e\7\u00aa\2\2\u046e\u0474\5\u0126")
        buf.write("\u0094\2\u046f\u0473\5\16\b\2\u0470\u0473\5\26\f\2\u0471")
        buf.write("\u0473\5\34\17\2\u0472\u046f\3\2\2\2\u0472\u0470\3\2\2")
        buf.write("\2\u0472\u0471\3\2\2\2\u0473\u0476\3\2\2\2\u0474\u0472")
        buf.write("\3\2\2\2\u0474\u0475\3\2\2\2\u0475s\3\2\2\2\u0476\u0474")
        buf.write("\3\2\2\2\u0477\u0479\7k\2\2\u0478\u047a\7\u00dd\2\2\u0479")
        buf.write("\u0478\3\2\2\2\u0479\u047a\3\2\2\2\u047a\u047b\3\2\2\2")
        buf.write("\u047b\u047c\5X-\2\u047c\u047d\7\u00dd\2\2\u047d\u047e")
        buf.write("\7\u00aa\2\2\u047e\u0484\5\u0126\u0094\2\u047f\u0483\5")
        buf.write("\16\b\2\u0480\u0483\5\26\f\2\u0481\u0483\5\34\17\2\u0482")
        buf.write("\u047f\3\2\2\2\u0482\u0480\3\2\2\2\u0482\u0481\3\2\2\2")
        buf.write("\u0483\u0486\3\2\2\2\u0484\u0482\3\2\2\2\u0484\u0485\3")
        buf.write("\2\2\2\u0485u\3\2\2\2\u0486\u0484\3\2\2\2\u0487\u0488")
        buf.write("\7l\2\2\u0488\u048e\5\u0126\u0094\2\u0489\u048d\5\16\b")
        buf.write("\2\u048a\u048d\5\26\f\2\u048b\u048d\5\34\17\2\u048c\u0489")
        buf.write("\3\2\2\2\u048c\u048a\3\2\2\2\u048c\u048b\3\2\2\2\u048d")
        buf.write("\u0490\3\2\2\2\u048e\u048c\3\2\2\2\u048e\u048f\3\2\2\2")
        buf.write("\u048fw\3\2\2\2\u0490\u048e\3\2\2\2\u0491\u0493\7o\2\2")
        buf.write("\u0492\u0494\7\u00dd\2\2\u0493\u0492\3\2\2\2\u0493\u0494")
        buf.write("\3\2\2\2\u0494\u0495\3\2\2\2\u0495\u0497\7\u00c3\2\2\u0496")
        buf.write("\u0498\7\u00dd\2\2\u0497\u0496\3\2\2\2\u0497\u0498\3\2")
        buf.write("\2\2\u0498\u0499\3\2\2\2\u0499\u049b\5\u00f4{\2\u049a")
        buf.write("\u049c\7\u00dd\2\2\u049b\u049a\3\2\2\2\u049b\u049c\3\2")
        buf.write("\2\2\u049c\u049d\3\2\2\2\u049d\u049e\7\u00cc\2\2\u049e")
        buf.write("y\3\2\2\2\u049f\u04a0\7p\2\2\u04a0\u04a1\7\u00dd\2\2\u04a1")
        buf.write("\u04a2\5\u00caf\2\u04a2{\3\2\2\2\u04a3\u04a4\7r\2\2\u04a4")
        buf.write("\u04a5\7\u00dd\2\2\u04a5\u04a6\5\u00caf\2\u04a6\u04a7")
        buf.write("\7\u00dd\2\2\u04a7\u04a8\7\22\2\2\u04a8\u04a9\7\u00dd")
        buf.write("\2\2\u04a9\u04aa\5\u00caf\2\u04aa}\3\2\2\2\u04ab\u04ac")
        buf.write("\t\7\2\2\u04ac\u04b3\7\u00dd\2\2\u04ad\u04ae\7S\2\2\u04ae")
        buf.write("\u04af\7\u00dd\2\2\u04af\u04b4\5\u00caf\2\u04b0\u04b1")
        buf.write("\7\u0095\2\2\u04b1\u04b2\7\u00dd\2\2\u04b2\u04b4\7s\2")
        buf.write("\2\u04b3\u04ad\3\2\2\2\u04b3\u04b0\3\2\2\2\u04b4\177\3")
        buf.write("\2\2\2\u04b5\u04b6\7x\2\2\u04b6\u04b7\7\u00dd\2\2\u04b7")
        buf.write("\u04b8\5\u00caf\2\u04b8\u04b9\7\u00dd\2\2\u04b9\u04ba")
        buf.write("\7S\2\2\u04ba\u04bb\7\u00dd\2\2\u04bb\u04c6\5\u00caf\2")
        buf.write("\u04bc\u04be\7\u00dd\2\2\u04bd\u04bc\3\2\2\2\u04bd\u04be")
        buf.write("\3\2\2\2\u04be\u04bf\3\2\2\2\u04bf\u04c1\7\3\2\2\u04c0")
        buf.write("\u04c2\7\u00dd\2\2\u04c1\u04c0\3\2\2\2\u04c1\u04c2\3\2")
        buf.write("\2\2\u04c2\u04c3\3\2\2\2\u04c3\u04c5\5\u00caf\2\u04c4")
        buf.write("\u04bd\3\2\2\2\u04c5\u04c8\3\2\2\2\u04c6\u04c4\3\2\2\2")
        buf.write("\u04c6\u04c7\3\2\2\2\u04c7\u0081\3\2\2\2\u04c8\u04c6\3")
        buf.write("\2\2\2\u04c9\u04ca\7x\2\2\u04ca\u04cb\7\u00dd\2\2\u04cb")
        buf.write("\u04cc\5\u00caf\2\u04cc\u04cd\7\u00dd\2\2\u04cd\u04ce")
        buf.write("\7R\2\2\u04ce\u04cf\7\u00dd\2\2\u04cf\u04da\5\u00caf\2")
        buf.write("\u04d0\u04d2\7\u00dd\2\2\u04d1\u04d0\3\2\2\2\u04d1\u04d2")
        buf.write("\3\2\2\2\u04d2\u04d3\3\2\2\2\u04d3\u04d5\7\3\2\2\u04d4")
        buf.write("\u04d6\7\u00dd\2\2\u04d5\u04d4\3\2\2\2\u04d5\u04d6\3\2")
        buf.write("\2\2\u04d6\u04d7\3\2\2\2\u04d7\u04d9\5\u00caf\2\u04d8")
        buf.write("\u04d1\3\2\2\2\u04d9\u04dc\3\2\2\2\u04da\u04d8\3\2\2\2")
        buf.write("\u04da\u04db\3\2\2\2\u04db\u0083\3\2\2\2\u04dc\u04da\3")
        buf.write("\2\2\2\u04dd\u04de\7{\2\2\u04de\u04df\7\u00dd\2\2\u04df")
        buf.write("\u04e0\5\u00caf\2\u04e0\u04e1\7\u00dd\2\2\u04e1\u04e2")
        buf.write("\7N\2\2\u04e2\u04e3\7\u00dd\2\2\u04e3\u04e8\t\b\2\2\u04e4")
        buf.write("\u04e5\7\u00dd\2\2\u04e5\u04e6\7\13\2\2\u04e6\u04e7\7")
        buf.write("\u00dd\2\2\u04e7\u04e9\t\t\2\2\u04e8\u04e4\3\2\2\2\u04e8")
        buf.write("\u04e9\3\2\2\2\u04e9\u04ec\3\2\2\2\u04ea\u04eb\7\u00dd")
        buf.write("\2\2\u04eb\u04ed\t\n\2\2\u04ec\u04ea\3\2\2\2\u04ec\u04ed")
        buf.write("\3\2\2\2\u04ed\u04ee\3\2\2\2\u04ee\u04ef\7\u00dd\2\2\u04ef")
        buf.write("\u04f0\7\22\2\2\u04f0\u04f1\7\u00dd\2\2\u04f1\u04fc\5")
        buf.write("\u00dan\2\u04f2\u04f3\7\u00dd\2\2\u04f3\u04f5\7`\2\2\u04f4")
        buf.write("\u04f6\7\u00dd\2\2\u04f5\u04f4\3\2\2\2\u04f5\u04f6\3\2")
        buf.write("\2\2\u04f6\u04f7\3\2\2\2\u04f7\u04f9\7\u00bf\2\2\u04f8")
        buf.write("\u04fa\7\u00dd\2\2\u04f9\u04f8\3\2\2\2\u04f9\u04fa\3\2")
        buf.write("\2\2\u04fa\u04fb\3\2\2\2\u04fb\u04fd\5\u00caf\2\u04fc")
        buf.write("\u04f2\3\2\2\2\u04fc\u04fd\3\2\2\2\u04fd\u0085\3\2\2\2")
        buf.write("\u04fe\u050b\5\u0088E\2\u04ff\u0501\7\u00dd\2\2\u0500")
        buf.write("\u04ff\3\2\2\2\u0500\u0501\3\2\2\2\u0501\u0502\3\2\2\2")
        buf.write("\u0502\u0504\t\13\2\2\u0503\u0505\7\u00dd\2\2\u0504\u0503")
        buf.write("\3\2\2\2\u0504\u0505\3\2\2\2\u0505\u0507\3\2\2\2\u0506")
        buf.write("\u0508\5\u0088E\2\u0507\u0506\3\2\2\2\u0507\u0508\3\2")
        buf.write("\2\2\u0508\u050a\3\2\2\2\u0509\u0500\3\2\2\2\u050a\u050d")
        buf.write("\3\2\2\2\u050b\u0509\3\2\2\2\u050b\u050c\3\2\2\2\u050c")
        buf.write("\u0520\3\2\2\2\u050d\u050b\3\2\2\2\u050e\u0510\5\u0088")
        buf.write("E\2\u050f\u050e\3\2\2\2\u050f\u0510\3\2\2\2\u0510\u051b")
        buf.write("\3\2\2\2\u0511\u0513\7\u00dd\2\2\u0512\u0511\3\2\2\2\u0512")
        buf.write("\u0513\3\2\2\2\u0513\u0514\3\2\2\2\u0514\u0516\t\13\2")
        buf.write("\2\u0515\u0517\7\u00dd\2\2\u0516\u0515\3\2\2\2\u0516\u0517")
        buf.write("\3\2\2\2\u0517\u0519\3\2\2\2\u0518\u051a\5\u0088E\2\u0519")
        buf.write("\u0518\3\2\2\2\u0519\u051a\3\2\2\2\u051a\u051c\3\2\2\2")
        buf.write("\u051b\u0512\3\2\2\2\u051c\u051d\3\2\2\2\u051d\u051b\3")
        buf.write("\2\2\2\u051d\u051e\3\2\2\2\u051e\u0520\3\2\2\2\u051f\u04fe")
        buf.write("\3\2\2\2\u051f\u050f\3\2\2\2\u0520\u0087\3\2\2\2\u0521")
        buf.write("\u0533\5\u00caf\2\u0522\u0530\t\f\2\2\u0523\u0525\7\u00dd")
        buf.write("\2\2\u0524\u0523\3\2\2\2\u0524\u0525\3\2\2\2\u0525\u0526")
        buf.write("\3\2\2\2\u0526\u0528\7\u00c3\2\2\u0527\u0529\7\u00dd\2")
        buf.write("\2\u0528\u0527\3\2\2\2\u0528\u0529\3\2\2\2\u0529\u052a")
        buf.write("\3\2\2\2\u052a\u052c\5\u00f4{\2\u052b\u052d\7\u00dd\2")
        buf.write("\2\u052c\u052b\3\2\2\2\u052c\u052d\3\2\2\2\u052d\u052e")
        buf.write("\3\2\2\2\u052e\u052f\7\u00cc\2\2\u052f\u0531\3\2\2\2\u0530")
        buf.write("\u0524\3\2\2\2\u0530\u0531\3\2\2\2\u0531\u0533\3\2\2\2")
        buf.write("\u0532\u0521\3\2\2\2\u0532\u0522\3\2\2\2\u0533\u0089\3")
        buf.write("\2\2\2\u0534\u0535\7\u0085\2\2\u0535\u0536\7\u00dd\2\2")
        buf.write("\u0536\u0538\5\u00dan\2\u0537\u0539\7\u00dd\2\2\u0538")
        buf.write("\u0537\3\2\2\2\u0538\u0539\3\2\2\2\u0539\u053a\3\2\2\2")
        buf.write("\u053a\u053f\7\3\2\2\u053b\u053d\7\u00dd\2\2\u053c\u053b")
        buf.write("\3\2\2\2\u053c\u053d\3\2\2\2\u053d\u053e\3\2\2\2\u053e")
        buf.write("\u0540\5\u0086D\2\u053f\u053c\3\2\2\2\u053f\u0540\3\2")
        buf.write("\2\2\u0540\u008b\3\2\2\2\u0541\u0542\5\u011c\u008f\2\u0542")
        buf.write("\u0543\7\u00dd\2\2\u0543\u0545\3\2\2\2\u0544\u0541\3\2")
        buf.write("\2\2\u0544\u0545\3\2\2\2\u0545\u0548\3\2\2\2\u0546\u0547")
        buf.write("\7\u00a3\2\2\u0547\u0549\7\u00dd\2\2\u0548\u0546\3\2\2")
        buf.write("\2\u0548\u0549\3\2\2\2\u0549\u054a\3\2\2\2\u054a\u054b")
        buf.write("\7\u0087\2\2\u054b\u054c\7\u00dd\2\2\u054c\u054e\5\u0104")
        buf.write("\u0083\2\u054d\u054f\5\u011a\u008e\2\u054e\u054d\3\2\2")
        buf.write("\2\u054e\u054f\3\2\2\2\u054f\u0554\3\2\2\2\u0550\u0552")
        buf.write("\7\u00dd\2\2\u0551\u0550\3\2\2\2\u0551\u0552\3\2\2\2\u0552")
        buf.write("\u0553\3\2\2\2\u0553\u0555\5\u00fa~\2\u0554\u0551\3\2")
        buf.write("\2\2\u0554\u0555\3\2\2\2\u0555\u0558\3\2\2\2\u0556\u0557")
        buf.write("\7\u00dd\2\2\u0557\u0559\5\u0106\u0084\2\u0558\u0556\3")
        buf.write("\2\2\2\u0558\u0559\3\2\2\2\u0559\u055a\3\2\2\2\u055a\u055c")
        buf.write("\5\u0126\u0094\2\u055b\u055d\5\34\17\2\u055c\u055b\3\2")
        buf.write("\2\2\u055c\u055d\3\2\2\2\u055d\u055e\3\2\2\2\u055e\u055f")
        buf.write("\7;\2\2\u055f\u008d\3\2\2\2\u0560\u0561\5\u011c\u008f")
        buf.write("\2\u0561\u0562\7\u00dd\2\2\u0562\u0564\3\2\2\2\u0563\u0560")
        buf.write("\3\2\2\2\u0563\u0564\3\2\2\2\u0564\u0567\3\2\2\2\u0565")
        buf.write("\u0566\7\u00a3\2\2\u0566\u0568\7\u00dd\2\2\u0567\u0565")
        buf.write("\3\2\2\2\u0567\u0568\3\2\2\2\u0568\u0569\3\2\2\2\u0569")
        buf.write("\u056a\7\u0089\2\2\u056a\u056b\7\u00dd\2\2\u056b\u0570")
        buf.write("\5\u0104\u0083\2\u056c\u056e\7\u00dd\2\2\u056d\u056c\3")
        buf.write("\2\2\2\u056d\u056e\3\2\2\2\u056e\u056f\3\2\2\2\u056f\u0571")
        buf.write("\5\u00fa~\2\u0570\u056d\3\2\2\2\u0570\u0571\3\2\2\2\u0571")
        buf.write("\u0572\3\2\2\2\u0572\u0574\5\u0126\u0094\2\u0573\u0575")
        buf.write("\5\34\17\2\u0574\u0573\3\2\2\2\u0574\u0575\3\2\2\2\u0575")
        buf.write("\u0576\3\2\2\2\u0576\u0577\7;\2\2\u0577\u008f\3\2\2\2")
        buf.write("\u0578\u0579\5\u011c\u008f\2\u0579\u057a\7\u00dd\2\2\u057a")
        buf.write("\u057c\3\2\2\2\u057b\u0578\3\2\2\2\u057b\u057c\3\2\2\2")
        buf.write("\u057c\u057f\3\2\2\2\u057d\u057e\7\u00a3\2\2\u057e\u0580")
        buf.write("\7\u00dd\2\2\u057f\u057d\3\2\2\2\u057f\u0580\3\2\2\2\u0580")
        buf.write("\u0581\3\2\2\2\u0581\u0582\7\u0088\2\2\u0582\u0583\7\u00dd")
        buf.write("\2\2\u0583\u0588\5\u0104\u0083\2\u0584\u0586\7\u00dd\2")
        buf.write("\2\u0585\u0584\3\2\2\2\u0585\u0586\3\2\2\2\u0586\u0587")
        buf.write("\3\2\2\2\u0587\u0589\5\u00fa~\2\u0588\u0585\3\2\2\2\u0588")
        buf.write("\u0589\3\2\2\2\u0589\u058a\3\2\2\2\u058a\u058c\5\u0126")
        buf.write("\u0094\2\u058b\u058d\5\34\17\2\u058c\u058b\3\2\2\2\u058c")
        buf.write("\u058d\3\2\2\2\u058d\u058e\3\2\2\2\u058e\u058f\7;\2\2")
        buf.write("\u058f\u0091\3\2\2\2\u0590\u0591\7\u008c\2\2\u0591\u0592")
        buf.write("\7\u00dd\2\2\u0592\u0594\5\u00dan\2\u0593\u0595\7\u00dd")
        buf.write("\2\2\u0594\u0593\3\2\2\2\u0594\u0595\3\2\2\2\u0595\u0596")
        buf.write("\3\2\2\2\u0596\u0598\7\3\2\2\u0597\u0599\7\u00dd\2\2\u0598")
        buf.write("\u0597\3\2\2\2\u0598\u0599\3\2\2\2\u0599\u059b\3\2\2\2")
        buf.write("\u059a\u059c\5\u00caf\2\u059b\u059a\3\2\2\2\u059b\u059c")
        buf.write("\3\2\2\2\u059c\u059e\3\2\2\2\u059d\u059f\7\u00dd\2\2\u059e")
        buf.write("\u059d\3\2\2\2\u059e\u059f\3\2\2\2\u059f\u05a0\3\2\2\2")
        buf.write("\u05a0\u05a2\7\3\2\2\u05a1\u05a3\7\u00dd\2\2\u05a2\u05a1")
        buf.write("\3\2\2\2\u05a2\u05a3\3\2\2\2\u05a3\u05a4\3\2\2\2\u05a4")
        buf.write("\u05a5\5\u00caf\2\u05a5\u0093\3\2\2\2\u05a6\u05a7\7\u008f")
        buf.write("\2\2\u05a7\u05a8\7\u00dd\2\2\u05a8\u05b7\5\u0104\u0083")
        buf.write("\2\u05a9\u05ab\7\u00dd\2\2\u05aa\u05a9\3\2\2\2\u05aa\u05ab")
        buf.write("\3\2\2\2\u05ab\u05ac\3\2\2\2\u05ac\u05ae\7\u00c3\2\2\u05ad")
        buf.write("\u05af\7\u00dd\2\2\u05ae\u05ad\3\2\2\2\u05ae\u05af\3\2")
        buf.write("\2\2\u05af\u05b4\3\2\2\2\u05b0\u05b2\5\u00f4{\2\u05b1")
        buf.write("\u05b3\7\u00dd\2\2\u05b2\u05b1\3\2\2\2\u05b2\u05b3\3\2")
        buf.write("\2\2\u05b3\u05b5\3\2\2\2\u05b4\u05b0\3\2\2\2\u05b4\u05b5")
        buf.write("\3\2\2\2\u05b5\u05b6\3\2\2\2\u05b6\u05b8\7\u00cc\2\2\u05b7")
        buf.write("\u05aa\3\2\2\2\u05b7\u05b8\3\2\2\2\u05b8\u0095\3\2\2\2")
        buf.write("\u05b9\u05bc\7\u008e\2\2\u05ba\u05bb\7\u00dd\2\2\u05bb")
        buf.write("\u05bd\5\u00caf\2\u05bc\u05ba\3\2\2\2\u05bc\u05bd\3\2")
        buf.write("\2\2\u05bd\u0097\3\2\2\2\u05be\u05bf\7\u0092\2\2\u05bf")
        buf.write("\u05c2\7\u00dd\2\2\u05c0\u05c1\7\u0084\2\2\u05c1\u05c3")
        buf.write("\7\u00dd\2\2\u05c2\u05c0\3\2\2\2\u05c2\u05c3\3\2\2\2\u05c3")
        buf.write("\u05c4\3\2\2\2\u05c4\u05cf\5\u009aN\2\u05c5\u05c7\7\u00dd")
        buf.write("\2\2\u05c6\u05c5\3\2\2\2\u05c6\u05c7\3\2\2\2\u05c7\u05c8")
        buf.write("\3\2\2\2\u05c8\u05ca\7\3\2\2\u05c9\u05cb\7\u00dd\2\2\u05ca")
        buf.write("\u05c9\3\2\2\2\u05ca\u05cb\3\2\2\2\u05cb\u05cc\3\2\2\2")
        buf.write("\u05cc\u05ce\5\u009aN\2\u05cd\u05c6\3\2\2\2\u05ce\u05d1")
        buf.write("\3\2\2\2\u05cf\u05cd\3\2\2\2\u05cf\u05d0\3\2\2\2\u05d0")
        buf.write("\u0099\3\2\2\2\u05d1\u05cf\3\2\2\2\u05d2\u05d4\5\u00e8")
        buf.write("u\2\u05d3\u05d5\7\u00dd\2\2\u05d4\u05d3\3\2\2\2\u05d4")
        buf.write("\u05d5\3\2\2\2\u05d5\u05d6\3\2\2\2\u05d6\u05d8\7\u00c3")
        buf.write("\2\2\u05d7\u05d9\7\u00dd\2\2\u05d8\u05d7\3\2\2\2\u05d8")
        buf.write("\u05d9\3\2\2\2\u05d9\u05da\3\2\2\2\u05da\u05dc\5\u0100")
        buf.write("\u0081\2\u05db\u05dd\7\u00dd\2\2\u05dc\u05db\3\2\2\2\u05dc")
        buf.write("\u05dd\3\2\2\2\u05dd\u05de\3\2\2\2\u05de\u05e1\7\u00cc")
        buf.write("\2\2\u05df\u05e0\7\u00dd\2\2\u05e0\u05e2\5\u0106\u0084")
        buf.write("\2\u05e1\u05df\3\2\2\2\u05e1\u05e2\3\2\2\2\u05e2\u009b")
        buf.write("\3\2\2\2\u05e3\u05e4\7\u0094\2\2\u05e4\u009d\3\2\2\2\u05e5")
        buf.write("\u05eb\7\u0095\2\2\u05e6\u05e9\7\u00dd\2\2\u05e7\u05ea")
        buf.write("\7s\2\2\u05e8\u05ea\5\u0104\u0083\2\u05e9\u05e7\3\2\2")
        buf.write("\2\u05e9\u05e8\3\2\2\2\u05ea\u05ec\3\2\2\2\u05eb\u05e6")
        buf.write("\3\2\2\2\u05eb\u05ec\3\2\2\2\u05ec\u009f\3\2\2\2\u05ed")
        buf.write("\u05ee\7\u0096\2\2\u05ee\u00a1\3\2\2\2\u05ef\u05f0\7\u0097")
        buf.write("\2\2\u05f0\u05f1\7\u00dd\2\2\u05f1\u05f2\5\u00caf\2\u05f2")
        buf.write("\u00a3\3\2\2\2\u05f3\u05f4\7\u0098\2\2\u05f4\u05f5\7\u00dd")
        buf.write("\2\2\u05f5\u05f7\5\u00e8u\2\u05f6\u05f8\7\u00dd\2\2\u05f7")
        buf.write("\u05f6\3\2\2\2\u05f7\u05f8\3\2\2\2\u05f8\u05f9\3\2\2\2")
        buf.write("\u05f9\u05fb\7\u00bf\2\2\u05fa\u05fc\7\u00dd\2\2\u05fb")
        buf.write("\u05fa\3\2\2\2\u05fb\u05fc\3\2\2\2\u05fc\u05fd\3\2\2\2")
        buf.write("\u05fd\u05fe\5\u00caf\2\u05fe\u00a5\3\2\2\2\u05ff\u0600")
        buf.write("\7\u0099\2\2\u0600\u0601\7\u00dd\2\2\u0601\u0603\5\u00ca")
        buf.write("f\2\u0602\u0604\7\u00dd\2\2\u0603\u0602\3\2\2\2\u0603")
        buf.write("\u0604\3\2\2\2\u0604\u0605\3\2\2\2\u0605\u0607\7\3\2\2")
        buf.write("\u0606\u0608\7\u00dd\2\2\u0607\u0606\3\2\2\2\u0607\u0608")
        buf.write("\3\2\2\2\u0608\u0609\3\2\2\2\u0609\u060a\5\u00caf\2\u060a")
        buf.write("\u00a7\3\2\2\2\u060b\u060c\7\u009a\2\2\u060c\u060d\7\u00dd")
        buf.write("\2\2\u060d\u060f\5\u00caf\2\u060e\u0610\7\u00dd\2\2\u060f")
        buf.write("\u060e\3\2\2\2\u060f\u0610\3\2\2\2\u0610\u0611\3\2\2\2")
        buf.write("\u0611\u0613\7\3\2\2\u0612\u0614\7\u00dd\2\2\u0613\u0612")
        buf.write("\3\2\2\2\u0613\u0614\3\2\2\2\u0614\u0615\3\2\2\2\u0615")
        buf.write("\u0617\5\u00caf\2\u0616\u0618\7\u00dd\2\2\u0617\u0616")
        buf.write("\3\2\2\2\u0617\u0618\3\2\2\2\u0618\u0619\3\2\2\2\u0619")
        buf.write("\u061b\7\3\2\2\u061a\u061c\7\u00dd\2\2\u061b\u061a\3\2")
        buf.write("\2\2\u061b\u061c\3\2\2\2\u061c\u061d\3\2\2\2\u061d\u061f")
        buf.write("\5\u00caf\2\u061e\u0620\7\u00dd\2\2\u061f\u061e\3\2\2")
        buf.write("\2\u061f\u0620\3\2\2\2\u0620\u0621\3\2\2\2\u0621\u0623")
        buf.write("\7\3\2\2\u0622\u0624\7\u00dd\2\2\u0623\u0622\3\2\2\2\u0623")
        buf.write("\u0624\3\2\2\2\u0624\u0625\3\2\2\2\u0625\u0626\5\u00ca")
        buf.write("f\2\u0626\u00a9\3\2\2\2\u0627\u0628\7\u009b\2\2\u0628")
        buf.write("\u0629\7\u00dd\2\2\u0629\u062b\5\u00dan\2\u062a\u062c")
        buf.write("\7\u00dd\2\2\u062b\u062a\3\2\2\2\u062b\u062c\3\2\2\2\u062c")
        buf.write("\u062d\3\2\2\2\u062d\u062f\7\3\2\2\u062e\u0630\7\u00dd")
        buf.write("\2\2\u062f\u062e\3\2\2\2\u062f\u0630\3\2\2\2\u0630\u0631")
        buf.write("\3\2\2\2\u0631\u0632\5\u00caf\2\u0632\u00ab\3\2\2\2\u0633")
        buf.write("\u0634\7\u009c\2\2\u0634\u0635\7\u00dd\2\2\u0635\u0636")
        buf.write("\7\33\2\2\u0636\u0637\7\u00dd\2\2\u0637\u0638\5\u00ca")
        buf.write("f\2\u0638\u063c\5\u0126\u0094\2\u0639\u063b\5\u00b0Y\2")
        buf.write("\u063a\u0639\3\2\2\2\u063b\u063e\3\2\2\2\u063c\u063a\3")
        buf.write("\2\2\2\u063c\u063d\3\2\2\2\u063d\u063f\3\2\2\2\u063e\u063c")
        buf.write("\3\2\2\2\u063f\u0640\7<\2\2\u0640\u00ad\3\2\2\2\u0641")
        buf.write("\u0643\7Y\2\2\u0642\u0644\7\u00dd\2\2\u0643\u0642\3\2")
        buf.write("\2\2\u0643\u0644\3\2\2\2\u0644\u0645\3\2\2\2\u0645\u0647")
        buf.write("\5\u010c\u0087\2\u0646\u0648\7\u00dd\2\2\u0647\u0646\3")
        buf.write("\2\2\2\u0647\u0648\3\2\2\2\u0648\u0649\3\2\2\2\u0649\u064a")
        buf.write("\5\u00caf\2\u064a\u0653\3\2\2\2\u064b\u064c\5\u00caf\2")
        buf.write("\u064c\u064d\7\u00dd\2\2\u064d\u064e\7\u00ac\2\2\u064e")
        buf.write("\u064f\7\u00dd\2\2\u064f\u0650\5\u00caf\2\u0650\u0653")
        buf.write("\3\2\2\2\u0651\u0653\5\u00caf\2\u0652\u0641\3\2\2\2\u0652")
        buf.write("\u064b\3\2\2\2\u0652\u0651\3\2\2\2\u0653\u00af\3\2\2\2")
        buf.write("\u0654\u0655\7\33\2\2\u0655\u0656\7\u00dd\2\2\u0656\u0657")
        buf.write("\5\u00b2Z\2\u0657\u0659\5\u0126\u0094\2\u0658\u065a\5")
        buf.write("\34\17\2\u0659\u0658\3\2\2\2\u0659\u065a\3\2\2\2\u065a")
        buf.write("\u00b1\3\2\2\2\u065b\u066b\7\66\2\2\u065c\u0667\5\u00ae")
        buf.write("X\2\u065d\u065f\7\u00dd\2\2\u065e\u065d\3\2\2\2\u065e")
        buf.write("\u065f\3\2\2\2\u065f\u0660\3\2\2\2\u0660\u0662\7\3\2\2")
        buf.write("\u0661\u0663\7\u00dd\2\2\u0662\u0661\3\2\2\2\u0662\u0663")
        buf.write("\3\2\2\2\u0663\u0664\3\2\2\2\u0664\u0666\5\u00aeX\2\u0665")
        buf.write("\u065e\3\2\2\2\u0666\u0669\3\2\2\2\u0667\u0665\3\2\2\2")
        buf.write("\u0667\u0668\3\2\2\2\u0668\u066b\3\2\2\2\u0669\u0667\3")
        buf.write("\2\2\2\u066a\u065b\3\2\2\2\u066a\u065c\3\2\2\2\u066b\u00b3")
        buf.write("\3\2\2\2\u066c\u066d\7\u009d\2\2\u066d\u066e\7\u00dd\2")
        buf.write("\2\u066e\u0677\5\u00caf\2\u066f\u0671\7\u00dd\2\2\u0670")
        buf.write("\u066f\3\2\2\2\u0670\u0671\3\2\2\2\u0671\u0672\3\2\2\2")
        buf.write("\u0672\u0674\7\3\2\2\u0673\u0675\7\u00dd\2\2\u0674\u0673")
        buf.write("\3\2\2\2\u0674\u0675\3\2\2\2\u0675\u0676\3\2\2\2\u0676")
        buf.write("\u0678\5\u00caf\2\u0677\u0670\3\2\2\2\u0677\u0678\3\2")
        buf.write("\2\2\u0678\u00b5\3\2\2\2\u0679\u067a\7\u009f\2\2\u067a")
        buf.write("\u067b\7\u00dd\2\2\u067b\u067d\5\u00caf\2\u067c\u067e")
        buf.write("\7\u00dd\2\2\u067d\u067c\3\2\2\2\u067d\u067e\3\2\2\2\u067e")
        buf.write("\u067f\3\2\2\2\u067f\u0681\7\3\2\2\u0680\u0682\7\u00dd")
        buf.write("\2\2\u0681\u0680\3\2\2\2\u0681\u0682\3\2\2\2\u0682\u0683")
        buf.write("\3\2\2\2\u0683\u0684\5\u00caf\2\u0684\u00b7\3\2\2\2\u0685")
        buf.write("\u0686\7\u009e\2\2\u0686\u0687\7\u00dd\2\2\u0687\u0689")
        buf.write("\5\u00e8u\2\u0688\u068a\7\u00dd\2\2\u0689\u0688\3\2\2")
        buf.write("\2\u0689\u068a\3\2\2\2\u068a\u068b\3\2\2\2\u068b\u068d")
        buf.write("\7\u00bf\2\2\u068c\u068e\7\u00dd\2\2\u068d\u068c\3\2\2")
        buf.write("\2\u068d\u068e\3\2\2\2\u068e\u068f\3\2\2\2\u068f\u0690")
        buf.write("\5\u00caf\2\u0690\u00b9\3\2\2\2\u0691\u0692\7\u00a5\2")
        buf.write("\2\u0692\u00bb\3\2\2\2\u0693\u0694\5\u011c\u008f\2\u0694")
        buf.write("\u0695\7\u00dd\2\2\u0695\u0697\3\2\2\2\u0696\u0693\3\2")
        buf.write("\2\2\u0696\u0697\3\2\2\2\u0697\u069a\3\2\2\2\u0698\u0699")
        buf.write("\7\u00a3\2\2\u0699\u069b\7\u00dd\2\2\u069a\u0698\3\2\2")
        buf.write("\2\u069a\u069b\3\2\2\2\u069b\u069c\3\2\2\2\u069c\u069e")
        buf.write("\7\u00a7\2\2\u069d\u069f\7\u00dd\2\2\u069e\u069d\3\2\2")
        buf.write("\2\u069e\u069f\3\2\2\2\u069f\u06a0\3\2\2\2\u06a0\u06a5")
        buf.write("\5\u0104\u0083\2\u06a1\u06a3\7\u00dd\2\2\u06a2\u06a1\3")
        buf.write("\2\2\2\u06a2\u06a3\3\2\2\2\u06a3\u06a4\3\2\2\2\u06a4\u06a6")
        buf.write("\5\u00fa~\2\u06a5\u06a2\3\2\2\2\u06a5\u06a6\3\2\2\2\u06a6")
        buf.write("\u06a7\3\2\2\2\u06a7\u06a9\5\u0126\u0094\2\u06a8\u06aa")
        buf.write("\5\34\17\2\u06a9\u06a8\3\2\2\2\u06a9\u06aa\3\2\2\2\u06aa")
        buf.write("\u06ab\3\2\2\2\u06ab\u06ac\7=\2\2\u06ac\u00bd\3\2\2\2")
        buf.write("\u06ad\u06af\7\u00ab\2\2\u06ae\u06b0\7\u00dd\2\2\u06af")
        buf.write("\u06ae\3\2\2\2\u06af\u06b0\3\2\2\2\u06b0\u06b1\3\2\2\2")
        buf.write("\u06b1\u06b3\7\u00bf\2\2\u06b2\u06b4\7\u00dd\2\2\u06b3")
        buf.write("\u06b2\3\2\2\2\u06b3\u06b4\3\2\2\2\u06b4\u06b5\3\2\2\2")
        buf.write("\u06b5\u06b6\5\u00caf\2\u06b6\u00bf\3\2\2\2\u06b7\u06b8")
        buf.write("\5\u011c\u008f\2\u06b8\u06b9\7\u00dd\2\2\u06b9\u06bb\3")
        buf.write("\2\2\2\u06ba\u06b7\3\2\2\2\u06ba\u06bb\3\2\2\2\u06bb\u06bc")
        buf.write("\3\2\2\2\u06bc\u06bd\7\u00ae\2\2\u06bd\u06be\7\u00dd\2")
        buf.write("\2\u06be\u06bf\5\u0104\u0083\2\u06bf\u06c3\5\u0126\u0094")
        buf.write("\2\u06c0\u06c2\5\u00c2b\2\u06c1\u06c0\3\2\2\2\u06c2\u06c5")
        buf.write("\3\2\2\2\u06c3\u06c1\3\2\2\2\u06c3\u06c4\3\2\2\2\u06c4")
        buf.write("\u06c6\3\2\2\2\u06c5\u06c3\3\2\2\2\u06c6\u06c7\7>\2\2")
        buf.write("\u06c7\u00c1\3\2\2\2\u06c8\u06d7\5\u0104\u0083\2\u06c9")
        buf.write("\u06cb\7\u00dd\2\2\u06ca\u06c9\3\2\2\2\u06ca\u06cb\3\2")
        buf.write("\2\2\u06cb\u06cc\3\2\2\2\u06cc\u06d1\7\u00c3\2\2\u06cd")
        buf.write("\u06cf\7\u00dd\2\2\u06ce\u06cd\3\2\2\2\u06ce\u06cf\3\2")
        buf.write("\2\2\u06cf\u06d0\3\2\2\2\u06d0\u06d2\5\u0100\u0081\2\u06d1")
        buf.write("\u06ce\3\2\2\2\u06d1\u06d2\3\2\2\2\u06d2\u06d4\3\2\2\2")
        buf.write("\u06d3\u06d5\7\u00dd\2\2\u06d4\u06d3\3\2\2\2\u06d4\u06d5")
        buf.write("\3\2\2\2\u06d5\u06d6\3\2\2\2\u06d6\u06d8\7\u00cc\2\2\u06d7")
        buf.write("\u06ca\3\2\2\2\u06d7\u06d8\3\2\2\2\u06d8\u06db\3\2\2\2")
        buf.write("\u06d9\u06da\7\u00dd\2\2\u06da\u06dc\5\u0106\u0084\2\u06db")
        buf.write("\u06d9\3\2\2\2\u06db\u06dc\3\2\2\2\u06dc\u06dd\3\2\2\2")
        buf.write("\u06dd\u06de\5\u0126\u0094\2\u06de\u00c3\3\2\2\2\u06df")
        buf.write("\u06e0\7\u00af\2\2\u06e0\u06e1\7\u00dd\2\2\u06e1\u06e6")
        buf.write("\5\u00caf\2\u06e2\u06e3\7\u00dd\2\2\u06e3\u06e4\7Y\2\2")
        buf.write("\u06e4\u06e5\7\u00dd\2\2\u06e5\u06e7\5\u0118\u008d\2\u06e6")
        buf.write("\u06e2\3\2\2\2\u06e6\u06e7\3\2\2\2\u06e7\u00c5\3\2\2\2")
        buf.write("\u06e8\u06e9\7\u00b0\2\2\u06e9\u06ea\7\u00dd\2\2\u06ea")
        buf.write("\u06eb\5\u00caf\2\u06eb\u00c7\3\2\2\2\u06ec\u06ed\7\u00b1")
        buf.write("\2\2\u06ed\u06ee\7\u00dd\2\2\u06ee\u06fd\5\u00dan\2\u06ef")
        buf.write("\u06f1\7\u00dd\2\2\u06f0\u06ef\3\2\2\2\u06f0\u06f1\3\2")
        buf.write("\2\2\u06f1\u06f2\3\2\2\2\u06f2\u06f4\7\3\2\2\u06f3\u06f5")
        buf.write("\7\u00dd\2\2\u06f4\u06f3\3\2\2\2\u06f4\u06f5\3\2\2\2\u06f5")
        buf.write("\u06f6\3\2\2\2\u06f6\u06fb\5\u00caf\2\u06f7\u06f8\7\u00dd")
        buf.write("\2\2\u06f8\u06f9\7\u00ac\2\2\u06f9\u06fa\7\u00dd\2\2\u06fa")
        buf.write("\u06fc\5\u00caf\2\u06fb\u06f7\3\2\2\2\u06fb\u06fc\3\2")
        buf.write("\2\2\u06fc\u06fe\3\2\2\2\u06fd\u06f0\3\2\2\2\u06fd\u06fe")
        buf.write("\3\2\2\2\u06fe\u00c9\3\2\2\2\u06ff\u0700\bf\1\2\u0700")
        buf.write("\u073c\5\u0116\u008c\2\u0701\u073c\5\u00e8u\2\u0702\u0704")
        buf.write("\7\u00c3\2\2\u0703\u0705\7\u00dd\2\2\u0704\u0703\3\2\2")
        buf.write("\2\u0704\u0705\3\2\2\2\u0705\u0706\3\2\2\2\u0706\u0711")
        buf.write("\5\u00caf\2\u0707\u0709\7\u00dd\2\2\u0708\u0707\3\2\2")
        buf.write("\2\u0708\u0709\3\2\2\2\u0709\u070a\3\2\2\2\u070a\u070c")
        buf.write("\7\3\2\2\u070b\u070d\7\u00dd\2\2\u070c\u070b\3\2\2\2\u070c")
        buf.write("\u070d\3\2\2\2\u070d\u070e\3\2\2\2\u070e\u0710\5\u00ca")
        buf.write("f\2\u070f\u0708\3\2\2\2\u0710\u0713\3\2\2\2\u0711\u070f")
        buf.write("\3\2\2\2\u0711\u0712\3\2\2\2\u0712\u0714\3\2\2\2\u0713")
        buf.write("\u0711\3\2\2\2\u0714\u0715\7\u00cc\2\2\u0715\u073c\3\2")
        buf.write("\2\2\u0716\u0718\7t\2\2\u0717\u0719\7\u00dd\2\2\u0718")
        buf.write("\u0717\3\2\2\2\u0718\u0719\3\2\2\2\u0719\u071a\3\2\2\2")
        buf.write("\u071a\u073c\5\u00caf\36\u071b\u073c\5\u00c4c\2\u071c")
        buf.write("\u073c\5x=\2\u071d\u071f\7\f\2\2\u071e\u0720\7\u00dd\2")
        buf.write("\2\u071f\u071e\3\2\2\2\u071f\u0720\3\2\2\2\u0720\u0721")
        buf.write("\3\2\2\2\u0721\u073c\5\u00caf\33\u0722\u0724\5\u00e8u")
        buf.write("\2\u0723\u0725\7\u00dd\2\2\u0724\u0723\3\2\2\2\u0724\u0725")
        buf.write("\3\2\2\2\u0725\u0726\3\2\2\2\u0726\u0728\7\u00bd\2\2\u0727")
        buf.write("\u0729\7\u00dd\2\2\u0728\u0727\3\2\2\2\u0728\u0729\3\2")
        buf.write("\2\2\u0729\u072a\3\2\2\2\u072a\u072b\5\u00caf\32\u072b")
        buf.write("\u073c\3\2\2\2\u072c\u072e\7\u00c5\2\2\u072d\u072f\7\u00dd")
        buf.write("\2\2\u072e\u072d\3\2\2\2\u072e\u072f\3\2\2\2\u072f\u0730")
        buf.write("\3\2\2\2\u0730\u073c\5\u00caf\20\u0731\u0733\7\u00c9\2")
        buf.write("\2\u0732\u0734\7\u00dd\2\2\u0733\u0732\3\2\2\2\u0733\u0734")
        buf.write("\3\2\2\2\u0734\u0735\3\2\2\2\u0735\u073c\5\u00caf\17\u0736")
        buf.write("\u0738\7u\2\2\u0737\u0739\7\u00dd\2\2\u0738\u0737\3\2")
        buf.write("\2\2\u0738\u0739\3\2\2\2\u0739\u073a\3\2\2\2\u073a\u073c")
        buf.write("\5\u00caf\3\u073b\u06ff\3\2\2\2\u073b\u0701\3\2\2\2\u073b")
        buf.write("\u0702\3\2\2\2\u073b\u0716\3\2\2\2\u073b\u071b\3\2\2\2")
        buf.write("\u073b\u071c\3\2\2\2\u073b\u071d\3\2\2\2\u073b\u0722\3")
        buf.write("\2\2\2\u073b\u072c\3\2\2\2\u073b\u0731\3\2\2\2\u073b\u0736")
        buf.write("\3\2\2\2\u073c\u07f3\3\2\2\2\u073d\u073f\f\31\2\2\u073e")
        buf.write("\u0740\7\u00dd\2\2\u073f\u073e\3\2\2\2\u073f\u0740\3\2")
        buf.write("\2\2\u0740\u0741\3\2\2\2\u0741\u0743\7Y\2\2\u0742\u0744")
        buf.write("\7\u00dd\2\2\u0743\u0742\3\2\2\2\u0743\u0744\3\2\2\2\u0744")
        buf.write("\u0745\3\2\2\2\u0745\u07f2\5\u00caf\32\u0746\u0748\f\30")
        buf.write("\2\2\u0747\u0749\7\u00dd\2\2\u0748\u0747\3\2\2\2\u0748")
        buf.write("\u0749\3\2\2\2\u0749\u074a\3\2\2\2\u074a\u074c\7c\2\2")
        buf.write("\u074b\u074d\7\u00dd\2\2\u074c\u074b\3\2\2\2\u074c\u074d")
        buf.write("\3\2\2\2\u074d\u074e\3\2\2\2\u074e\u07f2\5\u00caf\31\u074f")
        buf.write("\u0751\f\27\2\2\u0750\u0752\7\u00dd\2\2\u0751\u0750\3")
        buf.write("\2\2\2\u0751\u0752\3\2\2\2\u0752\u0753\3\2\2\2\u0753\u0755")
        buf.write("\7\u00c0\2\2\u0754\u0756\7\u00dd\2\2\u0755\u0754\3\2\2")
        buf.write("\2\u0755\u0756\3\2\2\2\u0756\u0757\3\2\2\2\u0757\u07f2")
        buf.write("\5\u00caf\30\u0758\u075a\f\26\2\2\u0759\u075b\7\u00dd")
        buf.write("\2\2\u075a\u0759\3\2\2\2\u075a\u075b\3\2\2\2\u075b\u075c")
        buf.write("\3\2\2\2\u075c\u075e\7\u00c2\2\2\u075d\u075f\7\u00dd\2")
        buf.write("\2\u075e\u075d\3\2\2\2\u075e\u075f\3\2\2\2\u075f\u0760")
        buf.write("\3\2\2\2\u0760\u07f2\5\u00caf\27\u0761\u0763\f\25\2\2")
        buf.write("\u0762\u0764\7\u00dd\2\2\u0763\u0762\3\2\2\2\u0763\u0764")
        buf.write("\3\2\2\2\u0764\u0765\3\2\2\2\u0765\u0767\7\u00c1\2\2\u0766")
        buf.write("\u0768\7\u00dd\2\2\u0767\u0766\3\2\2\2\u0767\u0768\3\2")
        buf.write("\2\2\u0768\u0769\3\2\2\2\u0769\u07f2\5\u00caf\26\u076a")
        buf.write("\u076c\f\24\2\2\u076b\u076d\7\u00dd\2\2\u076c\u076b\3")
        buf.write("\2\2\2\u076c\u076d\3\2\2\2\u076d\u076e\3\2\2\2\u076e\u0770")
        buf.write("\7\u00c4\2\2\u076f\u0771\7\u00dd\2\2\u0770\u076f\3\2\2")
        buf.write("\2\u0770\u0771\3\2\2\2\u0771\u0772\3\2\2\2\u0772\u07f2")
        buf.write("\5\u00caf\25\u0773\u0775\f\23\2\2\u0774\u0776\7\u00dd")
        buf.write("\2\2\u0775\u0774\3\2\2\2\u0775\u0776\3\2\2\2\u0776\u0777")
        buf.write("\3\2\2\2\u0777\u0779\7\u00c8\2\2\u0778\u077a\7\u00dd\2")
        buf.write("\2\u0779\u0778\3\2\2\2\u0779\u077a\3\2\2\2\u077a\u077b")
        buf.write("\3\2\2\2\u077b\u07f2\5\u00caf\24\u077c\u077e\f\22\2\2")
        buf.write("\u077d\u077f\7\u00dd\2\2\u077e\u077d\3\2\2\2\u077e\u077f")
        buf.write("\3\2\2\2\u077f\u0780\3\2\2\2\u0780\u0782\7\u00bf\2\2\u0781")
        buf.write("\u0783\7\u00dd\2\2\u0782\u0781\3\2\2\2\u0782\u0783\3\2")
        buf.write("\2\2\u0783\u0784\3\2\2\2\u0784\u07f2\5\u00caf\23\u0785")
        buf.write("\u0787\f\21\2\2\u0786\u0788\7\u00dd\2\2\u0787\u0786\3")
        buf.write("\2\2\2\u0787\u0788\3\2\2\2\u0788\u0789\3\2\2\2\u0789\u078b")
        buf.write("\7\u00cb\2\2\u078a\u078c\7\u00dd\2\2\u078b\u078a\3\2\2")
        buf.write("\2\u078b\u078c\3\2\2\2\u078c\u078d\3\2\2\2\u078d\u07f2")
        buf.write("\5\u00caf\22\u078e\u0790\f\16\2\2\u078f\u0791\7\u00dd")
        buf.write("\2\2\u0790\u078f\3\2\2\2\u0790\u0791\3\2\2\2\u0791\u0792")
        buf.write("\3\2\2\2\u0792\u0794\7\u00be\2\2\u0793\u0795\7\u00dd\2")
        buf.write("\2\u0794\u0793\3\2\2\2\u0794\u0795\3\2\2\2\u0795\u0796")
        buf.write("\3\2\2\2\u0796\u07f2\5\u00caf\17\u0797\u0799\f\r\2\2\u0798")
        buf.write("\u079a\7\u00dd\2\2\u0799\u0798\3\2\2\2\u0799\u079a\3\2")
        buf.write("\2\2\u079a\u079b\3\2\2\2\u079b\u079d\7\u00c7\2\2\u079c")
        buf.write("\u079e\7\u00dd\2\2\u079d\u079c\3\2\2\2\u079d\u079e\3\2")
        buf.write("\2\2\u079e\u079f\3\2\2\2\u079f\u07f2\5\u00caf\16\u07a0")
        buf.write("\u07a2\f\f\2\2\u07a1\u07a3\7\u00dd\2\2\u07a2\u07a1\3\2")
        buf.write("\2\2\u07a2\u07a3\3\2\2\2\u07a3\u07a4\3\2\2\2\u07a4\u07a6")
        buf.write("\7q\2\2\u07a5\u07a7\7\u00dd\2\2\u07a6\u07a5\3\2\2\2\u07a6")
        buf.write("\u07a7\3\2\2\2\u07a7\u07a8\3\2\2\2\u07a8\u07f2\5\u00ca")
        buf.write("f\r\u07a9\u07ab\f\13\2\2\u07aa\u07ac\7\u00dd\2\2\u07ab")
        buf.write("\u07aa\3\2\2\2\u07ab\u07ac\3\2\2\2\u07ac\u07ad\3\2\2\2")
        buf.write("\u07ad\u07af\7\u00c9\2\2\u07ae\u07b0\7\u00dd\2\2\u07af")
        buf.write("\u07ae\3\2\2\2\u07af\u07b0\3\2\2\2\u07b0\u07b1\3\2\2\2")
        buf.write("\u07b1\u07f2\5\u00caf\f\u07b2\u07b4\f\n\2\2\u07b3\u07b5")
        buf.write("\7\u00dd\2\2\u07b4\u07b3\3\2\2\2\u07b4\u07b5\3\2\2\2\u07b5")
        buf.write("\u07b6\3\2\2\2\u07b6\u07b8\7\u00c5\2\2\u07b7\u07b9\7\u00dd")
        buf.write("\2\2\u07b8\u07b7\3\2\2\2\u07b8\u07b9\3\2\2\2\u07b9\u07ba")
        buf.write("\3\2\2\2\u07ba\u07f2\5\u00caf\13\u07bb\u07bd\f\t\2\2\u07bc")
        buf.write("\u07be\7\u00dd\2\2\u07bd\u07bc\3\2\2\2\u07bd\u07be\3\2")
        buf.write("\2\2\u07be\u07bf\3\2\2\2\u07bf\u07c1\7\u00bc\2\2\u07c0")
        buf.write("\u07c2\7\u00dd\2\2\u07c1\u07c0\3\2\2\2\u07c1\u07c2\3\2")
        buf.write("\2\2\u07c2\u07c3\3\2\2\2\u07c3\u07f2\5\u00caf\n\u07c4")
        buf.write("\u07c6\f\b\2\2\u07c5\u07c7\7\u00dd\2\2\u07c6\u07c5\3\2")
        buf.write("\2\2\u07c6\u07c7\3\2\2\2\u07c7\u07c8\3\2\2\2\u07c8\u07ca")
        buf.write("\7U\2\2\u07c9\u07cb\7\u00dd\2\2\u07ca\u07c9\3\2\2\2\u07ca")
        buf.write("\u07cb\3\2\2\2\u07cb\u07cc\3\2\2\2\u07cc\u07f2\5\u00ca")
        buf.write("f\t\u07cd\u07cf\f\7\2\2\u07ce\u07d0\7\u00dd\2\2\u07cf")
        buf.write("\u07ce\3\2\2\2\u07cf\u07d0\3\2\2\2\u07d0\u07d1\3\2\2\2")
        buf.write("\u07d1\u07d3\7B\2\2\u07d2\u07d4\7\u00dd\2\2\u07d3\u07d2")
        buf.write("\3\2\2\2\u07d3\u07d4\3\2\2\2\u07d4\u07d5\3\2\2\2\u07d5")
        buf.write("\u07f2\5\u00caf\b\u07d6\u07d8\f\6\2\2\u07d7\u07d9\7\u00dd")
        buf.write("\2\2\u07d8\u07d7\3\2\2\2\u07d8\u07d9\3\2\2\2\u07d9\u07da")
        buf.write("\3\2\2\2\u07da\u07dc\7\u00bb\2\2\u07db\u07dd\7\u00dd\2")
        buf.write("\2\u07dc\u07db\3\2\2\2\u07dc\u07dd\3\2\2\2\u07dd\u07de")
        buf.write("\3\2\2\2\u07de\u07f2\5\u00caf\7\u07df\u07e1\f\5\2\2\u07e0")
        buf.write("\u07e2\7\u00dd\2\2\u07e1\u07e0\3\2\2\2\u07e1\u07e2\3\2")
        buf.write("\2\2\u07e2\u07e3\3\2\2\2\u07e3\u07e5\7\u0081\2\2\u07e4")
        buf.write("\u07e6\7\u00dd\2\2\u07e5\u07e4\3\2\2\2\u07e5\u07e6\3\2")
        buf.write("\2\2\u07e6\u07e7\3\2\2\2\u07e7\u07f2\5\u00caf\6\u07e8")
        buf.write("\u07ea\f\4\2\2\u07e9\u07eb\7\u00dd\2\2\u07ea\u07e9\3\2")
        buf.write("\2\2\u07ea\u07eb\3\2\2\2\u07eb\u07ec\3\2\2\2\u07ec\u07ee")
        buf.write("\7\16\2\2\u07ed\u07ef\7\u00dd\2\2\u07ee\u07ed\3\2\2\2")
        buf.write("\u07ee\u07ef\3\2\2\2\u07ef\u07f0\3\2\2\2\u07f0\u07f2\5")
        buf.write("\u00caf\5\u07f1\u073d\3\2\2\2\u07f1\u0746\3\2\2\2\u07f1")
        buf.write("\u074f\3\2\2\2\u07f1\u0758\3\2\2\2\u07f1\u0761\3\2\2\2")
        buf.write("\u07f1\u076a\3\2\2\2\u07f1\u0773\3\2\2\2\u07f1\u077c\3")
        buf.write("\2\2\2\u07f1\u0785\3\2\2\2\u07f1\u078e\3\2\2\2\u07f1\u0797")
        buf.write("\3\2\2\2\u07f1\u07a0\3\2\2\2\u07f1\u07a9\3\2\2\2\u07f1")
        buf.write("\u07b2\3\2\2\2\u07f1\u07bb\3\2\2\2\u07f1\u07c4\3\2\2\2")
        buf.write("\u07f1\u07cd\3\2\2\2\u07f1\u07d6\3\2\2\2\u07f1\u07df\3")
        buf.write("\2\2\2\u07f1\u07e8\3\2\2\2\u07f2\u07f5\3\2\2\2\u07f3\u07f1")
        buf.write("\3\2\2\2\u07f3\u07f4\3\2\2\2\u07f4\u00cb\3\2\2\2\u07f5")
        buf.write("\u07f3\3\2\2\2\u07f6\u07fa\7\62\2\2\u07f7\u07fa\7\u00a3")
        buf.write("\2\2\u07f8\u07fa\5\u011c\u008f\2\u07f9\u07f6\3\2\2\2\u07f9")
        buf.write("\u07f7\3\2\2\2\u07f9\u07f8\3\2\2\2\u07fa\u07fb\3\2\2\2")
        buf.write("\u07fb\u07fe\7\u00dd\2\2\u07fc\u07fd\7\u00b9\2\2\u07fd")
        buf.write("\u07ff\7\u00dd\2\2\u07fe\u07fc\3\2\2\2\u07fe\u07ff\3\2")
        buf.write("\2\2\u07ff\u0800\3\2\2\2\u0800\u0801\5\u00ceh\2\u0801")
        buf.write("\u00cd\3\2\2\2\u0802\u080d\5\u00d0i\2\u0803\u0805\7\u00dd")
        buf.write("\2\2\u0804\u0803\3\2\2\2\u0804\u0805\3\2\2\2\u0805\u0806")
        buf.write("\3\2\2\2\u0806\u0808\7\3\2\2\u0807\u0809\7\u00dd\2\2\u0808")
        buf.write("\u0807\3\2\2\2\u0808\u0809\3\2\2\2\u0809\u080a\3\2\2\2")
        buf.write("\u080a\u080c\5\u00d0i\2\u080b\u0804\3\2\2\2\u080c\u080f")
        buf.write("\3\2\2\2\u080d\u080b\3\2\2\2\u080d\u080e\3\2\2\2\u080e")
        buf.write("\u00cf\3\2\2\2\u080f\u080d\3\2\2\2\u0810\u0822\5\u0104")
        buf.write("\u0083\2\u0811\u0813\7\u00dd\2\2\u0812\u0811\3\2\2\2\u0812")
        buf.write("\u0813\3\2\2\2\u0813\u0814\3\2\2\2\u0814\u0816\7\u00c3")
        buf.write("\2\2\u0815\u0817\7\u00dd\2\2\u0816\u0815\3\2\2\2\u0816")
        buf.write("\u0817\3\2\2\2\u0817\u081c\3\2\2\2\u0818\u081a\5\u0100")
        buf.write("\u0081\2\u0819\u081b\7\u00dd\2\2\u081a\u0819\3\2\2\2\u081a")
        buf.write("\u081b\3\2\2\2\u081b\u081d\3\2\2\2\u081c\u0818\3\2\2\2")
        buf.write("\u081c\u081d\3\2\2\2\u081d\u081e\3\2\2\2\u081e\u0820\7")
        buf.write("\u00cc\2\2\u081f\u0821\7\u00dd\2\2\u0820\u081f\3\2\2\2")
        buf.write("\u0820\u0821\3\2\2\2\u0821\u0823\3\2\2\2\u0822\u0812\3")
        buf.write("\2\2\2\u0822\u0823\3\2\2\2\u0823\u0825\3\2\2\2\u0824\u0826")
        buf.write("\5\u011a\u008e\2\u0825\u0824\3\2\2\2\u0825\u0826\3\2\2")
        buf.write("\2\u0826\u0829\3\2\2\2\u0827\u0828\7\u00dd\2\2\u0828\u082a")
        buf.write("\5\u0106\u0084\2\u0829\u0827\3\2\2\2\u0829\u082a\3\2\2")
        buf.write("\2\u082a\u00d1\3\2\2\2\u082b\u082c\7\u00b6\2\2\u082c\u082d")
        buf.write("\7\u00dd\2\2\u082d\u082e\5\u00caf\2\u082e\u0830\5\u0126")
        buf.write("\u0094\2\u082f\u0831\5\34\17\2\u0830\u082f\3\2\2\2\u0830")
        buf.write("\u0831\3\2\2\2\u0831\u0832\3\2\2\2\u0832\u0833\7\u00b5")
        buf.write("\2\2\u0833\u00d3\3\2\2\2\u0834\u0835\7\u00b7\2\2\u0835")
        buf.write("\u0836\7\u00dd\2\2\u0836\u0838\5\u00dan\2\u0837\u0839")
        buf.write("\7\u00dd\2\2\u0838\u0837\3\2\2\2\u0838\u0839\3\2\2\2\u0839")
        buf.write("\u083a\3\2\2\2\u083a\u083c\7\3\2\2\u083b\u083d\7\u00dd")
        buf.write("\2\2\u083c\u083b\3\2\2\2\u083c\u083d\3\2\2\2\u083d\u083e")
        buf.write("\3\2\2\2\u083e\u083f\5\u00caf\2\u083f\u00d5\3\2\2\2\u0840")
        buf.write("\u0841\7\u00b8\2\2\u0841\u0846\7\u00dd\2\2\u0842\u0847")
        buf.write("\5\u00e8u\2\u0843\u0844\7t\2\2\u0844\u0845\7\u00dd\2\2")
        buf.write("\u0845\u0847\5\u0118\u008d\2\u0846\u0842\3\2\2\2\u0846")
        buf.write("\u0843\3\2\2\2\u0847\u0848\3\2\2\2\u0848\u084a\5\u0126")
        buf.write("\u0094\2\u0849\u084b\5\34\17\2\u084a\u0849\3\2\2\2\u084a")
        buf.write("\u084b\3\2\2\2\u084b\u084c\3\2\2\2\u084c\u084d\7?\2\2")
        buf.write("\u084d\u00d7\3\2\2\2\u084e\u084f\7\u00ba\2\2\u084f\u0850")
        buf.write("\7\u00dd\2\2\u0850\u0852\5\u00dan\2\u0851\u0853\7\u00dd")
        buf.write("\2\2\u0852\u0851\3\2\2\2\u0852\u0853\3\2\2\2\u0853\u0854")
        buf.write("\3\2\2\2\u0854\u0859\7\3\2\2\u0855\u0857\7\u00dd\2\2\u0856")
        buf.write("\u0855\3\2\2\2\u0856\u0857\3\2\2\2\u0857\u0858\3\2\2\2")
        buf.write("\u0858\u085a\5\u0086D\2\u0859\u0856\3\2\2\2\u0859\u085a")
        buf.write("\3\2\2\2\u085a\u00d9\3\2\2\2\u085b\u085d\7\5\2\2\u085c")
        buf.write("\u085b\3\2\2\2\u085c\u085d\3\2\2\2\u085d\u085e\3\2\2\2")
        buf.write("\u085e\u085f\5\u00caf\2\u085f\u00db\3\2\2\2\u0860\u0863")
        buf.write("\5\u00dep\2\u0861\u0863\5\u00e0q\2\u0862\u0860\3\2\2\2")
        buf.write("\u0862\u0861\3\2\2\2\u0863\u00dd\3\2\2\2\u0864\u0865\7")
        buf.write("\32\2\2\u0865\u0866\7\u00dd\2\2\u0866\u0868\5\u0104\u0083")
        buf.write("\2\u0867\u0869\5\u011a\u008e\2\u0868\u0867\3\2\2\2\u0868")
        buf.write("\u0869\3\2\2\2\u0869\u0877\3\2\2\2\u086a\u086c\7\u00dd")
        buf.write("\2\2\u086b\u086a\3\2\2\2\u086b\u086c\3\2\2\2\u086c\u086d")
        buf.write("\3\2\2\2\u086d\u086f\7\u00c3\2\2\u086e\u0870\7\u00dd\2")
        buf.write("\2\u086f\u086e\3\2\2\2\u086f\u0870\3\2\2\2\u0870\u0871")
        buf.write("\3\2\2\2\u0871\u0873\5\u00f4{\2\u0872\u0874\7\u00dd\2")
        buf.write("\2\u0873\u0872\3\2\2\2\u0873\u0874\3\2\2\2\u0874\u0875")
        buf.write("\3\2\2\2\u0875\u0876\7\u00cc\2\2\u0876\u0878\3\2\2\2\u0877")
        buf.write("\u086b\3\2\2\2\u0877\u0878\3\2\2\2\u0878\u0882\3\2\2\2")
        buf.write("\u0879\u087b\7\u00dd\2\2\u087a\u0879\3\2\2\2\u087a\u087b")
        buf.write("\3\2\2\2\u087b\u087c\3\2\2\2\u087c\u087d\7\u00c3\2\2\u087d")
        buf.write("\u087e\5\u0100\u0081\2\u087e\u087f\7\u00cc\2\2\u087f\u0881")
        buf.write("\3\2\2\2\u0880\u087a\3\2\2\2\u0881\u0884\3\2\2\2\u0882")
        buf.write("\u0880\3\2\2\2\u0882\u0883\3\2\2\2\u0883\u00df\3\2\2\2")
        buf.write("\u0884\u0882\3\2\2\2\u0885\u0886\7\32\2\2\u0886\u0888")
        buf.write("\7\u00dd\2\2\u0887\u0889\5\u00e8u\2\u0888\u0887\3\2\2")
        buf.write("\2\u0888\u0889\3\2\2\2\u0889\u088a\3\2\2\2\u088a\u088b")
        buf.write("\7\6\2\2\u088b\u088d\5\u0104\u0083\2\u088c\u088e\5\u011a")
        buf.write("\u008e\2\u088d\u088c\3\2\2\2\u088d\u088e\3\2\2\2\u088e")
        buf.write("\u089c\3\2\2\2\u088f\u0891\7\u00dd\2\2\u0890\u088f\3\2")
        buf.write("\2\2\u0890\u0891\3\2\2\2\u0891\u0892\3\2\2\2\u0892\u0894")
        buf.write("\7\u00c3\2\2\u0893\u0895\7\u00dd\2\2\u0894\u0893\3\2\2")
        buf.write("\2\u0894\u0895\3\2\2\2\u0895\u0896\3\2\2\2\u0896\u0898")
        buf.write("\5\u00f4{\2\u0897\u0899\7\u00dd\2\2\u0898\u0897\3\2\2")
        buf.write("\2\u0898\u0899\3\2\2\2\u0899\u089a\3\2\2\2\u089a\u089b")
        buf.write("\7\u00cc\2\2\u089b\u089d\3\2\2\2\u089c\u0890\3\2\2\2\u089c")
        buf.write("\u089d\3\2\2\2\u089d\u08a7\3\2\2\2\u089e\u08a0\7\u00dd")
        buf.write("\2\2\u089f\u089e\3\2\2\2\u089f\u08a0\3\2\2\2\u08a0\u08a1")
        buf.write("\3\2\2\2\u08a1\u08a2\7\u00c3\2\2\u08a2\u08a3\5\u0100\u0081")
        buf.write("\2\u08a3\u08a4\7\u00cc\2\2\u08a4\u08a6\3\2\2\2\u08a5\u089f")
        buf.write("\3\2\2\2\u08a6\u08a9\3\2\2\2\u08a7\u08a5\3\2\2\2\u08a7")
        buf.write("\u08a8\3\2\2\2\u08a8\u00e1\3\2\2\2\u08a9\u08a7\3\2\2\2")
        buf.write("\u08aa\u08ad\5\u00e4s\2\u08ab\u08ad\5\u00e6t\2\u08ac\u08aa")
        buf.write("\3\2\2\2\u08ac\u08ab\3\2\2\2\u08ad\u00e3\3\2\2\2\u08ae")
        buf.write("\u08b0\5\u00e8u\2\u08af\u08ae\3\2\2\2\u08af\u08b0\3\2")
        buf.write("\2\2\u08b0\u08b1\3\2\2\2\u08b1\u08b2\7\6\2\2\u08b2\u08b4")
        buf.write("\5\u0104\u0083\2\u08b3\u08b5\5\u011a\u008e\2\u08b4\u08b3")
        buf.write("\3\2\2\2\u08b4\u08b5\3\2\2\2\u08b5\u08b8\3\2\2\2\u08b6")
        buf.write("\u08b7\7\u00dd\2\2\u08b7\u08b9\5\u00f4{\2\u08b8\u08b6")
        buf.write("\3\2\2\2\u08b8\u08b9\3\2\2\2\u08b9\u08bb\3\2\2\2\u08ba")
        buf.write("\u08bc\5\u00f8}\2\u08bb\u08ba\3\2\2\2\u08bb\u08bc\3\2")
        buf.write("\2\2\u08bc\u08c6\3\2\2\2\u08bd\u08bf\7\u00dd\2\2\u08be")
        buf.write("\u08bd\3\2\2\2\u08be\u08bf\3\2\2\2\u08bf\u08c0\3\2\2\2")
        buf.write("\u08c0\u08c1\7\u00c3\2\2\u08c1\u08c2\5\u0100\u0081\2\u08c2")
        buf.write("\u08c3\7\u00cc\2\2\u08c3\u08c5\3\2\2\2\u08c4\u08be\3\2")
        buf.write("\2\2\u08c5\u08c8\3\2\2\2\u08c6\u08c4\3\2\2\2\u08c6\u08c7")
        buf.write("\3\2\2\2\u08c7\u00e5\3\2\2\2\u08c8\u08c6\3\2\2\2\u08c9")
        buf.write("\u08cc\5\u010a\u0086\2\u08ca\u08cb\7\u00dd\2\2\u08cb\u08cd")
        buf.write("\5\u00f4{\2\u08cc\u08ca\3\2\2\2\u08cc\u08cd\3\2\2\2\u08cd")
        buf.write("\u08d7\3\2\2\2\u08ce\u08d0\7\u00dd\2\2\u08cf\u08ce\3\2")
        buf.write("\2\2\u08cf\u08d0\3\2\2\2\u08d0\u08d1\3\2\2\2\u08d1\u08d2")
        buf.write("\7\u00c3\2\2\u08d2\u08d3\5\u0100\u0081\2\u08d3\u08d4\7")
        buf.write("\u00cc\2\2\u08d4\u08d6\3\2\2\2\u08d5\u08cf\3\2\2\2\u08d6")
        buf.write("\u08d9\3\2\2\2\u08d7\u08d5\3\2\2\2\u08d7\u08d8\3\2\2\2")
        buf.write("\u08d8\u00e7\3\2\2\2\u08d9\u08d7\3\2\2\2\u08da\u08df\5")
        buf.write("\u00eex\2\u08db\u08df\5\u00eav\2\u08dc\u08df\5\u00ecw")
        buf.write("\2\u08dd\u08df\5\u00f2z\2\u08de\u08da\3\2\2\2\u08de\u08db")
        buf.write("\3\2\2\2\u08de\u08dc\3\2\2\2\u08de\u08dd\3\2\2\2\u08df")
        buf.write("\u00e9\3\2\2\2\u08e0\u08e2\5\u0104\u0083\2\u08e1\u08e3")
        buf.write("\5\u011a\u008e\2\u08e2\u08e1\3\2\2\2\u08e2\u08e3\3\2\2")
        buf.write("\2\u08e3\u08e5\3\2\2\2\u08e4\u08e6\5\u00f8}\2\u08e5\u08e4")
        buf.write("\3\2\2\2\u08e5\u08e6\3\2\2\2\u08e6\u08f0\3\2\2\2\u08e7")
        buf.write("\u08e9\7\u00dd\2\2\u08e8\u08e7\3\2\2\2\u08e8\u08e9\3\2")
        buf.write("\2\2\u08e9\u08ea\3\2\2\2\u08ea\u08eb\7\u00c3\2\2\u08eb")
        buf.write("\u08ec\5\u0100\u0081\2\u08ec\u08ed\7\u00cc\2\2\u08ed\u08ef")
        buf.write("\3\2\2\2\u08ee\u08e8\3\2\2\2\u08ef\u08f2\3\2\2\2\u08f0")
        buf.write("\u08ee\3\2\2\2\u08f0\u08f1\3\2\2\2\u08f1\u00eb\3\2\2\2")
        buf.write("\u08f2\u08f0\3\2\2\2\u08f3\u08f6\5\u0104\u0083\2\u08f4")
        buf.write("\u08f6\5\u0108\u0085\2\u08f5\u08f3\3\2\2\2\u08f5\u08f4")
        buf.write("\3\2\2\2\u08f6\u08f8\3\2\2\2\u08f7\u08f9\5\u011a\u008e")
        buf.write("\2\u08f8\u08f7\3\2\2\2\u08f8\u08f9\3\2\2\2\u08f9\u08fb")
        buf.write("\3\2\2\2\u08fa\u08fc\7\u00dd\2\2\u08fb\u08fa\3\2\2\2\u08fb")
        buf.write("\u08fc\3\2\2\2\u08fc\u08fd\3\2\2\2\u08fd\u08ff\7\u00c3")
        buf.write("\2\2\u08fe\u0900\7\u00dd\2\2\u08ff\u08fe\3\2\2\2\u08ff")
        buf.write("\u0900\3\2\2\2\u0900\u0905\3\2\2\2\u0901\u0903\5\u00f4")
        buf.write("{\2\u0902\u0904\7\u00dd\2\2\u0903\u0902\3\2\2\2\u0903")
        buf.write("\u0904\3\2\2\2\u0904\u0906\3\2\2\2\u0905\u0901\3\2\2\2")
        buf.write("\u0905\u0906\3\2\2\2\u0906\u0907\3\2\2\2\u0907\u0909\7")
        buf.write("\u00cc\2\2\u0908\u090a\5\u00f8}\2\u0909\u0908\3\2\2\2")
        buf.write("\u0909\u090a\3\2\2\2\u090a\u0914\3\2\2\2\u090b\u090d\7")
        buf.write("\u00dd\2\2\u090c\u090b\3\2\2\2\u090c\u090d\3\2\2\2\u090d")
        buf.write("\u090e\3\2\2\2\u090e\u090f\7\u00c3\2\2\u090f\u0910\5\u0100")
        buf.write("\u0081\2\u0910\u0911\7\u00cc\2\2\u0911\u0913\3\2\2\2\u0912")
        buf.write("\u090c\3\2\2\2\u0913\u0916\3\2\2\2\u0914\u0912\3\2\2\2")
        buf.write("\u0914\u0915\3\2\2\2\u0915\u00ed\3\2\2\2\u0916\u0914\3")
        buf.write("\2\2\2\u0917\u091a\5\u00eav\2\u0918\u091a\5\u00ecw\2\u0919")
        buf.write("\u0917\3\2\2\2\u0919\u0918\3\2\2\2\u0919\u091a\3\2\2\2")
        buf.write("\u091a\u091c\3\2\2\2\u091b\u091d\5\u00f0y\2\u091c\u091b")
        buf.write("\3\2\2\2\u091d\u091e\3\2\2\2\u091e\u091c\3\2\2\2\u091e")
        buf.write("\u091f\3\2\2\2\u091f\u0921\3\2\2\2\u0920\u0922\5\u00f8")
        buf.write("}\2\u0921\u0920\3\2\2\2\u0921\u0922\3\2\2\2\u0922\u092c")
        buf.write("\3\2\2\2\u0923\u0925\7\u00dd\2\2\u0924\u0923\3\2\2\2\u0924")
        buf.write("\u0925\3\2\2\2\u0925\u0926\3\2\2\2\u0926\u0927\7\u00c3")
        buf.write("\2\2\u0927\u0928\5\u0100\u0081\2\u0928\u0929\7\u00cc\2")
        buf.write("\2\u0929\u092b\3\2\2\2\u092a\u0924\3\2\2\2\u092b\u092e")
        buf.write("\3\2\2\2\u092c\u092a\3\2\2\2\u092c\u092d\3\2\2\2\u092d")
        buf.write("\u00ef\3\2\2\2\u092e\u092c\3\2\2\2\u092f\u0932\t\r\2\2")
        buf.write("\u0930\u0933\5\u00eav\2\u0931\u0933\5\u00ecw\2\u0932\u0930")
        buf.write("\3\2\2\2\u0932\u0931\3\2\2\2\u0933\u00f1\3\2\2\2\u0934")
        buf.write("\u0935\5\u00f8}\2\u0935\u00f3\3\2\2\2\u0936\u0938\5\u00f6")
        buf.write("|\2\u0937\u0936\3\2\2\2\u0937\u0938\3\2\2\2\u0938\u093a")
        buf.write("\3\2\2\2\u0939\u093b\7\u00dd\2\2\u093a\u0939\3\2\2\2\u093a")
        buf.write("\u093b\3\2\2\2\u093b\u093c\3\2\2\2\u093c\u093e\t\13\2")
        buf.write("\2\u093d\u093f\7\u00dd\2\2\u093e\u093d\3\2\2\2\u093e\u093f")
        buf.write("\3\2\2\2\u093f\u0941\3\2\2\2\u0940\u0937\3\2\2\2\u0941")
        buf.write("\u0944\3\2\2\2\u0942\u0940\3\2\2\2\u0942\u0943\3\2\2\2")
        buf.write("\u0943\u0945\3\2\2\2\u0944\u0942\3\2\2\2\u0945\u0952\5")
        buf.write("\u00f6|\2\u0946\u0948\7\u00dd\2\2\u0947\u0946\3\2\2\2")
        buf.write("\u0947\u0948\3\2\2\2\u0948\u0949\3\2\2\2\u0949\u094b\t")
        buf.write("\13\2\2\u094a\u094c\7\u00dd\2\2\u094b\u094a\3\2\2\2\u094b")
        buf.write("\u094c\3\2\2\2\u094c\u094e\3\2\2\2\u094d\u094f\5\u00f6")
        buf.write("|\2\u094e\u094d\3\2\2\2\u094e\u094f\3\2\2\2\u094f\u0951")
        buf.write("\3\2\2\2\u0950\u0947\3\2\2\2\u0951\u0954\3\2\2\2\u0952")
        buf.write("\u0950\3\2\2\2\u0952\u0953\3\2\2\2\u0953\u00f5\3\2\2\2")
        buf.write("\u0954\u0952\3\2\2\2\u0955\u0957\7\u00c3\2\2\u0956\u0955")
        buf.write("\3\2\2\2\u0956\u0957\3\2\2\2\u0957\u095a\3\2\2\2\u0958")
        buf.write("\u0959\t\16\2\2\u0959\u095b\7\u00dd\2\2\u095a\u0958\3")
        buf.write("\2\2\2\u095a\u095b\3\2\2\2\u095b\u095d\3\2\2\2\u095c\u095e")
        buf.write("\7\u00cc\2\2\u095d\u095c\3\2\2\2\u095d\u095e\3\2\2\2\u095e")
        buf.write("\u095f\3\2\2\2\u095f\u0960\5\u00caf\2\u0960\u00f7\3\2")
        buf.write("\2\2\u0961\u0962\7\7\2\2\u0962\u0964\5\u0104\u0083\2\u0963")
        buf.write("\u0965\5\u011a\u008e\2\u0964\u0963\3\2\2\2\u0964\u0965")
        buf.write("\3\2\2\2\u0965\u00f9\3\2\2\2\u0966\u0978\7\u00c3\2\2\u0967")
        buf.write("\u0969\7\u00dd\2\2\u0968\u0967\3\2\2\2\u0968\u0969\3\2")
        buf.write("\2\2\u0969\u096a\3\2\2\2\u096a\u0975\5\u00fc\177\2\u096b")
        buf.write("\u096d\7\u00dd\2\2\u096c\u096b\3\2\2\2\u096c\u096d\3\2")
        buf.write("\2\2\u096d\u096e\3\2\2\2\u096e\u0970\7\3\2\2\u096f\u0971")
        buf.write("\7\u00dd\2\2\u0970\u096f\3\2\2\2\u0970\u0971\3\2\2\2\u0971")
        buf.write("\u0972\3\2\2\2\u0972\u0974\5\u00fc\177\2\u0973\u096c\3")
        buf.write("\2\2\2\u0974\u0977\3\2\2\2\u0975\u0973\3\2\2\2\u0975\u0976")
        buf.write("\3\2\2\2\u0976\u0979\3\2\2\2\u0977\u0975\3\2\2\2\u0978")
        buf.write("\u0968\3\2\2\2\u0978\u0979\3\2\2\2\u0979\u097b\3\2\2\2")
        buf.write("\u097a\u097c\7\u00dd\2\2\u097b\u097a\3\2\2\2\u097b\u097c")
        buf.write("\3\2\2\2\u097c\u097d\3\2\2\2\u097d\u097e\7\u00cc\2\2\u097e")
        buf.write("\u00fb\3\2\2\2\u097f\u0980\7|\2\2\u0980\u0982\7\u00dd")
        buf.write("\2\2\u0981\u097f\3\2\2\2\u0981\u0982\3\2\2\2\u0982\u0985")
        buf.write("\3\2\2\2\u0983\u0984\t\17\2\2\u0984\u0986\7\u00dd\2\2")
        buf.write("\u0985\u0983\3\2\2\2\u0985\u0986\3\2\2\2\u0986\u0989\3")
        buf.write("\2\2\2\u0987\u0988\7\u0083\2\2\u0988\u098a\7\u00dd\2\2")
        buf.write("\u0989\u0987\3\2\2\2\u0989\u098a\3\2\2\2\u098a\u098b\3")
        buf.write("\2\2\2\u098b\u098d\5\u0104\u0083\2\u098c\u098e\5\u011a")
        buf.write("\u008e\2\u098d\u098c\3\2\2\2\u098d\u098e\3\2\2\2\u098e")
        buf.write("\u0997\3\2\2\2\u098f\u0991\7\u00dd\2\2\u0990\u098f\3\2")
        buf.write("\2\2\u0990\u0991\3\2\2\2\u0991\u0992\3\2\2\2\u0992\u0994")
        buf.write("\7\u00c3\2\2\u0993\u0995\7\u00dd\2\2\u0994\u0993\3\2\2")
        buf.write("\2\u0994\u0995\3\2\2\2\u0995\u0996\3\2\2\2\u0996\u0998")
        buf.write("\7\u00cc\2\2\u0997\u0990\3\2\2\2\u0997\u0998\3\2\2\2\u0998")
        buf.write("\u099d\3\2\2\2\u0999\u099b\7\u00dd\2\2\u099a\u0999\3\2")
        buf.write("\2\2\u099a\u099b\3\2\2\2\u099b\u099c\3\2\2\2\u099c\u099e")
        buf.write("\5\u0106\u0084\2\u099d\u099a\3\2\2\2\u099d\u099e\3\2\2")
        buf.write("\2\u099e\u09a3\3\2\2\2\u099f\u09a1\7\u00dd\2\2\u09a0\u099f")
        buf.write("\3\2\2\2\u09a0\u09a1\3\2\2\2\u09a1\u09a2\3\2\2\2\u09a2")
        buf.write("\u09a4\5\u00fe\u0080\2\u09a3\u09a0\3\2\2\2\u09a3\u09a4")
        buf.write("\3\2\2\2\u09a4\u00fd\3\2\2\2\u09a5\u09a7\7\u00bf\2\2\u09a6")
        buf.write("\u09a8\7\u00dd\2\2\u09a7\u09a6\3\2\2\2\u09a7\u09a8\3\2")
        buf.write("\2\2\u09a8\u09a9\3\2\2\2\u09a9\u09aa\5\u00caf\2\u09aa")
        buf.write("\u00ff\3\2\2\2\u09ab\u09b6\5\u0102\u0082\2\u09ac\u09ae")
        buf.write("\7\u00dd\2\2\u09ad\u09ac\3\2\2\2\u09ad\u09ae\3\2\2\2\u09ae")
        buf.write("\u09af\3\2\2\2\u09af\u09b1\7\3\2\2\u09b0\u09b2\7\u00dd")
        buf.write("\2\2\u09b1\u09b0\3\2\2\2\u09b1\u09b2\3\2\2\2\u09b2\u09b3")
        buf.write("\3\2\2\2\u09b3\u09b5\5\u0102\u0082\2\u09b4\u09ad\3\2\2")
        buf.write("\2\u09b5\u09b8\3\2\2\2\u09b6\u09b4\3\2\2\2\u09b6\u09b7")
        buf.write("\3\2\2\2\u09b7\u0101\3\2\2\2\u09b8\u09b6\3\2\2\2\u09b9")
        buf.write("\u09ba\5\u00caf\2\u09ba\u09bb\7\u00dd\2\2\u09bb\u09bc")
        buf.write("\7\u00ac\2\2\u09bc\u09bd\7\u00dd\2\2\u09bd\u09bf\3\2\2")
        buf.write("\2\u09be\u09b9\3\2\2\2\u09be\u09bf\3\2\2\2\u09bf\u09c0")
        buf.write("\3\2\2\2\u09c0\u09c1\5\u00caf\2\u09c1\u0103\3\2\2\2\u09c2")
        buf.write("\u09c5\7\u00de\2\2\u09c3\u09c5\5\u011e\u0090\2\u09c4\u09c2")
        buf.write("\3\2\2\2\u09c4\u09c3\3\2\2\2\u09c5\u09c6\3\2\2\2\u09c6")
        buf.write("\u09c4\3\2\2\2\u09c6\u09c7\3\2\2\2\u09c7\u0105\3\2\2\2")
        buf.write("\u09c8\u09ca\7\22\2\2\u09c9\u09cb\7\u00dd\2\2\u09ca\u09c9")
        buf.write("\3\2\2\2\u09ca\u09cb\3\2\2\2\u09cb\u09ce\3\2\2\2\u09cc")
        buf.write("\u09cd\7t\2\2\u09cd\u09cf\7\u00dd\2\2\u09ce\u09cc\3\2")
        buf.write("\2\2\u09ce\u09cf\3\2\2\2\u09cf\u09d0\3\2\2\2\u09d0\u09d5")
        buf.write("\5\u0118\u008d\2\u09d1\u09d3\7\u00dd\2\2\u09d2\u09d1\3")
        buf.write("\2\2\2\u09d2\u09d3\3\2\2\2\u09d3\u09d4\3\2\2\2\u09d4\u09d6")
        buf.write("\5\u0110\u0089\2\u09d5\u09d2\3\2\2\2\u09d5\u09d6\3\2\2")
        buf.write("\2\u09d6\u0107\3\2\2\2\u09d7\u09d8\t\20\2\2\u09d8\u0109")
        buf.write("\3\2\2\2\u09d9\u09de\7\u00de\2\2\u09da\u09dd\5\u011e\u0090")
        buf.write("\2\u09db\u09dd\7\u00de\2\2\u09dc\u09da\3\2\2\2\u09dc\u09db")
        buf.write("\3\2\2\2\u09dd\u09e0\3\2\2\2\u09de\u09dc\3\2\2\2\u09de")
        buf.write("\u09df\3\2\2\2\u09df\u09e9\3\2\2\2\u09e0\u09de\3\2\2\2")
        buf.write("\u09e1\u09e4\5\u011e\u0090\2\u09e2\u09e5\5\u011e\u0090")
        buf.write("\2\u09e3\u09e5\7\u00de\2\2\u09e4\u09e2\3\2\2\2\u09e4\u09e3")
        buf.write("\3\2\2\2\u09e5\u09e6\3\2\2\2\u09e6\u09e4\3\2\2\2\u09e6")
        buf.write("\u09e7\3\2\2\2\u09e7\u09e9\3\2\2\2\u09e8\u09d9\3\2\2\2")
        buf.write("\u09e8\u09e1\3\2\2\2\u09e9\u010b\3\2\2\2\u09ea\u09eb\t")
        buf.write("\21\2\2\u09eb\u010d\3\2\2\2\u09ec\u09f1\5\u0104\u0083")
        buf.write("\2\u09ed\u09ee\t\r\2\2\u09ee\u09f0\5\u0104\u0083\2\u09ef")
        buf.write("\u09ed\3\2\2\2\u09f0\u09f3\3\2\2\2\u09f1\u09ef\3\2\2\2")
        buf.write("\u09f1\u09f2\3\2\2\2\u09f2\u010f\3\2\2\2\u09f3\u09f1\3")
        buf.write("\2\2\2\u09f4\u09f6\7\u00c7\2\2\u09f5\u09f7\7\u00dd\2\2")
        buf.write("\u09f6\u09f5\3\2\2\2\u09f6\u09f7\3\2\2\2\u09f7\u09fa\3")
        buf.write("\2\2\2\u09f8\u09fb\7\u00d3\2\2\u09f9\u09fb\5\u0104\u0083")
        buf.write("\2\u09fa\u09f8\3\2\2\2\u09fa\u09f9\3\2\2\2\u09fb\u0111")
        buf.write("\3\2\2\2\u09fc\u0a05\5\u010a\u0086\2\u09fd\u09ff\7\u00dd")
        buf.write("\2\2\u09fe\u09fd\3\2\2\2\u09fe\u09ff\3\2\2\2\u09ff\u0a00")
        buf.write("\3\2\2\2\u0a00\u0a02\7\u00c5\2\2\u0a01\u0a03\7\u00dd\2")
        buf.write("\2\u0a02\u0a01\3\2\2\2\u0a02\u0a03\3\2\2\2\u0a03\u0a04")
        buf.write("\3\2\2\2\u0a04\u0a06\5\u010a\u0086\2\u0a05\u09fe\3\2\2")
        buf.write("\2\u0a05\u0a06\3\2\2\2\u0a06\u0113\3\2\2\2\u0a07\u0a08")
        buf.write("\5\u0104\u0083\2\u0a08\u0a09\7\u00db\2\2\u0a09\u0115\3")
        buf.write("\2\2\2\u0a0a\u0a0b\t\22\2\2\u0a0b\u0117\3\2\2\2\u0a0c")
        buf.write("\u0a0f\5\u0108\u0085\2\u0a0d\u0a0f\5\u010e\u0088\2\u0a0e")
        buf.write("\u0a0c\3\2\2\2\u0a0e\u0a0d\3\2\2\2\u0a0f\u0a18\3\2\2\2")
        buf.write("\u0a10\u0a12\7\u00dd\2\2\u0a11\u0a10\3\2\2\2\u0a11\u0a12")
        buf.write("\3\2\2\2\u0a12\u0a13\3\2\2\2\u0a13\u0a15\7\u00c3\2\2\u0a14")
        buf.write("\u0a16\7\u00dd\2\2\u0a15\u0a14\3\2\2\2\u0a15\u0a16\3\2")
        buf.write("\2\2\u0a16\u0a17\3\2\2\2\u0a17\u0a19\7\u00cc\2\2\u0a18")
        buf.write("\u0a11\3\2\2\2\u0a18\u0a19\3\2\2\2\u0a19\u0119\3\2\2\2")
        buf.write("\u0a1a\u0a1b\t\23\2\2\u0a1b\u011b\3\2\2\2\u0a1c\u0a1d")
        buf.write("\t\24\2\2\u0a1d\u011d\3\2\2\2\u0a1e\u0a1f\t\25\2\2\u0a1f")
        buf.write("\u011f\3\2\2\2\u0a20\u0a21\7\u00d8\2\2\u0a21\u0121\3\2")
        buf.write("\2\2\u0a22\u0a23\7\u00d9\2\2\u0a23\u0123\3\2\2\2\u0a24")
        buf.write("\u0a26\7\u00dd\2\2\u0a25\u0a24\3\2\2\2\u0a25\u0a26\3\2")
        buf.write("\2\2\u0a26\u0a2a\3\2\2\2\u0a27\u0a2b\7\u00d7\2\2\u0a28")
        buf.write("\u0a2b\5\u0122\u0092\2\u0a29\u0a2b\5\u0120\u0091\2\u0a2a")
        buf.write("\u0a27\3\2\2\2\u0a2a\u0a28\3\2\2\2\u0a2a\u0a29\3\2\2\2")
        buf.write("\u0a2b\u0a2d\3\2\2\2\u0a2c\u0a2e\7\u00dd\2\2\u0a2d\u0a2c")
        buf.write("\3\2\2\2\u0a2d\u0a2e\3\2\2\2\u0a2e\u0125\3\2\2\2\u0a2f")
        buf.write("\u0a38\5\u0124\u0093\2\u0a30\u0a32\7\u00dd\2\2\u0a31\u0a30")
        buf.write("\3\2\2\2\u0a31\u0a32\3\2\2\2\u0a32\u0a33\3\2\2\2\u0a33")
        buf.write("\u0a35\7\u00db\2\2\u0a34\u0a36\7\u00dd\2\2\u0a35\u0a34")
        buf.write("\3\2\2\2\u0a35\u0a36\3\2\2\2\u0a36\u0a38\3\2\2\2\u0a37")
        buf.write("\u0a2f\3\2\2\2\u0a37\u0a31\3\2\2\2\u0a38\u0a3b\3\2\2\2")
        buf.write("\u0a39\u0a37\3\2\2\2\u0a39\u0a3a\3\2\2\2\u0a3a\u0127\3")
        buf.write("\2\2\2\u0a3b\u0a39\3\2\2\2\u01bf\u012c\u0131\u0138\u013b")
        buf.write("\u013e\u0143\u0147\u014c\u0150\u0155\u0159\u015e\u0162")
        buf.write("\u016e\u0174\u017a\u017e\u0184\u018b\u018f\u0195\u019b")
        buf.write("\u01a1\u01ac\u01b8\u01bc\u01c2\u01c8\u01ce\u01d7\u01dd")
        buf.write("\u01e1\u01e5\u01e9\u01ee\u01f7\u023f\u0245\u0249\u024c")
        buf.write("\u025c\u0260\u0265\u0268\u026d\u0273\u0277\u027c\u0281")
        buf.write("\u0285\u0288\u028c\u0292\u0296\u029d\u02a3\u02a7\u02aa")
        buf.write("\u02af\u02b9\u02bc\u02bf\u02c3\u02c9\u02cd\u02d2\u02d9")
        buf.write("\u02dd\u02e1\u02e5\u02e8\u02ed\u02f8\u0305\u030c\u0315")
        buf.write("\u031c\u0320\u0323\u0332\u0338\u0342\u0346\u0350\u0358")
        buf.write("\u035d\u0363\u0367\u036a\u036e\u0379\u037d\u0382\u0387")
        buf.write("\u038b\u038f\u0393\u0396\u0399\u039c\u039f\u03a3\u03ab")
        buf.write("\u03af\u03b2\u03b5\u03b9\u03d0\u03d6\u03da\u03de\u03e7")
        buf.write("\u03f2\u03f7\u0401\u0405\u040a\u0412\u0416\u041a\u0422")
        buf.write("\u0426\u0432\u0436\u043d\u043f\u0445\u0449\u044f\u0453")
        buf.write("\u0457\u045f\u0463\u0469\u0472\u0474\u0479\u0482\u0484")
        buf.write("\u048c\u048e\u0493\u0497\u049b\u04b3\u04bd\u04c1\u04c6")
        buf.write("\u04d1\u04d5\u04da\u04e8\u04ec\u04f5\u04f9\u04fc\u0500")
        buf.write("\u0504\u0507\u050b\u050f\u0512\u0516\u0519\u051d\u051f")
        buf.write("\u0524\u0528\u052c\u0530\u0532\u0538\u053c\u053f\u0544")
        buf.write("\u0548\u054e\u0551\u0554\u0558\u055c\u0563\u0567\u056d")
        buf.write("\u0570\u0574\u057b\u057f\u0585\u0588\u058c\u0594\u0598")
        buf.write("\u059b\u059e\u05a2\u05aa\u05ae\u05b2\u05b4\u05b7\u05bc")
        buf.write("\u05c2\u05c6\u05ca\u05cf\u05d4\u05d8\u05dc\u05e1\u05e9")
        buf.write("\u05eb\u05f7\u05fb\u0603\u0607\u060f\u0613\u0617\u061b")
        buf.write("\u061f\u0623\u062b\u062f\u063c\u0643\u0647\u0652\u0659")
        buf.write("\u065e\u0662\u0667\u066a\u0670\u0674\u0677\u067d\u0681")
        buf.write("\u0689\u068d\u0696\u069a\u069e\u06a2\u06a5\u06a9\u06af")
        buf.write("\u06b3\u06ba\u06c3\u06ca\u06ce\u06d1\u06d4\u06d7\u06db")
        buf.write("\u06e6\u06f0\u06f4\u06fb\u06fd\u0704\u0708\u070c\u0711")
        buf.write("\u0718\u071f\u0724\u0728\u072e\u0733\u0738\u073b\u073f")
        buf.write("\u0743\u0748\u074c\u0751\u0755\u075a\u075e\u0763\u0767")
        buf.write("\u076c\u0770\u0775\u0779\u077e\u0782\u0787\u078b\u0790")
        buf.write("\u0794\u0799\u079d\u07a2\u07a6\u07ab\u07af\u07b4\u07b8")
        buf.write("\u07bd\u07c1\u07c6\u07ca\u07cf\u07d3\u07d8\u07dc\u07e1")
        buf.write("\u07e5\u07ea\u07ee\u07f1\u07f3\u07f9\u07fe\u0804\u0808")
        buf.write("\u080d\u0812\u0816\u081a\u081c\u0820\u0822\u0825\u0829")
        buf.write("\u0830\u0838\u083c\u0846\u084a\u0852\u0856\u0859\u085c")
        buf.write("\u0862\u0868\u086b\u086f\u0873\u0877\u087a\u0882\u0888")
        buf.write("\u088d\u0890\u0894\u0898\u089c\u089f\u08a7\u08ac\u08af")
        buf.write("\u08b4\u08b8\u08bb\u08be\u08c6\u08cc\u08cf\u08d7\u08de")
        buf.write("\u08e2\u08e5\u08e8\u08f0\u08f5\u08f8\u08fb\u08ff\u0903")
        buf.write("\u0905\u0909\u090c\u0914\u0919\u091e\u0921\u0924\u092c")
        buf.write("\u0932\u0937\u093a\u093e\u0942\u0947\u094b\u094e\u0952")
        buf.write("\u0956\u095a\u095d\u0964\u0968\u096c\u0970\u0975\u0978")
        buf.write("\u097b\u0981\u0985\u0989\u098d\u0990\u0994\u0997\u099a")
        buf.write("\u099d\u09a0\u09a3\u09a7\u09ad\u09b1\u09b6\u09be\u09c4")
        buf.write("\u09c6\u09ca\u09ce\u09d2\u09d5\u09dc\u09de\u09e4\u09e6")
        buf.write("\u09e8\u09f1\u09f6\u09fa\u09fe\u0a02\u0a05\u0a0e\u0a11")
        buf.write("\u0a15\u0a18\u0a25\u0a2a\u0a2d\u0a31\u0a35\u0a37\u0a39")
        return buf.getvalue()


class vbaParser ( Parser ):

    grammarFileName = "vba.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "','", "';'", "'#'", "'.'", "'!'", "'%'", 
                     "'@'", "'$'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'&'", "':='", "<INVALID>", 
                     "'='", "'>='", "'>'", "'<='", "'('", "'<'", "'-'", 
                     "'-='", "'*'", "'<>'", "'+'", "'+='", "'^'", "')'", 
                     "'['", "']'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'''", "':'", "'_'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "ACCESS", "ADDRESSOF", "ALIAS", "AND", 
                      "ATTRIBUTE", "APPACTIVATE", "APPEND", "AS", "BEGIN", 
                      "BEEP", "BINARY", "BOOLEAN", "BYVAL", "BYREF", "BYTE", 
                      "CALL", "CASE", "CHDIR", "CHDRIVE", "CLASS", "CLOSE", 
                      "COLLECTION", "CONST", "DATABASE", "DATE", "DECLARE", 
                      "DEFBOOL", "DEFBYTE", "DEFDATE", "DEFDBL", "DEFDEC", 
                      "DEFCUR", "DEFINT", "DEFLNG", "DEFOBJ", "DEFSNG", 
                      "DEFSTR", "DEFVAR", "DELETESETTING", "DIM", "DO", 
                      "DOUBLE", "EACH", "ELSE", "ELSEIF", "END_ENUM", "END_FUNCTION", 
                      "END_IF", "END_PROPERTY", "END_SELECT", "END_SUB", 
                      "END_TYPE", "END_WITH", "END", "ENUM", "EQV", "ERASE", 
                      "ERROR", "EVENT", "EXIT_DO", "EXIT_FOR", "EXIT_FUNCTION", 
                      "EXIT_PROPERTY", "EXIT_SUB", "FALSE", "FILECOPY", 
                      "FRIEND", "FOR", "FUNCTION", "GET", "GLOBAL", "GOSUB", 
                      "GOTO", "IF", "IMP", "IMPLEMENTS", "IN", "INPUT", 
                      "IS", "INTEGER", "KILL", "LOAD", "LOCK", "LONG", "LOOP", 
                      "LEN", "LET", "LIB", "LIKE", "LINE_INPUT", "LOCK_READ", 
                      "LOCK_WRITE", "LOCK_READ_WRITE", "LSET", "MACRO_CONST", 
                      "MACRO_IF", "MACRO_ELSEIF", "MACRO_ELSE", "MACRO_END_IF", 
                      "ME", "MID", "MKDIR", "MOD", "NAME", "NEXT", "NEW", 
                      "NOT", "NOTHING", "NULL", "ON", "ON_ERROR", "ON_LOCAL_ERROR", 
                      "OPEN", "OPTIONAL", "OPTION_BASE", "OPTION_EXPLICIT", 
                      "OPTION_COMPARE", "OPTION_PRIVATE_MODULE", "OR", "OUTPUT", 
                      "PARAMARRAY", "PRESERVE", "PRINT", "PRIVATE", "PROPERTY_GET", 
                      "PROPERTY_LET", "PROPERTY_SET", "PTRSAFE", "PUBLIC", 
                      "PUT", "RANDOM", "RANDOMIZE", "RAISEEVENT", "READ", 
                      "READ_WRITE", "REDIM", "REM", "RESET", "RESUME", "RETURN", 
                      "RMDIR", "RSET", "SAVEPICTURE", "SAVESETTING", "SEEK", 
                      "SELECT", "SENDKEYS", "SET", "SETATTR", "SHARED", 
                      "SINGLE", "SPC", "STATIC", "STEP", "STOP", "STRING", 
                      "SUB", "TAB", "TEXT", "THEN", "TIME", "TO", "TRUE", 
                      "TYPE", "TYPEOF", "UNLOAD", "UNLOCK", "UNTIL", "VARIANT", 
                      "VERSION", "WEND", "WHILE", "WIDTH", "WITH", "WITHEVENTS", 
                      "WRITE", "XOR", "AMPERSAND", "ASSIGN", "DIV", "EQ", 
                      "GEQ", "GT", "LEQ", "LPAREN", "LT", "MINUS", "MINUS_EQ", 
                      "MULT", "NEQ", "PLUS", "PLUS_EQ", "POW", "RPAREN", 
                      "L_SQUARE_BRACKET", "R_SQUARE_BRACKET", "STRINGLITERAL", 
                      "OCTLITERAL", "HEXLITERAL", "SHORTLITERAL", "INTEGERLITERAL", 
                      "DOUBLELITERAL", "DATELITERAL", "LINE_CONTINUATION", 
                      "NEWLINE", "REMCOMMENT", "COMMENT", "SINGLEQUOTE", 
                      "COLON", "UNDERSCORE", "WS", "IDENTIFIER" ]

    RULE_startRule = 0
    RULE_module = 1
    RULE_moduleHeader = 2
    RULE_moduleConfig = 3
    RULE_moduleConfigElement = 4
    RULE_moduleAttributes = 5
    RULE_moduleDeclarations = 6
    RULE_moduleOption = 7
    RULE_moduleDeclarationsElement = 8
    RULE_macroStmt = 9
    RULE_moduleBody = 10
    RULE_moduleBodyElement = 11
    RULE_attributeStmt = 12
    RULE_block = 13
    RULE_blockStmt = 14
    RULE_appactivateStmt = 15
    RULE_beepStmt = 16
    RULE_chdirStmt = 17
    RULE_chdriveStmt = 18
    RULE_closeStmt = 19
    RULE_constStmt = 20
    RULE_constSubStmt = 21
    RULE_dateStmt = 22
    RULE_declareStmt = 23
    RULE_deftypeStmt = 24
    RULE_deleteSettingStmt = 25
    RULE_doLoopStmt = 26
    RULE_endStmt = 27
    RULE_enumerationStmt = 28
    RULE_enumerationStmt_Constant = 29
    RULE_eraseStmt = 30
    RULE_errorStmt = 31
    RULE_eventStmt = 32
    RULE_exitStmt = 33
    RULE_filecopyStmt = 34
    RULE_forEachStmt = 35
    RULE_forNextStmt = 36
    RULE_functionStmt = 37
    RULE_getStmt = 38
    RULE_goSubStmt = 39
    RULE_goToStmt = 40
    RULE_ifThenElseStmt = 41
    RULE_ifBlockStmt = 42
    RULE_ifConditionStmt = 43
    RULE_ifElseIfBlockStmt = 44
    RULE_ifElseBlockStmt = 45
    RULE_implementsStmt = 46
    RULE_inputStmt = 47
    RULE_killStmt = 48
    RULE_letStmt = 49
    RULE_lineInputStmt = 50
    RULE_loadStmt = 51
    RULE_lockStmt = 52
    RULE_lsetStmt = 53
    RULE_macroConstStmt = 54
    RULE_macroIfThenElseStmt = 55
    RULE_macroIfBlockStmt = 56
    RULE_macroElseIfBlockStmt = 57
    RULE_macroElseBlockStmt = 58
    RULE_midStmt = 59
    RULE_mkdirStmt = 60
    RULE_nameStmt = 61
    RULE_onErrorStmt = 62
    RULE_onGoToStmt = 63
    RULE_onGoSubStmt = 64
    RULE_openStmt = 65
    RULE_outputList = 66
    RULE_outputList_Expression = 67
    RULE_printStmt = 68
    RULE_propertyGetStmt = 69
    RULE_propertySetStmt = 70
    RULE_propertyLetStmt = 71
    RULE_putStmt = 72
    RULE_raiseEventStmt = 73
    RULE_randomizeStmt = 74
    RULE_redimStmt = 75
    RULE_redimSubStmt = 76
    RULE_resetStmt = 77
    RULE_resumeStmt = 78
    RULE_returnStmt = 79
    RULE_rmdirStmt = 80
    RULE_rsetStmt = 81
    RULE_savepictureStmt = 82
    RULE_saveSettingStmt = 83
    RULE_seekStmt = 84
    RULE_selectCaseStmt = 85
    RULE_sC_Selection = 86
    RULE_sC_Case = 87
    RULE_sC_Cond = 88
    RULE_sendkeysStmt = 89
    RULE_setattrStmt = 90
    RULE_setStmt = 91
    RULE_stopStmt = 92
    RULE_subStmt = 93
    RULE_timeStmt = 94
    RULE_typeStmt = 95
    RULE_typeStmt_Element = 96
    RULE_typeOfStmt = 97
    RULE_unloadStmt = 98
    RULE_unlockStmt = 99
    RULE_valueStmt = 100
    RULE_variableStmt = 101
    RULE_variableListStmt = 102
    RULE_variableSubStmt = 103
    RULE_whileWendStmt = 104
    RULE_widthStmt = 105
    RULE_withStmt = 106
    RULE_writeStmt = 107
    RULE_fileNumber = 108
    RULE_explicitCallStmt = 109
    RULE_eCS_ProcedureCall = 110
    RULE_eCS_MemberProcedureCall = 111
    RULE_implicitCallStmt_InBlock = 112
    RULE_iCS_B_MemberProcedureCall = 113
    RULE_iCS_B_ProcedureCall = 114
    RULE_implicitCallStmt_InStmt = 115
    RULE_iCS_S_VariableOrProcedureCall = 116
    RULE_iCS_S_ProcedureOrArrayCall = 117
    RULE_iCS_S_MembersCall = 118
    RULE_iCS_S_MemberCall = 119
    RULE_iCS_S_DictionaryCall = 120
    RULE_argsCall = 121
    RULE_argCall = 122
    RULE_dictionaryCallStmt = 123
    RULE_argList = 124
    RULE_arg = 125
    RULE_argDefaultValue = 126
    RULE_subscripts = 127
    RULE_subscript = 128
    RULE_ambiguousIdentifier = 129
    RULE_asTypeClause = 130
    RULE_baseType = 131
    RULE_certainIdentifier = 132
    RULE_comparisonOperator = 133
    RULE_complexType = 134
    RULE_fieldLength = 135
    RULE_letterrange = 136
    RULE_lineLabel = 137
    RULE_literal = 138
    RULE_type = 139
    RULE_typeHint = 140
    RULE_visibility = 141
    RULE_ambiguousKeyword = 142
    RULE_remComment = 143
    RULE_comment = 144
    RULE_endOfLine = 145
    RULE_endOfStatement = 146

    ruleNames =  [ "startRule", "module", "moduleHeader", "moduleConfig", 
                   "moduleConfigElement", "moduleAttributes", "moduleDeclarations", 
                   "moduleOption", "moduleDeclarationsElement", "macroStmt", 
                   "moduleBody", "moduleBodyElement", "attributeStmt", "block", 
                   "blockStmt", "appactivateStmt", "beepStmt", "chdirStmt", 
                   "chdriveStmt", "closeStmt", "constStmt", "constSubStmt", 
                   "dateStmt", "declareStmt", "deftypeStmt", "deleteSettingStmt", 
                   "doLoopStmt", "endStmt", "enumerationStmt", "enumerationStmt_Constant", 
                   "eraseStmt", "errorStmt", "eventStmt", "exitStmt", "filecopyStmt", 
                   "forEachStmt", "forNextStmt", "functionStmt", "getStmt", 
                   "goSubStmt", "goToStmt", "ifThenElseStmt", "ifBlockStmt", 
                   "ifConditionStmt", "ifElseIfBlockStmt", "ifElseBlockStmt", 
                   "implementsStmt", "inputStmt", "killStmt", "letStmt", 
                   "lineInputStmt", "loadStmt", "lockStmt", "lsetStmt", 
                   "macroConstStmt", "macroIfThenElseStmt", "macroIfBlockStmt", 
                   "macroElseIfBlockStmt", "macroElseBlockStmt", "midStmt", 
                   "mkdirStmt", "nameStmt", "onErrorStmt", "onGoToStmt", 
                   "onGoSubStmt", "openStmt", "outputList", "outputList_Expression", 
                   "printStmt", "propertyGetStmt", "propertySetStmt", "propertyLetStmt", 
                   "putStmt", "raiseEventStmt", "randomizeStmt", "redimStmt", 
                   "redimSubStmt", "resetStmt", "resumeStmt", "returnStmt", 
                   "rmdirStmt", "rsetStmt", "savepictureStmt", "saveSettingStmt", 
                   "seekStmt", "selectCaseStmt", "sC_Selection", "sC_Case", 
                   "sC_Cond", "sendkeysStmt", "setattrStmt", "setStmt", 
                   "stopStmt", "subStmt", "timeStmt", "typeStmt", "typeStmt_Element", 
                   "typeOfStmt", "unloadStmt", "unlockStmt", "valueStmt", 
                   "variableStmt", "variableListStmt", "variableSubStmt", 
                   "whileWendStmt", "widthStmt", "withStmt", "writeStmt", 
                   "fileNumber", "explicitCallStmt", "eCS_ProcedureCall", 
                   "eCS_MemberProcedureCall", "implicitCallStmt_InBlock", 
                   "iCS_B_MemberProcedureCall", "iCS_B_ProcedureCall", "implicitCallStmt_InStmt", 
                   "iCS_S_VariableOrProcedureCall", "iCS_S_ProcedureOrArrayCall", 
                   "iCS_S_MembersCall", "iCS_S_MemberCall", "iCS_S_DictionaryCall", 
                   "argsCall", "argCall", "dictionaryCallStmt", "argList", 
                   "arg", "argDefaultValue", "subscripts", "subscript", 
                   "ambiguousIdentifier", "asTypeClause", "baseType", "certainIdentifier", 
                   "comparisonOperator", "complexType", "fieldLength", "letterrange", 
                   "lineLabel", "literal", "type", "typeHint", "visibility", 
                   "ambiguousKeyword", "remComment", "comment", "endOfLine", 
                   "endOfStatement" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    ACCESS=9
    ADDRESSOF=10
    ALIAS=11
    AND=12
    ATTRIBUTE=13
    APPACTIVATE=14
    APPEND=15
    AS=16
    BEGIN=17
    BEEP=18
    BINARY=19
    BOOLEAN=20
    BYVAL=21
    BYREF=22
    BYTE=23
    CALL=24
    CASE=25
    CHDIR=26
    CHDRIVE=27
    CLASS=28
    CLOSE=29
    COLLECTION=30
    CONST=31
    DATABASE=32
    DATE=33
    DECLARE=34
    DEFBOOL=35
    DEFBYTE=36
    DEFDATE=37
    DEFDBL=38
    DEFDEC=39
    DEFCUR=40
    DEFINT=41
    DEFLNG=42
    DEFOBJ=43
    DEFSNG=44
    DEFSTR=45
    DEFVAR=46
    DELETESETTING=47
    DIM=48
    DO=49
    DOUBLE=50
    EACH=51
    ELSE=52
    ELSEIF=53
    END_ENUM=54
    END_FUNCTION=55
    END_IF=56
    END_PROPERTY=57
    END_SELECT=58
    END_SUB=59
    END_TYPE=60
    END_WITH=61
    END=62
    ENUM=63
    EQV=64
    ERASE=65
    ERROR=66
    EVENT=67
    EXIT_DO=68
    EXIT_FOR=69
    EXIT_FUNCTION=70
    EXIT_PROPERTY=71
    EXIT_SUB=72
    FALSE=73
    FILECOPY=74
    FRIEND=75
    FOR=76
    FUNCTION=77
    GET=78
    GLOBAL=79
    GOSUB=80
    GOTO=81
    IF=82
    IMP=83
    IMPLEMENTS=84
    IN=85
    INPUT=86
    IS=87
    INTEGER=88
    KILL=89
    LOAD=90
    LOCK=91
    LONG=92
    LOOP=93
    LEN=94
    LET=95
    LIB=96
    LIKE=97
    LINE_INPUT=98
    LOCK_READ=99
    LOCK_WRITE=100
    LOCK_READ_WRITE=101
    LSET=102
    MACRO_CONST=103
    MACRO_IF=104
    MACRO_ELSEIF=105
    MACRO_ELSE=106
    MACRO_END_IF=107
    ME=108
    MID=109
    MKDIR=110
    MOD=111
    NAME=112
    NEXT=113
    NEW=114
    NOT=115
    NOTHING=116
    NULL=117
    ON=118
    ON_ERROR=119
    ON_LOCAL_ERROR=120
    OPEN=121
    OPTIONAL=122
    OPTION_BASE=123
    OPTION_EXPLICIT=124
    OPTION_COMPARE=125
    OPTION_PRIVATE_MODULE=126
    OR=127
    OUTPUT=128
    PARAMARRAY=129
    PRESERVE=130
    PRINT=131
    PRIVATE=132
    PROPERTY_GET=133
    PROPERTY_LET=134
    PROPERTY_SET=135
    PTRSAFE=136
    PUBLIC=137
    PUT=138
    RANDOM=139
    RANDOMIZE=140
    RAISEEVENT=141
    READ=142
    READ_WRITE=143
    REDIM=144
    REM=145
    RESET=146
    RESUME=147
    RETURN=148
    RMDIR=149
    RSET=150
    SAVEPICTURE=151
    SAVESETTING=152
    SEEK=153
    SELECT=154
    SENDKEYS=155
    SET=156
    SETATTR=157
    SHARED=158
    SINGLE=159
    SPC=160
    STATIC=161
    STEP=162
    STOP=163
    STRING=164
    SUB=165
    TAB=166
    TEXT=167
    THEN=168
    TIME=169
    TO=170
    TRUE=171
    TYPE=172
    TYPEOF=173
    UNLOAD=174
    UNLOCK=175
    UNTIL=176
    VARIANT=177
    VERSION=178
    WEND=179
    WHILE=180
    WIDTH=181
    WITH=182
    WITHEVENTS=183
    WRITE=184
    XOR=185
    AMPERSAND=186
    ASSIGN=187
    DIV=188
    EQ=189
    GEQ=190
    GT=191
    LEQ=192
    LPAREN=193
    LT=194
    MINUS=195
    MINUS_EQ=196
    MULT=197
    NEQ=198
    PLUS=199
    PLUS_EQ=200
    POW=201
    RPAREN=202
    L_SQUARE_BRACKET=203
    R_SQUARE_BRACKET=204
    STRINGLITERAL=205
    OCTLITERAL=206
    HEXLITERAL=207
    SHORTLITERAL=208
    INTEGERLITERAL=209
    DOUBLELITERAL=210
    DATELITERAL=211
    LINE_CONTINUATION=212
    NEWLINE=213
    REMCOMMENT=214
    COMMENT=215
    SINGLEQUOTE=216
    COLON=217
    UNDERSCORE=218
    WS=219
    IDENTIFIER=220

    def __init__(self, input:TokenStream):
        super().__init__(input)
        self.checkVersion("4.5.3")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class StartRuleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def module(self):
            return self.getTypedRuleContext(vbaParser.ModuleContext,0)


        def EOF(self):
            return self.getToken(vbaParser.EOF, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_startRule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartRule" ):
                listener.enterStartRule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartRule" ):
                listener.exitStartRule(self)




    def startRule(self):

        localctx = vbaParser.StartRuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_startRule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 294
            self.module()
            self.state = 295
            self.match(vbaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModuleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def moduleHeader(self):
            return self.getTypedRuleContext(vbaParser.ModuleHeaderContext,0)


        def moduleConfig(self):
            return self.getTypedRuleContext(vbaParser.ModuleConfigContext,0)


        def moduleAttributes(self):
            return self.getTypedRuleContext(vbaParser.ModuleAttributesContext,0)


        def moduleDeclarations(self):
            return self.getTypedRuleContext(vbaParser.ModuleDeclarationsContext,0)


        def moduleBody(self):
            return self.getTypedRuleContext(vbaParser.ModuleBodyContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_module

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule" ):
                listener.enterModule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule" ):
                listener.exitModule(self)




    def module(self):

        localctx = vbaParser.ModuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_module)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 298
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 297
                self.match(vbaParser.WS)


            self.state = 303
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 300
                    self.endOfLine() 
                self.state = 305
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)

            self.state = 313
            _la = self._input.LA(1)
            if _la==vbaParser.VERSION:
                self.state = 306
                self.moduleHeader()
                self.state = 310
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 307
                        self.endOfLine() 
                    self.state = 312
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,2,self._ctx)



            self.state = 316
            _la = self._input.LA(1)
            if _la==vbaParser.BEGIN:
                self.state = 315
                self.moduleConfig()


            self.state = 321
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 318
                    self.endOfLine() 
                self.state = 323
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

            self.state = 325
            _la = self._input.LA(1)
            if _la==vbaParser.ATTRIBUTE:
                self.state = 324
                self.moduleAttributes()


            self.state = 330
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 327
                    self.endOfLine() 
                self.state = 332
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

            self.state = 334
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 333
                self.moduleDeclarations()


            self.state = 339
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 336
                    self.endOfLine() 
                self.state = 341
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

            self.state = 343
            _la = self._input.LA(1)
            if ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (vbaParser.FRIEND - 75)) | (1 << (vbaParser.FUNCTION - 75)) | (1 << (vbaParser.GLOBAL - 75)) | (1 << (vbaParser.MACRO_CONST - 75)) | (1 << (vbaParser.MACRO_IF - 75)) | (1 << (vbaParser.PRIVATE - 75)) | (1 << (vbaParser.PROPERTY_GET - 75)) | (1 << (vbaParser.PROPERTY_LET - 75)) | (1 << (vbaParser.PROPERTY_SET - 75)) | (1 << (vbaParser.PUBLIC - 75)))) != 0) or _la==vbaParser.STATIC or _la==vbaParser.SUB:
                self.state = 342
                self.moduleBody()


            self.state = 348
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,11,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 345
                    self.endOfLine() 
                self.state = 350
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

            self.state = 352
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 351
                self.match(vbaParser.WS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModuleHeaderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VERSION(self):
            return self.getToken(vbaParser.VERSION, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def DOUBLELITERAL(self):
            return self.getToken(vbaParser.DOUBLELITERAL, 0)

        def CLASS(self):
            return self.getToken(vbaParser.CLASS, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_moduleHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleHeader" ):
                listener.enterModuleHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleHeader" ):
                listener.exitModuleHeader(self)




    def moduleHeader(self):

        localctx = vbaParser.ModuleHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_moduleHeader)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            self.match(vbaParser.VERSION)
            self.state = 355
            self.match(vbaParser.WS)
            self.state = 356
            self.match(vbaParser.DOUBLELITERAL)
            self.state = 357
            self.match(vbaParser.WS)
            self.state = 358
            self.match(vbaParser.CLASS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModuleConfigContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(vbaParser.BEGIN, 0)

        def END(self):
            return self.getToken(vbaParser.END, 0)

        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def moduleConfigElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ModuleConfigElementContext)
            else:
                return self.getTypedRuleContext(vbaParser.ModuleConfigElementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_moduleConfig

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleConfig" ):
                listener.enterModuleConfig(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleConfig" ):
                listener.exitModuleConfig(self)




    def moduleConfig(self):

        localctx = vbaParser.ModuleConfigContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_moduleConfig)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 360
            self.match(vbaParser.BEGIN)
            self.state = 364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 213)) & ~0x3f) == 0 and ((1 << (_la - 213)) & ((1 << (vbaParser.NEWLINE - 213)) | (1 << (vbaParser.REMCOMMENT - 213)) | (1 << (vbaParser.COMMENT - 213)) | (1 << (vbaParser.WS - 213)))) != 0):
                self.state = 361
                self.endOfLine()
                self.state = 366
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 368 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 367
                    self.moduleConfigElement()

                else:
                    raise NoViableAltException(self)
                self.state = 370 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

            self.state = 372
            self.match(vbaParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModuleConfigElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def literal(self):
            return self.getTypedRuleContext(vbaParser.LiteralContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_moduleConfigElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleConfigElement" ):
                listener.enterModuleConfigElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleConfigElement" ):
                listener.exitModuleConfigElement(self)




    def moduleConfigElement(self):

        localctx = vbaParser.ModuleConfigElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_moduleConfigElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 374
            self.ambiguousIdentifier()
            self.state = 376
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 375
                self.match(vbaParser.WS)


            self.state = 378
            self.match(vbaParser.EQ)
            self.state = 380
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 379
                self.match(vbaParser.WS)


            self.state = 382
            self.literal()
            self.state = 386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 213)) & ~0x3f) == 0 and ((1 << (_la - 213)) & ((1 << (vbaParser.NEWLINE - 213)) | (1 << (vbaParser.REMCOMMENT - 213)) | (1 << (vbaParser.COMMENT - 213)) | (1 << (vbaParser.WS - 213)))) != 0):
                self.state = 383
                self.endOfLine()
                self.state = 388
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModuleAttributesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributeStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.AttributeStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.AttributeStmtContext,i)


        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_moduleAttributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleAttributes" ):
                listener.enterModuleAttributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleAttributes" ):
                listener.exitModuleAttributes(self)




    def moduleAttributes(self):

        localctx = vbaParser.ModuleAttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_moduleAttributes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 395 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 389
                self.attributeStmt()
                self.state = 391 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 390
                        self.endOfLine()

                    else:
                        raise NoViableAltException(self)
                    self.state = 393 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

                self.state = 397 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==vbaParser.ATTRIBUTE):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModuleDeclarationsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def moduleDeclarationsElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ModuleDeclarationsElementContext)
            else:
                return self.getTypedRuleContext(vbaParser.ModuleDeclarationsElementContext,i)


        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_moduleDeclarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleDeclarations" ):
                listener.enterModuleDeclarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleDeclarations" ):
                listener.exitModuleDeclarations(self)




    def moduleDeclarations(self):

        localctx = vbaParser.ModuleDeclarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_moduleDeclarations)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            self.moduleDeclarationsElement()
            self.state = 409
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 401 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 400
                            self.endOfLine()

                        else:
                            raise NoViableAltException(self)
                        self.state = 403 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

                    self.state = 405
                    self.moduleDeclarationsElement() 
                self.state = 411
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

            self.state = 415
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,22,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 412
                    self.endOfLine() 
                self.state = 417
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModuleOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return vbaParser.RULE_moduleOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class OptionExplicitStmtContext(ModuleOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ModuleOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPTION_EXPLICIT(self):
            return self.getToken(vbaParser.OPTION_EXPLICIT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionExplicitStmt" ):
                listener.enterOptionExplicitStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionExplicitStmt" ):
                listener.exitOptionExplicitStmt(self)


    class OptionBaseStmtContext(ModuleOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ModuleOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPTION_BASE(self):
            return self.getToken(vbaParser.OPTION_BASE, 0)
        def WS(self):
            return self.getToken(vbaParser.WS, 0)
        def SHORTLITERAL(self):
            return self.getToken(vbaParser.SHORTLITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionBaseStmt" ):
                listener.enterOptionBaseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionBaseStmt" ):
                listener.exitOptionBaseStmt(self)


    class OptionPrivateModuleStmtContext(ModuleOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ModuleOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPTION_PRIVATE_MODULE(self):
            return self.getToken(vbaParser.OPTION_PRIVATE_MODULE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionPrivateModuleStmt" ):
                listener.enterOptionPrivateModuleStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionPrivateModuleStmt" ):
                listener.exitOptionPrivateModuleStmt(self)


    class OptionCompareStmtContext(ModuleOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ModuleOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPTION_COMPARE(self):
            return self.getToken(vbaParser.OPTION_COMPARE, 0)
        def WS(self):
            return self.getToken(vbaParser.WS, 0)
        def BINARY(self):
            return self.getToken(vbaParser.BINARY, 0)
        def TEXT(self):
            return self.getToken(vbaParser.TEXT, 0)
        def DATABASE(self):
            return self.getToken(vbaParser.DATABASE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionCompareStmt" ):
                listener.enterOptionCompareStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionCompareStmt" ):
                listener.exitOptionCompareStmt(self)



    def moduleOption(self):

        localctx = vbaParser.ModuleOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_moduleOption)
        self._la = 0 # Token type
        try:
            self.state = 426
            token = self._input.LA(1)
            if token in [vbaParser.OPTION_BASE]:
                localctx = vbaParser.OptionBaseStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 418
                self.match(vbaParser.OPTION_BASE)
                self.state = 419
                self.match(vbaParser.WS)
                self.state = 420
                self.match(vbaParser.SHORTLITERAL)

            elif token in [vbaParser.OPTION_COMPARE]:
                localctx = vbaParser.OptionCompareStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 421
                self.match(vbaParser.OPTION_COMPARE)
                self.state = 422
                self.match(vbaParser.WS)
                self.state = 423
                _la = self._input.LA(1)
                if not(_la==vbaParser.BINARY or _la==vbaParser.DATABASE or _la==vbaParser.TEXT):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()

            elif token in [vbaParser.OPTION_EXPLICIT]:
                localctx = vbaParser.OptionExplicitStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 424
                self.match(vbaParser.OPTION_EXPLICIT)

            elif token in [vbaParser.OPTION_PRIVATE_MODULE]:
                localctx = vbaParser.OptionPrivateModuleStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 425
                self.match(vbaParser.OPTION_PRIVATE_MODULE)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModuleDeclarationsElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comment(self):
            return self.getTypedRuleContext(vbaParser.CommentContext,0)


        def declareStmt(self):
            return self.getTypedRuleContext(vbaParser.DeclareStmtContext,0)


        def enumerationStmt(self):
            return self.getTypedRuleContext(vbaParser.EnumerationStmtContext,0)


        def eventStmt(self):
            return self.getTypedRuleContext(vbaParser.EventStmtContext,0)


        def constStmt(self):
            return self.getTypedRuleContext(vbaParser.ConstStmtContext,0)


        def implementsStmt(self):
            return self.getTypedRuleContext(vbaParser.ImplementsStmtContext,0)


        def variableStmt(self):
            return self.getTypedRuleContext(vbaParser.VariableStmtContext,0)


        def moduleOption(self):
            return self.getTypedRuleContext(vbaParser.ModuleOptionContext,0)


        def typeStmt(self):
            return self.getTypedRuleContext(vbaParser.TypeStmtContext,0)


        def macroStmt(self):
            return self.getTypedRuleContext(vbaParser.MacroStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_moduleDeclarationsElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleDeclarationsElement" ):
                listener.enterModuleDeclarationsElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleDeclarationsElement" ):
                listener.exitModuleDeclarationsElement(self)




    def moduleDeclarationsElement(self):

        localctx = vbaParser.ModuleDeclarationsElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_moduleDeclarationsElement)
        try:
            self.state = 438
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 428
                self.comment()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 429
                self.declareStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 430
                self.enumerationStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 431
                self.eventStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 432
                self.constStmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 433
                self.implementsStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 434
                self.variableStmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 435
                self.moduleOption()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 436
                self.typeStmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 437
                self.macroStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MacroStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def macroConstStmt(self):
            return self.getTypedRuleContext(vbaParser.MacroConstStmtContext,0)


        def macroIfThenElseStmt(self):
            return self.getTypedRuleContext(vbaParser.MacroIfThenElseStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_macroStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroStmt" ):
                listener.enterMacroStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroStmt" ):
                listener.exitMacroStmt(self)




    def macroStmt(self):

        localctx = vbaParser.MacroStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_macroStmt)
        try:
            self.state = 442
            token = self._input.LA(1)
            if token in [vbaParser.MACRO_CONST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 440
                self.macroConstStmt()

            elif token in [vbaParser.MACRO_IF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 441
                self.macroIfThenElseStmt()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModuleBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def moduleBodyElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ModuleBodyElementContext)
            else:
                return self.getTypedRuleContext(vbaParser.ModuleBodyElementContext,i)


        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_moduleBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleBody" ):
                listener.enterModuleBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleBody" ):
                listener.exitModuleBody(self)




    def moduleBody(self):

        localctx = vbaParser.ModuleBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_moduleBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 444
            self.moduleBodyElement()
            self.state = 454
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 446 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 445
                        self.endOfLine()
                        self.state = 448 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (((((_la - 213)) & ~0x3f) == 0 and ((1 << (_la - 213)) & ((1 << (vbaParser.NEWLINE - 213)) | (1 << (vbaParser.REMCOMMENT - 213)) | (1 << (vbaParser.COMMENT - 213)) | (1 << (vbaParser.WS - 213)))) != 0)):
                            break

                    self.state = 450
                    self.moduleBodyElement() 
                self.state = 456
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

            self.state = 460
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 457
                    self.endOfLine() 
                self.state = 462
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModuleBodyElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionStmt(self):
            return self.getTypedRuleContext(vbaParser.FunctionStmtContext,0)


        def propertyGetStmt(self):
            return self.getTypedRuleContext(vbaParser.PropertyGetStmtContext,0)


        def propertySetStmt(self):
            return self.getTypedRuleContext(vbaParser.PropertySetStmtContext,0)


        def propertyLetStmt(self):
            return self.getTypedRuleContext(vbaParser.PropertyLetStmtContext,0)


        def subStmt(self):
            return self.getTypedRuleContext(vbaParser.SubStmtContext,0)


        def macroStmt(self):
            return self.getTypedRuleContext(vbaParser.MacroStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_moduleBodyElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleBodyElement" ):
                listener.enterModuleBodyElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleBodyElement" ):
                listener.exitModuleBodyElement(self)




    def moduleBodyElement(self):

        localctx = vbaParser.ModuleBodyElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_moduleBodyElement)
        try:
            self.state = 469
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 463
                self.functionStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 464
                self.propertyGetStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 465
                self.propertySetStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 466
                self.propertyLetStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 467
                self.subStmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 468
                self.macroStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributeStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTRIBUTE(self):
            return self.getToken(vbaParser.ATTRIBUTE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(vbaParser.ImplicitCallStmt_InStmtContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.LiteralContext)
            else:
                return self.getTypedRuleContext(vbaParser.LiteralContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_attributeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeStmt" ):
                listener.enterAttributeStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeStmt" ):
                listener.exitAttributeStmt(self)




    def attributeStmt(self):

        localctx = vbaParser.AttributeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_attributeStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 471
            self.match(vbaParser.ATTRIBUTE)
            self.state = 472
            self.match(vbaParser.WS)
            self.state = 473
            self.implicitCallStmt_InStmt()
            self.state = 475
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 474
                self.match(vbaParser.WS)


            self.state = 477
            self.match(vbaParser.EQ)
            self.state = 479
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 478
                self.match(vbaParser.WS)


            self.state = 481
            self.literal()
            self.state = 492
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 483
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 482
                        self.match(vbaParser.WS)


                    self.state = 485
                    self.match(vbaParser.T__0)
                    self.state = 487
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 486
                        self.match(vbaParser.WS)


                    self.state = 489
                    self.literal() 
                self.state = 494
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.BlockStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.BlockStmtContext,i)


        def endOfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfStatementContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfStatementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = vbaParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 495
            self.blockStmt()
            self.state = 501
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,35,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 496
                    self.endOfStatement()
                    self.state = 497
                    self.blockStmt() 
                self.state = 503
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

            self.state = 504
            self.endOfStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lineLabel(self):
            return self.getTypedRuleContext(vbaParser.LineLabelContext,0)


        def appactivateStmt(self):
            return self.getTypedRuleContext(vbaParser.AppactivateStmtContext,0)


        def attributeStmt(self):
            return self.getTypedRuleContext(vbaParser.AttributeStmtContext,0)


        def beepStmt(self):
            return self.getTypedRuleContext(vbaParser.BeepStmtContext,0)


        def chdirStmt(self):
            return self.getTypedRuleContext(vbaParser.ChdirStmtContext,0)


        def chdriveStmt(self):
            return self.getTypedRuleContext(vbaParser.ChdriveStmtContext,0)


        def closeStmt(self):
            return self.getTypedRuleContext(vbaParser.CloseStmtContext,0)


        def constStmt(self):
            return self.getTypedRuleContext(vbaParser.ConstStmtContext,0)


        def dateStmt(self):
            return self.getTypedRuleContext(vbaParser.DateStmtContext,0)


        def deleteSettingStmt(self):
            return self.getTypedRuleContext(vbaParser.DeleteSettingStmtContext,0)


        def deftypeStmt(self):
            return self.getTypedRuleContext(vbaParser.DeftypeStmtContext,0)


        def doLoopStmt(self):
            return self.getTypedRuleContext(vbaParser.DoLoopStmtContext,0)


        def endStmt(self):
            return self.getTypedRuleContext(vbaParser.EndStmtContext,0)


        def eraseStmt(self):
            return self.getTypedRuleContext(vbaParser.EraseStmtContext,0)


        def errorStmt(self):
            return self.getTypedRuleContext(vbaParser.ErrorStmtContext,0)


        def exitStmt(self):
            return self.getTypedRuleContext(vbaParser.ExitStmtContext,0)


        def explicitCallStmt(self):
            return self.getTypedRuleContext(vbaParser.ExplicitCallStmtContext,0)


        def filecopyStmt(self):
            return self.getTypedRuleContext(vbaParser.FilecopyStmtContext,0)


        def forEachStmt(self):
            return self.getTypedRuleContext(vbaParser.ForEachStmtContext,0)


        def forNextStmt(self):
            return self.getTypedRuleContext(vbaParser.ForNextStmtContext,0)


        def getStmt(self):
            return self.getTypedRuleContext(vbaParser.GetStmtContext,0)


        def goSubStmt(self):
            return self.getTypedRuleContext(vbaParser.GoSubStmtContext,0)


        def goToStmt(self):
            return self.getTypedRuleContext(vbaParser.GoToStmtContext,0)


        def ifThenElseStmt(self):
            return self.getTypedRuleContext(vbaParser.IfThenElseStmtContext,0)


        def implementsStmt(self):
            return self.getTypedRuleContext(vbaParser.ImplementsStmtContext,0)


        def inputStmt(self):
            return self.getTypedRuleContext(vbaParser.InputStmtContext,0)


        def killStmt(self):
            return self.getTypedRuleContext(vbaParser.KillStmtContext,0)


        def letStmt(self):
            return self.getTypedRuleContext(vbaParser.LetStmtContext,0)


        def lineInputStmt(self):
            return self.getTypedRuleContext(vbaParser.LineInputStmtContext,0)


        def loadStmt(self):
            return self.getTypedRuleContext(vbaParser.LoadStmtContext,0)


        def lockStmt(self):
            return self.getTypedRuleContext(vbaParser.LockStmtContext,0)


        def lsetStmt(self):
            return self.getTypedRuleContext(vbaParser.LsetStmtContext,0)


        def macroStmt(self):
            return self.getTypedRuleContext(vbaParser.MacroStmtContext,0)


        def midStmt(self):
            return self.getTypedRuleContext(vbaParser.MidStmtContext,0)


        def mkdirStmt(self):
            return self.getTypedRuleContext(vbaParser.MkdirStmtContext,0)


        def nameStmt(self):
            return self.getTypedRuleContext(vbaParser.NameStmtContext,0)


        def onErrorStmt(self):
            return self.getTypedRuleContext(vbaParser.OnErrorStmtContext,0)


        def onGoToStmt(self):
            return self.getTypedRuleContext(vbaParser.OnGoToStmtContext,0)


        def onGoSubStmt(self):
            return self.getTypedRuleContext(vbaParser.OnGoSubStmtContext,0)


        def openStmt(self):
            return self.getTypedRuleContext(vbaParser.OpenStmtContext,0)


        def printStmt(self):
            return self.getTypedRuleContext(vbaParser.PrintStmtContext,0)


        def putStmt(self):
            return self.getTypedRuleContext(vbaParser.PutStmtContext,0)


        def raiseEventStmt(self):
            return self.getTypedRuleContext(vbaParser.RaiseEventStmtContext,0)


        def randomizeStmt(self):
            return self.getTypedRuleContext(vbaParser.RandomizeStmtContext,0)


        def redimStmt(self):
            return self.getTypedRuleContext(vbaParser.RedimStmtContext,0)


        def resetStmt(self):
            return self.getTypedRuleContext(vbaParser.ResetStmtContext,0)


        def resumeStmt(self):
            return self.getTypedRuleContext(vbaParser.ResumeStmtContext,0)


        def returnStmt(self):
            return self.getTypedRuleContext(vbaParser.ReturnStmtContext,0)


        def rmdirStmt(self):
            return self.getTypedRuleContext(vbaParser.RmdirStmtContext,0)


        def rsetStmt(self):
            return self.getTypedRuleContext(vbaParser.RsetStmtContext,0)


        def savepictureStmt(self):
            return self.getTypedRuleContext(vbaParser.SavepictureStmtContext,0)


        def saveSettingStmt(self):
            return self.getTypedRuleContext(vbaParser.SaveSettingStmtContext,0)


        def seekStmt(self):
            return self.getTypedRuleContext(vbaParser.SeekStmtContext,0)


        def selectCaseStmt(self):
            return self.getTypedRuleContext(vbaParser.SelectCaseStmtContext,0)


        def sendkeysStmt(self):
            return self.getTypedRuleContext(vbaParser.SendkeysStmtContext,0)


        def setattrStmt(self):
            return self.getTypedRuleContext(vbaParser.SetattrStmtContext,0)


        def setStmt(self):
            return self.getTypedRuleContext(vbaParser.SetStmtContext,0)


        def stopStmt(self):
            return self.getTypedRuleContext(vbaParser.StopStmtContext,0)


        def timeStmt(self):
            return self.getTypedRuleContext(vbaParser.TimeStmtContext,0)


        def unloadStmt(self):
            return self.getTypedRuleContext(vbaParser.UnloadStmtContext,0)


        def unlockStmt(self):
            return self.getTypedRuleContext(vbaParser.UnlockStmtContext,0)


        def variableStmt(self):
            return self.getTypedRuleContext(vbaParser.VariableStmtContext,0)


        def whileWendStmt(self):
            return self.getTypedRuleContext(vbaParser.WhileWendStmtContext,0)


        def widthStmt(self):
            return self.getTypedRuleContext(vbaParser.WidthStmtContext,0)


        def withStmt(self):
            return self.getTypedRuleContext(vbaParser.WithStmtContext,0)


        def writeStmt(self):
            return self.getTypedRuleContext(vbaParser.WriteStmtContext,0)


        def implicitCallStmt_InBlock(self):
            return self.getTypedRuleContext(vbaParser.ImplicitCallStmt_InBlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_blockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStmt" ):
                listener.enterBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStmt" ):
                listener.exitBlockStmt(self)




    def blockStmt(self):

        localctx = vbaParser.BlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_blockStmt)
        try:
            self.state = 573
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 506
                self.lineLabel()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 507
                self.appactivateStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 508
                self.attributeStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 509
                self.beepStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 510
                self.chdirStmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 511
                self.chdriveStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 512
                self.closeStmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 513
                self.constStmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 514
                self.dateStmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 515
                self.deleteSettingStmt()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 516
                self.deftypeStmt()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 517
                self.doLoopStmt()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 518
                self.endStmt()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 519
                self.eraseStmt()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 520
                self.errorStmt()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 521
                self.exitStmt()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 522
                self.explicitCallStmt()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 523
                self.filecopyStmt()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 524
                self.forEachStmt()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 525
                self.forNextStmt()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 526
                self.getStmt()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 527
                self.goSubStmt()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 528
                self.goToStmt()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 529
                self.ifThenElseStmt()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 530
                self.implementsStmt()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 531
                self.inputStmt()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 532
                self.killStmt()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 533
                self.letStmt()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 534
                self.lineInputStmt()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 535
                self.loadStmt()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 536
                self.lockStmt()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 537
                self.lsetStmt()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 538
                self.macroStmt()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 539
                self.midStmt()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 540
                self.mkdirStmt()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 541
                self.nameStmt()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 542
                self.onErrorStmt()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 543
                self.onGoToStmt()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 544
                self.onGoSubStmt()
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 545
                self.openStmt()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 546
                self.printStmt()
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 547
                self.putStmt()
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 548
                self.raiseEventStmt()
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 549
                self.randomizeStmt()
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 550
                self.redimStmt()
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 551
                self.resetStmt()
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 552
                self.resumeStmt()
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 553
                self.returnStmt()
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 554
                self.rmdirStmt()
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 555
                self.rsetStmt()
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 556
                self.savepictureStmt()
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 557
                self.saveSettingStmt()
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 558
                self.seekStmt()
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 559
                self.selectCaseStmt()
                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 560
                self.sendkeysStmt()
                pass

            elif la_ == 56:
                self.enterOuterAlt(localctx, 56)
                self.state = 561
                self.setattrStmt()
                pass

            elif la_ == 57:
                self.enterOuterAlt(localctx, 57)
                self.state = 562
                self.setStmt()
                pass

            elif la_ == 58:
                self.enterOuterAlt(localctx, 58)
                self.state = 563
                self.stopStmt()
                pass

            elif la_ == 59:
                self.enterOuterAlt(localctx, 59)
                self.state = 564
                self.timeStmt()
                pass

            elif la_ == 60:
                self.enterOuterAlt(localctx, 60)
                self.state = 565
                self.unloadStmt()
                pass

            elif la_ == 61:
                self.enterOuterAlt(localctx, 61)
                self.state = 566
                self.unlockStmt()
                pass

            elif la_ == 62:
                self.enterOuterAlt(localctx, 62)
                self.state = 567
                self.variableStmt()
                pass

            elif la_ == 63:
                self.enterOuterAlt(localctx, 63)
                self.state = 568
                self.whileWendStmt()
                pass

            elif la_ == 64:
                self.enterOuterAlt(localctx, 64)
                self.state = 569
                self.widthStmt()
                pass

            elif la_ == 65:
                self.enterOuterAlt(localctx, 65)
                self.state = 570
                self.withStmt()
                pass

            elif la_ == 66:
                self.enterOuterAlt(localctx, 66)
                self.state = 571
                self.writeStmt()
                pass

            elif la_ == 67:
                self.enterOuterAlt(localctx, 67)
                self.state = 572
                self.implicitCallStmt_InBlock()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AppactivateStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def APPACTIVATE(self):
            return self.getToken(vbaParser.APPACTIVATE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_appactivateStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAppactivateStmt" ):
                listener.enterAppactivateStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAppactivateStmt" ):
                listener.exitAppactivateStmt(self)




    def appactivateStmt(self):

        localctx = vbaParser.AppactivateStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_appactivateStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 575
            self.match(vbaParser.APPACTIVATE)
            self.state = 576
            self.match(vbaParser.WS)
            self.state = 577
            self.valueStmt(0)
            self.state = 586
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.state = 579
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 578
                    self.match(vbaParser.WS)


                self.state = 581
                self.match(vbaParser.T__0)
                self.state = 583
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 582
                    self.match(vbaParser.WS)


                self.state = 585
                self.valueStmt(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BeepStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEEP(self):
            return self.getToken(vbaParser.BEEP, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_beepStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBeepStmt" ):
                listener.enterBeepStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBeepStmt" ):
                listener.exitBeepStmt(self)




    def beepStmt(self):

        localctx = vbaParser.BeepStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_beepStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 588
            self.match(vbaParser.BEEP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ChdirStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHDIR(self):
            return self.getToken(vbaParser.CHDIR, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_chdirStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChdirStmt" ):
                listener.enterChdirStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChdirStmt" ):
                listener.exitChdirStmt(self)




    def chdirStmt(self):

        localctx = vbaParser.ChdirStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_chdirStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 590
            self.match(vbaParser.CHDIR)
            self.state = 591
            self.match(vbaParser.WS)
            self.state = 592
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ChdriveStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHDRIVE(self):
            return self.getToken(vbaParser.CHDRIVE, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_chdriveStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChdriveStmt" ):
                listener.enterChdriveStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChdriveStmt" ):
                listener.exitChdriveStmt(self)




    def chdriveStmt(self):

        localctx = vbaParser.ChdriveStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_chdriveStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 594
            self.match(vbaParser.CHDRIVE)
            self.state = 595
            self.match(vbaParser.WS)
            self.state = 596
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CloseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLOSE(self):
            return self.getToken(vbaParser.CLOSE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def fileNumber(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.FileNumberContext)
            else:
                return self.getTypedRuleContext(vbaParser.FileNumberContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_closeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCloseStmt" ):
                listener.enterCloseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCloseStmt" ):
                listener.exitCloseStmt(self)




    def closeStmt(self):

        localctx = vbaParser.CloseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_closeStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 598
            self.match(vbaParser.CLOSE)
            self.state = 614
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 599
                self.match(vbaParser.WS)
                self.state = 600
                self.fileNumber()
                self.state = 611
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,42,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 602
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 601
                            self.match(vbaParser.WS)


                        self.state = 604
                        self.match(vbaParser.T__0)
                        self.state = 606
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 605
                            self.match(vbaParser.WS)


                        self.state = 608
                        self.fileNumber() 
                    self.state = 613
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,42,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(vbaParser.CONST, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def constSubStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ConstSubStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ConstSubStmtContext,i)


        def visibility(self):
            return self.getTypedRuleContext(vbaParser.VisibilityContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_constStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstStmt" ):
                listener.enterConstStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstStmt" ):
                listener.exitConstStmt(self)




    def constStmt(self):

        localctx = vbaParser.ConstStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_constStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 619
            _la = self._input.LA(1)
            if ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (vbaParser.FRIEND - 75)) | (1 << (vbaParser.GLOBAL - 75)) | (1 << (vbaParser.PRIVATE - 75)) | (1 << (vbaParser.PUBLIC - 75)))) != 0):
                self.state = 616
                self.visibility()
                self.state = 617
                self.match(vbaParser.WS)


            self.state = 621
            self.match(vbaParser.CONST)
            self.state = 622
            self.match(vbaParser.WS)
            self.state = 623
            self.constSubStmt()
            self.state = 634
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 625
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 624
                        self.match(vbaParser.WS)


                    self.state = 627
                    self.match(vbaParser.T__0)
                    self.state = 629
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 628
                        self.match(vbaParser.WS)


                    self.state = 631
                    self.constSubStmt() 
                self.state = 636
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstSubStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def typeHint(self):
            return self.getTypedRuleContext(vbaParser.TypeHintContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def asTypeClause(self):
            return self.getTypedRuleContext(vbaParser.AsTypeClauseContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_constSubStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstSubStmt" ):
                listener.enterConstSubStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstSubStmt" ):
                listener.exitConstSubStmt(self)




    def constSubStmt(self):

        localctx = vbaParser.ConstSubStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_constSubStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 637
            self.ambiguousIdentifier()
            self.state = 639
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__2) | (1 << vbaParser.T__4) | (1 << vbaParser.T__5) | (1 << vbaParser.T__6) | (1 << vbaParser.T__7))) != 0) or _la==vbaParser.AMPERSAND:
                self.state = 638
                self.typeHint()


            self.state = 643
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 641
                self.match(vbaParser.WS)
                self.state = 642
                self.asTypeClause()


            self.state = 646
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 645
                self.match(vbaParser.WS)


            self.state = 648
            self.match(vbaParser.EQ)
            self.state = 650
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 649
                self.match(vbaParser.WS)


            self.state = 652
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DateStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(vbaParser.DATE, 0)

        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_dateStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateStmt" ):
                listener.enterDateStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateStmt" ):
                listener.exitDateStmt(self)




    def dateStmt(self):

        localctx = vbaParser.DateStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_dateStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 654
            self.match(vbaParser.DATE)
            self.state = 656
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 655
                self.match(vbaParser.WS)


            self.state = 658
            self.match(vbaParser.EQ)
            self.state = 660
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 659
                self.match(vbaParser.WS)


            self.state = 662
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclareStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(vbaParser.DECLARE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def LIB(self):
            return self.getToken(vbaParser.LIB, 0)

        def STRINGLITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.STRINGLITERAL)
            else:
                return self.getToken(vbaParser.STRINGLITERAL, i)

        def SUB(self):
            return self.getToken(vbaParser.SUB, 0)

        def visibility(self):
            return self.getTypedRuleContext(vbaParser.VisibilityContext,0)


        def PTRSAFE(self):
            return self.getToken(vbaParser.PTRSAFE, 0)

        def typeHint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.TypeHintContext)
            else:
                return self.getTypedRuleContext(vbaParser.TypeHintContext,i)


        def ALIAS(self):
            return self.getToken(vbaParser.ALIAS, 0)

        def argList(self):
            return self.getTypedRuleContext(vbaParser.ArgListContext,0)


        def asTypeClause(self):
            return self.getTypedRuleContext(vbaParser.AsTypeClauseContext,0)


        def FUNCTION(self):
            return self.getToken(vbaParser.FUNCTION, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_declareStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclareStmt" ):
                listener.enterDeclareStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclareStmt" ):
                listener.exitDeclareStmt(self)




    def declareStmt(self):

        localctx = vbaParser.DeclareStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_declareStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 667
            _la = self._input.LA(1)
            if ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (vbaParser.FRIEND - 75)) | (1 << (vbaParser.GLOBAL - 75)) | (1 << (vbaParser.PRIVATE - 75)) | (1 << (vbaParser.PUBLIC - 75)))) != 0):
                self.state = 664
                self.visibility()
                self.state = 665
                self.match(vbaParser.WS)


            self.state = 669
            self.match(vbaParser.DECLARE)
            self.state = 670
            self.match(vbaParser.WS)
            self.state = 673
            _la = self._input.LA(1)
            if _la==vbaParser.PTRSAFE:
                self.state = 671
                self.match(vbaParser.PTRSAFE)
                self.state = 672
                self.match(vbaParser.WS)


            self.state = 680
            token = self._input.LA(1)
            if token in [vbaParser.FUNCTION]:
                self.state = 675
                self.match(vbaParser.FUNCTION)
                self.state = 677
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__2) | (1 << vbaParser.T__4) | (1 << vbaParser.T__5) | (1 << vbaParser.T__6) | (1 << vbaParser.T__7))) != 0) or _la==vbaParser.AMPERSAND:
                    self.state = 676
                    self.typeHint()



            elif token in [vbaParser.SUB]:
                self.state = 679
                self.match(vbaParser.SUB)

            else:
                raise NoViableAltException(self)

            self.state = 682
            self.match(vbaParser.WS)
            self.state = 683
            self.ambiguousIdentifier()
            self.state = 685
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__2) | (1 << vbaParser.T__4) | (1 << vbaParser.T__5) | (1 << vbaParser.T__6) | (1 << vbaParser.T__7))) != 0) or _la==vbaParser.AMPERSAND:
                self.state = 684
                self.typeHint()


            self.state = 687
            self.match(vbaParser.WS)
            self.state = 688
            self.match(vbaParser.LIB)
            self.state = 689
            self.match(vbaParser.WS)
            self.state = 690
            self.match(vbaParser.STRINGLITERAL)
            self.state = 695
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 691
                self.match(vbaParser.WS)
                self.state = 692
                self.match(vbaParser.ALIAS)
                self.state = 693
                self.match(vbaParser.WS)
                self.state = 694
                self.match(vbaParser.STRINGLITERAL)


            self.state = 701
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.state = 698
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 697
                    self.match(vbaParser.WS)


                self.state = 700
                self.argList()


            self.state = 705
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.state = 703
                self.match(vbaParser.WS)
                self.state = 704
                self.asTypeClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeftypeStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def letterrange(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.LetterrangeContext)
            else:
                return self.getTypedRuleContext(vbaParser.LetterrangeContext,i)


        def DEFBOOL(self):
            return self.getToken(vbaParser.DEFBOOL, 0)

        def DEFBYTE(self):
            return self.getToken(vbaParser.DEFBYTE, 0)

        def DEFINT(self):
            return self.getToken(vbaParser.DEFINT, 0)

        def DEFLNG(self):
            return self.getToken(vbaParser.DEFLNG, 0)

        def DEFCUR(self):
            return self.getToken(vbaParser.DEFCUR, 0)

        def DEFSNG(self):
            return self.getToken(vbaParser.DEFSNG, 0)

        def DEFDBL(self):
            return self.getToken(vbaParser.DEFDBL, 0)

        def DEFDEC(self):
            return self.getToken(vbaParser.DEFDEC, 0)

        def DEFDATE(self):
            return self.getToken(vbaParser.DEFDATE, 0)

        def DEFSTR(self):
            return self.getToken(vbaParser.DEFSTR, 0)

        def DEFOBJ(self):
            return self.getToken(vbaParser.DEFOBJ, 0)

        def DEFVAR(self):
            return self.getToken(vbaParser.DEFVAR, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_deftypeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeftypeStmt" ):
                listener.enterDeftypeStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeftypeStmt" ):
                listener.exitDeftypeStmt(self)




    def deftypeStmt(self):

        localctx = vbaParser.DeftypeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_deftypeStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.DEFBOOL) | (1 << vbaParser.DEFBYTE) | (1 << vbaParser.DEFDATE) | (1 << vbaParser.DEFDBL) | (1 << vbaParser.DEFDEC) | (1 << vbaParser.DEFCUR) | (1 << vbaParser.DEFINT) | (1 << vbaParser.DEFLNG) | (1 << vbaParser.DEFOBJ) | (1 << vbaParser.DEFSNG) | (1 << vbaParser.DEFSTR) | (1 << vbaParser.DEFVAR))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
            self.state = 708
            self.match(vbaParser.WS)
            self.state = 709
            self.letterrange()
            self.state = 720
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 711
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 710
                        self.match(vbaParser.WS)


                    self.state = 713
                    self.match(vbaParser.T__0)
                    self.state = 715
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 714
                        self.match(vbaParser.WS)


                    self.state = 717
                    self.letterrange() 
                self.state = 722
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeleteSettingStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETESETTING(self):
            return self.getToken(vbaParser.DELETESETTING, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_deleteSettingStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteSettingStmt" ):
                listener.enterDeleteSettingStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteSettingStmt" ):
                listener.exitDeleteSettingStmt(self)




    def deleteSettingStmt(self):

        localctx = vbaParser.DeleteSettingStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_deleteSettingStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 723
            self.match(vbaParser.DELETESETTING)
            self.state = 724
            self.match(vbaParser.WS)
            self.state = 725
            self.valueStmt(0)
            self.state = 727
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 726
                self.match(vbaParser.WS)


            self.state = 729
            self.match(vbaParser.T__0)
            self.state = 731
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 730
                self.match(vbaParser.WS)


            self.state = 733
            self.valueStmt(0)
            self.state = 742
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 735
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 734
                    self.match(vbaParser.WS)


                self.state = 737
                self.match(vbaParser.T__0)
                self.state = 739
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 738
                    self.match(vbaParser.WS)


                self.state = 741
                self.valueStmt(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DoLoopStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(vbaParser.DO, 0)

        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def LOOP(self):
            return self.getToken(vbaParser.LOOP, 0)

        def block(self):
            return self.getTypedRuleContext(vbaParser.BlockContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def WHILE(self):
            return self.getToken(vbaParser.WHILE, 0)

        def UNTIL(self):
            return self.getToken(vbaParser.UNTIL, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_doLoopStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoLoopStmt" ):
                listener.enterDoLoopStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoLoopStmt" ):
                listener.exitDoLoopStmt(self)




    def doLoopStmt(self):

        localctx = vbaParser.DoLoopStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_doLoopStmt)
        self._la = 0 # Token type
        try:
            self.state = 771
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 744
                self.match(vbaParser.DO)
                self.state = 745
                self.endOfStatement()
                self.state = 747
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
                if la_ == 1:
                    self.state = 746
                    self.block()


                self.state = 749
                self.match(vbaParser.LOOP)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 751
                self.match(vbaParser.DO)
                self.state = 752
                self.match(vbaParser.WS)
                self.state = 753
                _la = self._input.LA(1)
                if not(_la==vbaParser.UNTIL or _la==vbaParser.WHILE):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()
                self.state = 754
                self.match(vbaParser.WS)
                self.state = 755
                self.valueStmt(0)
                self.state = 756
                self.endOfStatement()
                self.state = 758
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
                if la_ == 1:
                    self.state = 757
                    self.block()


                self.state = 760
                self.match(vbaParser.LOOP)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 762
                self.match(vbaParser.DO)
                self.state = 763
                self.endOfStatement()
                self.state = 764
                self.block()
                self.state = 765
                self.match(vbaParser.LOOP)
                self.state = 766
                self.match(vbaParser.WS)
                self.state = 767
                _la = self._input.LA(1)
                if not(_la==vbaParser.UNTIL or _la==vbaParser.WHILE):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()
                self.state = 768
                self.match(vbaParser.WS)
                self.state = 769
                self.valueStmt(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EndStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(vbaParser.END, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_endStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndStmt" ):
                listener.enterEndStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndStmt" ):
                listener.exitEndStmt(self)




    def endStmt(self):

        localctx = vbaParser.EndStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_endStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 773
            self.match(vbaParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumerationStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(vbaParser.ENUM, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def END_ENUM(self):
            return self.getToken(vbaParser.END_ENUM, 0)

        def visibility(self):
            return self.getTypedRuleContext(vbaParser.VisibilityContext,0)


        def enumerationStmt_Constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EnumerationStmt_ConstantContext)
            else:
                return self.getTypedRuleContext(vbaParser.EnumerationStmt_ConstantContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_enumerationStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerationStmt" ):
                listener.enterEnumerationStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerationStmt" ):
                listener.exitEnumerationStmt(self)




    def enumerationStmt(self):

        localctx = vbaParser.EnumerationStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_enumerationStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            _la = self._input.LA(1)
            if ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (vbaParser.FRIEND - 75)) | (1 << (vbaParser.GLOBAL - 75)) | (1 << (vbaParser.PRIVATE - 75)) | (1 << (vbaParser.PUBLIC - 75)))) != 0):
                self.state = 775
                self.visibility()
                self.state = 776
                self.match(vbaParser.WS)


            self.state = 780
            self.match(vbaParser.ENUM)
            self.state = 781
            self.match(vbaParser.WS)
            self.state = 782
            self.ambiguousIdentifier()
            self.state = 783
            self.endOfStatement()
            self.state = 787
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST) | (1 << vbaParser.DATABASE) | (1 << vbaParser.DATE) | (1 << vbaParser.DECLARE) | (1 << vbaParser.DEFBOOL) | (1 << vbaParser.DEFBYTE) | (1 << vbaParser.DEFDATE) | (1 << vbaParser.DEFDBL) | (1 << vbaParser.DEFDEC) | (1 << vbaParser.DEFCUR) | (1 << vbaParser.DEFINT) | (1 << vbaParser.DEFLNG) | (1 << vbaParser.DEFOBJ) | (1 << vbaParser.DEFSNG) | (1 << vbaParser.DEFSTR) | (1 << vbaParser.DEFVAR) | (1 << vbaParser.DELETESETTING) | (1 << vbaParser.DIM) | (1 << vbaParser.DO) | (1 << vbaParser.DOUBLE) | (1 << vbaParser.EACH) | (1 << vbaParser.ELSE) | (1 << vbaParser.ELSEIF) | (1 << vbaParser.END) | (1 << vbaParser.ENUM))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)) | (1 << (vbaParser.LIB - 64)) | (1 << (vbaParser.LIKE - 64)) | (1 << (vbaParser.LSET - 64)) | (1 << (vbaParser.ME - 64)) | (1 << (vbaParser.MID - 64)) | (1 << (vbaParser.MKDIR - 64)) | (1 << (vbaParser.MOD - 64)) | (1 << (vbaParser.NAME - 64)) | (1 << (vbaParser.NEXT - 64)) | (1 << (vbaParser.NEW - 64)) | (1 << (vbaParser.NOT - 64)) | (1 << (vbaParser.NOTHING - 64)) | (1 << (vbaParser.NULL - 64)) | (1 << (vbaParser.ON - 64)) | (1 << (vbaParser.OPEN - 64)) | (1 << (vbaParser.OPTIONAL - 64)) | (1 << (vbaParser.OR - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)) | (1 << (vbaParser.SPC - 128)) | (1 << (vbaParser.STATIC - 128)) | (1 << (vbaParser.STEP - 128)) | (1 << (vbaParser.STOP - 128)) | (1 << (vbaParser.STRING - 128)) | (1 << (vbaParser.SUB - 128)) | (1 << (vbaParser.TAB - 128)) | (1 << (vbaParser.TEXT - 128)) | (1 << (vbaParser.THEN - 128)) | (1 << (vbaParser.TIME - 128)) | (1 << (vbaParser.TO - 128)) | (1 << (vbaParser.TRUE - 128)) | (1 << (vbaParser.TYPE - 128)) | (1 << (vbaParser.TYPEOF - 128)) | (1 << (vbaParser.UNLOAD - 128)) | (1 << (vbaParser.UNLOCK - 128)) | (1 << (vbaParser.UNTIL - 128)) | (1 << (vbaParser.VARIANT - 128)) | (1 << (vbaParser.VERSION - 128)) | (1 << (vbaParser.WEND - 128)) | (1 << (vbaParser.WHILE - 128)) | (1 << (vbaParser.WIDTH - 128)) | (1 << (vbaParser.WITH - 128)) | (1 << (vbaParser.WITHEVENTS - 128)) | (1 << (vbaParser.WRITE - 128)) | (1 << (vbaParser.XOR - 128)))) != 0) or _la==vbaParser.IDENTIFIER:
                self.state = 784
                self.enumerationStmt_Constant()
                self.state = 789
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 790
            self.match(vbaParser.END_ENUM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumerationStmt_ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_enumerationStmt_Constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerationStmt_Constant" ):
                listener.enterEnumerationStmt_Constant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerationStmt_Constant" ):
                listener.exitEnumerationStmt_Constant(self)




    def enumerationStmt_Constant(self):

        localctx = vbaParser.EnumerationStmt_ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_enumerationStmt_Constant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 792
            self.ambiguousIdentifier()
            self.state = 801
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.state = 794
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 793
                    self.match(vbaParser.WS)


                self.state = 796
                self.match(vbaParser.EQ)
                self.state = 798
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 797
                    self.match(vbaParser.WS)


                self.state = 800
                self.valueStmt(0)


            self.state = 803
            self.endOfStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EraseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERASE(self):
            return self.getToken(vbaParser.ERASE, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_eraseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEraseStmt" ):
                listener.enterEraseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEraseStmt" ):
                listener.exitEraseStmt(self)




    def eraseStmt(self):

        localctx = vbaParser.EraseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_eraseStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 805
            self.match(vbaParser.ERASE)
            self.state = 806
            self.match(vbaParser.WS)
            self.state = 807
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ErrorStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERROR(self):
            return self.getToken(vbaParser.ERROR, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_errorStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorStmt" ):
                listener.enterErrorStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorStmt" ):
                listener.exitErrorStmt(self)




    def errorStmt(self):

        localctx = vbaParser.ErrorStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_errorStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 809
            self.match(vbaParser.ERROR)
            self.state = 810
            self.match(vbaParser.WS)
            self.state = 811
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EventStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EVENT(self):
            return self.getToken(vbaParser.EVENT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def argList(self):
            return self.getTypedRuleContext(vbaParser.ArgListContext,0)


        def visibility(self):
            return self.getTypedRuleContext(vbaParser.VisibilityContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_eventStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventStmt" ):
                listener.enterEventStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventStmt" ):
                listener.exitEventStmt(self)




    def eventStmt(self):

        localctx = vbaParser.EventStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_eventStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 816
            _la = self._input.LA(1)
            if ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (vbaParser.FRIEND - 75)) | (1 << (vbaParser.GLOBAL - 75)) | (1 << (vbaParser.PRIVATE - 75)) | (1 << (vbaParser.PUBLIC - 75)))) != 0):
                self.state = 813
                self.visibility()
                self.state = 814
                self.match(vbaParser.WS)


            self.state = 818
            self.match(vbaParser.EVENT)
            self.state = 819
            self.match(vbaParser.WS)
            self.state = 820
            self.ambiguousIdentifier()
            self.state = 822
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 821
                self.match(vbaParser.WS)


            self.state = 824
            self.argList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExitStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT_DO(self):
            return self.getToken(vbaParser.EXIT_DO, 0)

        def EXIT_FOR(self):
            return self.getToken(vbaParser.EXIT_FOR, 0)

        def EXIT_FUNCTION(self):
            return self.getToken(vbaParser.EXIT_FUNCTION, 0)

        def EXIT_PROPERTY(self):
            return self.getToken(vbaParser.EXIT_PROPERTY, 0)

        def EXIT_SUB(self):
            return self.getToken(vbaParser.EXIT_SUB, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_exitStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExitStmt" ):
                listener.enterExitStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExitStmt" ):
                listener.exitExitStmt(self)




    def exitStmt(self):

        localctx = vbaParser.ExitStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_exitStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 826
            _la = self._input.LA(1)
            if not(((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (vbaParser.EXIT_DO - 68)) | (1 << (vbaParser.EXIT_FOR - 68)) | (1 << (vbaParser.EXIT_FUNCTION - 68)) | (1 << (vbaParser.EXIT_PROPERTY - 68)) | (1 << (vbaParser.EXIT_SUB - 68)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FilecopyStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILECOPY(self):
            return self.getToken(vbaParser.FILECOPY, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_filecopyStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilecopyStmt" ):
                listener.enterFilecopyStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilecopyStmt" ):
                listener.exitFilecopyStmt(self)




    def filecopyStmt(self):

        localctx = vbaParser.FilecopyStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_filecopyStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 828
            self.match(vbaParser.FILECOPY)
            self.state = 829
            self.match(vbaParser.WS)
            self.state = 830
            self.valueStmt(0)
            self.state = 832
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 831
                self.match(vbaParser.WS)


            self.state = 834
            self.match(vbaParser.T__0)
            self.state = 836
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 835
                self.match(vbaParser.WS)


            self.state = 838
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForEachStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(vbaParser.FOR, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def EACH(self):
            return self.getToken(vbaParser.EACH, 0)

        def ambiguousIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.AmbiguousIdentifierContext)
            else:
                return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,i)


        def IN(self):
            return self.getToken(vbaParser.IN, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def NEXT(self):
            return self.getToken(vbaParser.NEXT, 0)

        def typeHint(self):
            return self.getTypedRuleContext(vbaParser.TypeHintContext,0)


        def block(self):
            return self.getTypedRuleContext(vbaParser.BlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_forEachStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForEachStmt" ):
                listener.enterForEachStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForEachStmt" ):
                listener.exitForEachStmt(self)




    def forEachStmt(self):

        localctx = vbaParser.ForEachStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_forEachStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 840
            self.match(vbaParser.FOR)
            self.state = 841
            self.match(vbaParser.WS)
            self.state = 842
            self.match(vbaParser.EACH)
            self.state = 843
            self.match(vbaParser.WS)
            self.state = 844
            self.ambiguousIdentifier()
            self.state = 846
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__2) | (1 << vbaParser.T__4) | (1 << vbaParser.T__5) | (1 << vbaParser.T__6) | (1 << vbaParser.T__7))) != 0) or _la==vbaParser.AMPERSAND:
                self.state = 845
                self.typeHint()


            self.state = 848
            self.match(vbaParser.WS)
            self.state = 849
            self.match(vbaParser.IN)
            self.state = 850
            self.match(vbaParser.WS)
            self.state = 851
            self.valueStmt(0)
            self.state = 852
            self.endOfStatement()
            self.state = 854
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.state = 853
                self.block()


            self.state = 856
            self.match(vbaParser.NEXT)
            self.state = 859
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.state = 857
                self.match(vbaParser.WS)
                self.state = 858
                self.ambiguousIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForNextStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(vbaParser.FOR, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ambiguousIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.AmbiguousIdentifierContext)
            else:
                return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,i)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)


        def TO(self):
            return self.getToken(vbaParser.TO, 0)

        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def NEXT(self):
            return self.getToken(vbaParser.NEXT, 0)

        def typeHint(self):
            return self.getTypedRuleContext(vbaParser.TypeHintContext,0)


        def asTypeClause(self):
            return self.getTypedRuleContext(vbaParser.AsTypeClauseContext,0)


        def STEP(self):
            return self.getToken(vbaParser.STEP, 0)

        def block(self):
            return self.getTypedRuleContext(vbaParser.BlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_forNextStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForNextStmt" ):
                listener.enterForNextStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForNextStmt" ):
                listener.exitForNextStmt(self)




    def forNextStmt(self):

        localctx = vbaParser.ForNextStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_forNextStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 861
            self.match(vbaParser.FOR)
            self.state = 862
            self.match(vbaParser.WS)
            self.state = 863
            self.ambiguousIdentifier()
            self.state = 865
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__2) | (1 << vbaParser.T__4) | (1 << vbaParser.T__5) | (1 << vbaParser.T__6) | (1 << vbaParser.T__7))) != 0) or _la==vbaParser.AMPERSAND:
                self.state = 864
                self.typeHint()


            self.state = 869
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 867
                self.match(vbaParser.WS)
                self.state = 868
                self.asTypeClause()


            self.state = 872
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 871
                self.match(vbaParser.WS)


            self.state = 874
            self.match(vbaParser.EQ)
            self.state = 876
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 875
                self.match(vbaParser.WS)


            self.state = 878
            self.valueStmt(0)
            self.state = 879
            self.match(vbaParser.WS)
            self.state = 880
            self.match(vbaParser.TO)
            self.state = 881
            self.match(vbaParser.WS)
            self.state = 882
            self.valueStmt(0)
            self.state = 887
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 883
                self.match(vbaParser.WS)
                self.state = 884
                self.match(vbaParser.STEP)
                self.state = 885
                self.match(vbaParser.WS)
                self.state = 886
                self.valueStmt(0)


            self.state = 889
            self.endOfStatement()
            self.state = 891
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.state = 890
                self.block()


            self.state = 893
            self.match(vbaParser.NEXT)
            self.state = 896
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.state = 894
                self.match(vbaParser.WS)
                self.state = 895
                self.ambiguousIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(vbaParser.FUNCTION, 0)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def END_FUNCTION(self):
            return self.getToken(vbaParser.END_FUNCTION, 0)

        def visibility(self):
            return self.getTypedRuleContext(vbaParser.VisibilityContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def STATIC(self):
            return self.getToken(vbaParser.STATIC, 0)

        def typeHint(self):
            return self.getTypedRuleContext(vbaParser.TypeHintContext,0)


        def argList(self):
            return self.getTypedRuleContext(vbaParser.ArgListContext,0)


        def asTypeClause(self):
            return self.getTypedRuleContext(vbaParser.AsTypeClauseContext,0)


        def block(self):
            return self.getTypedRuleContext(vbaParser.BlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_functionStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionStmt" ):
                listener.enterFunctionStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionStmt" ):
                listener.exitFunctionStmt(self)




    def functionStmt(self):

        localctx = vbaParser.FunctionStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_functionStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 901
            _la = self._input.LA(1)
            if ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (vbaParser.FRIEND - 75)) | (1 << (vbaParser.GLOBAL - 75)) | (1 << (vbaParser.PRIVATE - 75)) | (1 << (vbaParser.PUBLIC - 75)))) != 0):
                self.state = 898
                self.visibility()
                self.state = 899
                self.match(vbaParser.WS)


            self.state = 905
            _la = self._input.LA(1)
            if _la==vbaParser.STATIC:
                self.state = 903
                self.match(vbaParser.STATIC)
                self.state = 904
                self.match(vbaParser.WS)


            self.state = 907
            self.match(vbaParser.FUNCTION)
            self.state = 909
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 908
                self.match(vbaParser.WS)


            self.state = 911
            self.ambiguousIdentifier()
            self.state = 913
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.state = 912
                self.typeHint()


            self.state = 919
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.state = 916
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 915
                    self.match(vbaParser.WS)


                self.state = 918
                self.argList()


            self.state = 925
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.state = 922
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 921
                    self.match(vbaParser.WS)


                self.state = 924
                self.asTypeClause()


            self.state = 927
            self.endOfStatement()
            self.state = 929
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST) | (1 << vbaParser.DATABASE) | (1 << vbaParser.DATE) | (1 << vbaParser.DECLARE) | (1 << vbaParser.DEFBOOL) | (1 << vbaParser.DEFBYTE) | (1 << vbaParser.DEFDATE) | (1 << vbaParser.DEFDBL) | (1 << vbaParser.DEFDEC) | (1 << vbaParser.DEFCUR) | (1 << vbaParser.DEFINT) | (1 << vbaParser.DEFLNG) | (1 << vbaParser.DEFOBJ) | (1 << vbaParser.DEFSNG) | (1 << vbaParser.DEFSTR) | (1 << vbaParser.DEFVAR) | (1 << vbaParser.DELETESETTING) | (1 << vbaParser.DIM) | (1 << vbaParser.DO) | (1 << vbaParser.DOUBLE) | (1 << vbaParser.EACH) | (1 << vbaParser.ELSE) | (1 << vbaParser.ELSEIF) | (1 << vbaParser.END) | (1 << vbaParser.ENUM))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.EXIT_DO - 64)) | (1 << (vbaParser.EXIT_FOR - 64)) | (1 << (vbaParser.EXIT_FUNCTION - 64)) | (1 << (vbaParser.EXIT_PROPERTY - 64)) | (1 << (vbaParser.EXIT_SUB - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)) | (1 << (vbaParser.LIB - 64)) | (1 << (vbaParser.LIKE - 64)) | (1 << (vbaParser.LINE_INPUT - 64)) | (1 << (vbaParser.LSET - 64)) | (1 << (vbaParser.MACRO_CONST - 64)) | (1 << (vbaParser.MACRO_IF - 64)) | (1 << (vbaParser.ME - 64)) | (1 << (vbaParser.MID - 64)) | (1 << (vbaParser.MKDIR - 64)) | (1 << (vbaParser.MOD - 64)) | (1 << (vbaParser.NAME - 64)) | (1 << (vbaParser.NEXT - 64)) | (1 << (vbaParser.NEW - 64)) | (1 << (vbaParser.NOT - 64)) | (1 << (vbaParser.NOTHING - 64)) | (1 << (vbaParser.NULL - 64)) | (1 << (vbaParser.ON - 64)) | (1 << (vbaParser.ON_ERROR - 64)) | (1 << (vbaParser.ON_LOCAL_ERROR - 64)) | (1 << (vbaParser.OPEN - 64)) | (1 << (vbaParser.OPTIONAL - 64)) | (1 << (vbaParser.OR - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)) | (1 << (vbaParser.SPC - 128)) | (1 << (vbaParser.STATIC - 128)) | (1 << (vbaParser.STEP - 128)) | (1 << (vbaParser.STOP - 128)) | (1 << (vbaParser.STRING - 128)) | (1 << (vbaParser.SUB - 128)) | (1 << (vbaParser.TAB - 128)) | (1 << (vbaParser.TEXT - 128)) | (1 << (vbaParser.THEN - 128)) | (1 << (vbaParser.TIME - 128)) | (1 << (vbaParser.TO - 128)) | (1 << (vbaParser.TRUE - 128)) | (1 << (vbaParser.TYPE - 128)) | (1 << (vbaParser.TYPEOF - 128)) | (1 << (vbaParser.UNLOAD - 128)) | (1 << (vbaParser.UNLOCK - 128)) | (1 << (vbaParser.UNTIL - 128)) | (1 << (vbaParser.VARIANT - 128)) | (1 << (vbaParser.VERSION - 128)) | (1 << (vbaParser.WEND - 128)) | (1 << (vbaParser.WHILE - 128)) | (1 << (vbaParser.WIDTH - 128)) | (1 << (vbaParser.WITH - 128)) | (1 << (vbaParser.WITHEVENTS - 128)) | (1 << (vbaParser.WRITE - 128)) | (1 << (vbaParser.XOR - 128)))) != 0) or _la==vbaParser.IDENTIFIER:
                self.state = 928
                self.block()


            self.state = 931
            self.match(vbaParser.END_FUNCTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GetStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET(self):
            return self.getToken(vbaParser.GET, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_getStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetStmt" ):
                listener.enterGetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetStmt" ):
                listener.exitGetStmt(self)




    def getStmt(self):

        localctx = vbaParser.GetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_getStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 933
            self.match(vbaParser.GET)
            self.state = 934
            self.match(vbaParser.WS)
            self.state = 935
            self.fileNumber()
            self.state = 937
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 936
                self.match(vbaParser.WS)


            self.state = 939
            self.match(vbaParser.T__0)
            self.state = 941
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 940
                self.match(vbaParser.WS)


            self.state = 944
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST) | (1 << vbaParser.DATABASE) | (1 << vbaParser.DATE) | (1 << vbaParser.DECLARE) | (1 << vbaParser.DEFBOOL) | (1 << vbaParser.DEFBYTE) | (1 << vbaParser.DEFDATE) | (1 << vbaParser.DEFDBL) | (1 << vbaParser.DEFDEC) | (1 << vbaParser.DEFCUR) | (1 << vbaParser.DEFINT) | (1 << vbaParser.DEFLNG) | (1 << vbaParser.DEFOBJ) | (1 << vbaParser.DEFSNG) | (1 << vbaParser.DEFSTR) | (1 << vbaParser.DEFVAR) | (1 << vbaParser.DELETESETTING) | (1 << vbaParser.DIM) | (1 << vbaParser.DO) | (1 << vbaParser.DOUBLE) | (1 << vbaParser.EACH) | (1 << vbaParser.ELSE) | (1 << vbaParser.ELSEIF) | (1 << vbaParser.END) | (1 << vbaParser.ENUM))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)) | (1 << (vbaParser.LIB - 64)) | (1 << (vbaParser.LIKE - 64)) | (1 << (vbaParser.LSET - 64)) | (1 << (vbaParser.ME - 64)) | (1 << (vbaParser.MID - 64)) | (1 << (vbaParser.MKDIR - 64)) | (1 << (vbaParser.MOD - 64)) | (1 << (vbaParser.NAME - 64)) | (1 << (vbaParser.NEXT - 64)) | (1 << (vbaParser.NEW - 64)) | (1 << (vbaParser.NOT - 64)) | (1 << (vbaParser.NOTHING - 64)) | (1 << (vbaParser.NULL - 64)) | (1 << (vbaParser.ON - 64)) | (1 << (vbaParser.OPEN - 64)) | (1 << (vbaParser.OPTIONAL - 64)) | (1 << (vbaParser.OR - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)) | (1 << (vbaParser.SPC - 128)) | (1 << (vbaParser.STATIC - 128)) | (1 << (vbaParser.STEP - 128)) | (1 << (vbaParser.STOP - 128)) | (1 << (vbaParser.STRING - 128)) | (1 << (vbaParser.SUB - 128)) | (1 << (vbaParser.TAB - 128)) | (1 << (vbaParser.TEXT - 128)) | (1 << (vbaParser.THEN - 128)) | (1 << (vbaParser.TIME - 128)) | (1 << (vbaParser.TO - 128)) | (1 << (vbaParser.TRUE - 128)) | (1 << (vbaParser.TYPE - 128)) | (1 << (vbaParser.TYPEOF - 128)) | (1 << (vbaParser.UNLOAD - 128)) | (1 << (vbaParser.UNLOCK - 128)) | (1 << (vbaParser.UNTIL - 128)) | (1 << (vbaParser.VARIANT - 128)) | (1 << (vbaParser.VERSION - 128)) | (1 << (vbaParser.WEND - 128)) | (1 << (vbaParser.WHILE - 128)) | (1 << (vbaParser.WIDTH - 128)) | (1 << (vbaParser.WITH - 128)) | (1 << (vbaParser.WITHEVENTS - 128)) | (1 << (vbaParser.WRITE - 128)) | (1 << (vbaParser.XOR - 128)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (vbaParser.LPAREN - 193)) | (1 << (vbaParser.MINUS - 193)) | (1 << (vbaParser.PLUS - 193)) | (1 << (vbaParser.STRINGLITERAL - 193)) | (1 << (vbaParser.OCTLITERAL - 193)) | (1 << (vbaParser.HEXLITERAL - 193)) | (1 << (vbaParser.SHORTLITERAL - 193)) | (1 << (vbaParser.INTEGERLITERAL - 193)) | (1 << (vbaParser.DOUBLELITERAL - 193)) | (1 << (vbaParser.DATELITERAL - 193)) | (1 << (vbaParser.IDENTIFIER - 193)))) != 0):
                self.state = 943
                self.valueStmt(0)


            self.state = 947
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 946
                self.match(vbaParser.WS)


            self.state = 949
            self.match(vbaParser.T__0)
            self.state = 951
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 950
                self.match(vbaParser.WS)


            self.state = 953
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GoSubStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GOSUB(self):
            return self.getToken(vbaParser.GOSUB, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_goSubStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGoSubStmt" ):
                listener.enterGoSubStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGoSubStmt" ):
                listener.exitGoSubStmt(self)




    def goSubStmt(self):

        localctx = vbaParser.GoSubStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_goSubStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 955
            self.match(vbaParser.GOSUB)
            self.state = 956
            self.match(vbaParser.WS)
            self.state = 957
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GoToStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GOTO(self):
            return self.getToken(vbaParser.GOTO, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_goToStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGoToStmt" ):
                listener.enterGoToStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGoToStmt" ):
                listener.exitGoToStmt(self)




    def goToStmt(self):

        localctx = vbaParser.GoToStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_goToStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 959
            self.match(vbaParser.GOTO)
            self.state = 960
            self.match(vbaParser.WS)
            self.state = 961
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfThenElseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return vbaParser.RULE_ifThenElseStmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class BlockIfThenElseContext(IfThenElseStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.IfThenElseStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ifBlockStmt(self):
            return self.getTypedRuleContext(vbaParser.IfBlockStmtContext,0)

        def END_IF(self):
            return self.getToken(vbaParser.END_IF, 0)
        def ifElseIfBlockStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.IfElseIfBlockStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.IfElseIfBlockStmtContext,i)

        def ifElseBlockStmt(self):
            return self.getTypedRuleContext(vbaParser.IfElseBlockStmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockIfThenElse" ):
                listener.enterBlockIfThenElse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockIfThenElse" ):
                listener.exitBlockIfThenElse(self)


    class InlineIfThenElseContext(IfThenElseStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.IfThenElseStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IF(self):
            return self.getToken(vbaParser.IF, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)
        def ifConditionStmt(self):
            return self.getTypedRuleContext(vbaParser.IfConditionStmtContext,0)

        def THEN(self):
            return self.getToken(vbaParser.THEN, 0)
        def blockStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.BlockStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.BlockStmtContext,i)

        def ELSE(self):
            return self.getToken(vbaParser.ELSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineIfThenElse" ):
                listener.enterInlineIfThenElse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineIfThenElse" ):
                listener.exitInlineIfThenElse(self)



    def ifThenElseStmt(self):

        localctx = vbaParser.IfThenElseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_ifThenElseStmt)
        self._la = 0 # Token type
        try:
            self.state = 988
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                localctx = vbaParser.InlineIfThenElseContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 963
                self.match(vbaParser.IF)
                self.state = 964
                self.match(vbaParser.WS)
                self.state = 965
                self.ifConditionStmt()
                self.state = 966
                self.match(vbaParser.WS)
                self.state = 967
                self.match(vbaParser.THEN)
                self.state = 968
                self.match(vbaParser.WS)
                self.state = 969
                self.blockStmt()
                self.state = 974
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                if la_ == 1:
                    self.state = 970
                    self.match(vbaParser.WS)
                    self.state = 971
                    self.match(vbaParser.ELSE)
                    self.state = 972
                    self.match(vbaParser.WS)
                    self.state = 973
                    self.blockStmt()


                pass

            elif la_ == 2:
                localctx = vbaParser.BlockIfThenElseContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 976
                self.ifBlockStmt()
                self.state = 980
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==vbaParser.ELSEIF:
                    self.state = 977
                    self.ifElseIfBlockStmt()
                    self.state = 982
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 984
                _la = self._input.LA(1)
                if _la==vbaParser.ELSE:
                    self.state = 983
                    self.ifElseBlockStmt()


                self.state = 986
                self.match(vbaParser.END_IF)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfBlockStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(vbaParser.IF, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ifConditionStmt(self):
            return self.getTypedRuleContext(vbaParser.IfConditionStmtContext,0)


        def THEN(self):
            return self.getToken(vbaParser.THEN, 0)

        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def block(self):
            return self.getTypedRuleContext(vbaParser.BlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_ifBlockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfBlockStmt" ):
                listener.enterIfBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfBlockStmt" ):
                listener.exitIfBlockStmt(self)




    def ifBlockStmt(self):

        localctx = vbaParser.IfBlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_ifBlockStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 990
            self.match(vbaParser.IF)
            self.state = 991
            self.match(vbaParser.WS)
            self.state = 992
            self.ifConditionStmt()
            self.state = 993
            self.match(vbaParser.WS)
            self.state = 994
            self.match(vbaParser.THEN)
            self.state = 995
            self.endOfStatement()
            self.state = 997
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 996
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfConditionStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_ifConditionStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfConditionStmt" ):
                listener.enterIfConditionStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfConditionStmt" ):
                listener.exitIfConditionStmt(self)




    def ifConditionStmt(self):

        localctx = vbaParser.IfConditionStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_ifConditionStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 999
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfElseIfBlockStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSEIF(self):
            return self.getToken(vbaParser.ELSEIF, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ifConditionStmt(self):
            return self.getTypedRuleContext(vbaParser.IfConditionStmtContext,0)


        def THEN(self):
            return self.getToken(vbaParser.THEN, 0)

        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def block(self):
            return self.getTypedRuleContext(vbaParser.BlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_ifElseIfBlockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfElseIfBlockStmt" ):
                listener.enterIfElseIfBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfElseIfBlockStmt" ):
                listener.exitIfElseIfBlockStmt(self)




    def ifElseIfBlockStmt(self):

        localctx = vbaParser.IfElseIfBlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_ifElseIfBlockStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1001
            self.match(vbaParser.ELSEIF)
            self.state = 1002
            self.match(vbaParser.WS)
            self.state = 1003
            self.ifConditionStmt()
            self.state = 1004
            self.match(vbaParser.WS)
            self.state = 1005
            self.match(vbaParser.THEN)
            self.state = 1006
            self.endOfStatement()
            self.state = 1008
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.state = 1007
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfElseBlockStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(vbaParser.ELSE, 0)

        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def block(self):
            return self.getTypedRuleContext(vbaParser.BlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_ifElseBlockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfElseBlockStmt" ):
                listener.enterIfElseBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfElseBlockStmt" ):
                listener.exitIfElseBlockStmt(self)




    def ifElseBlockStmt(self):

        localctx = vbaParser.IfElseBlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_ifElseBlockStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1010
            self.match(vbaParser.ELSE)
            self.state = 1011
            self.endOfStatement()
            self.state = 1013
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST) | (1 << vbaParser.DATABASE) | (1 << vbaParser.DATE) | (1 << vbaParser.DECLARE) | (1 << vbaParser.DEFBOOL) | (1 << vbaParser.DEFBYTE) | (1 << vbaParser.DEFDATE) | (1 << vbaParser.DEFDBL) | (1 << vbaParser.DEFDEC) | (1 << vbaParser.DEFCUR) | (1 << vbaParser.DEFINT) | (1 << vbaParser.DEFLNG) | (1 << vbaParser.DEFOBJ) | (1 << vbaParser.DEFSNG) | (1 << vbaParser.DEFSTR) | (1 << vbaParser.DEFVAR) | (1 << vbaParser.DELETESETTING) | (1 << vbaParser.DIM) | (1 << vbaParser.DO) | (1 << vbaParser.DOUBLE) | (1 << vbaParser.EACH) | (1 << vbaParser.ELSE) | (1 << vbaParser.ELSEIF) | (1 << vbaParser.END) | (1 << vbaParser.ENUM))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.EXIT_DO - 64)) | (1 << (vbaParser.EXIT_FOR - 64)) | (1 << (vbaParser.EXIT_FUNCTION - 64)) | (1 << (vbaParser.EXIT_PROPERTY - 64)) | (1 << (vbaParser.EXIT_SUB - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)) | (1 << (vbaParser.LIB - 64)) | (1 << (vbaParser.LIKE - 64)) | (1 << (vbaParser.LINE_INPUT - 64)) | (1 << (vbaParser.LSET - 64)) | (1 << (vbaParser.MACRO_CONST - 64)) | (1 << (vbaParser.MACRO_IF - 64)) | (1 << (vbaParser.ME - 64)) | (1 << (vbaParser.MID - 64)) | (1 << (vbaParser.MKDIR - 64)) | (1 << (vbaParser.MOD - 64)) | (1 << (vbaParser.NAME - 64)) | (1 << (vbaParser.NEXT - 64)) | (1 << (vbaParser.NEW - 64)) | (1 << (vbaParser.NOT - 64)) | (1 << (vbaParser.NOTHING - 64)) | (1 << (vbaParser.NULL - 64)) | (1 << (vbaParser.ON - 64)) | (1 << (vbaParser.ON_ERROR - 64)) | (1 << (vbaParser.ON_LOCAL_ERROR - 64)) | (1 << (vbaParser.OPEN - 64)) | (1 << (vbaParser.OPTIONAL - 64)) | (1 << (vbaParser.OR - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)) | (1 << (vbaParser.SPC - 128)) | (1 << (vbaParser.STATIC - 128)) | (1 << (vbaParser.STEP - 128)) | (1 << (vbaParser.STOP - 128)) | (1 << (vbaParser.STRING - 128)) | (1 << (vbaParser.SUB - 128)) | (1 << (vbaParser.TAB - 128)) | (1 << (vbaParser.TEXT - 128)) | (1 << (vbaParser.THEN - 128)) | (1 << (vbaParser.TIME - 128)) | (1 << (vbaParser.TO - 128)) | (1 << (vbaParser.TRUE - 128)) | (1 << (vbaParser.TYPE - 128)) | (1 << (vbaParser.TYPEOF - 128)) | (1 << (vbaParser.UNLOAD - 128)) | (1 << (vbaParser.UNLOCK - 128)) | (1 << (vbaParser.UNTIL - 128)) | (1 << (vbaParser.VARIANT - 128)) | (1 << (vbaParser.VERSION - 128)) | (1 << (vbaParser.WEND - 128)) | (1 << (vbaParser.WHILE - 128)) | (1 << (vbaParser.WIDTH - 128)) | (1 << (vbaParser.WITH - 128)) | (1 << (vbaParser.WITHEVENTS - 128)) | (1 << (vbaParser.WRITE - 128)) | (1 << (vbaParser.XOR - 128)))) != 0) or _la==vbaParser.IDENTIFIER:
                self.state = 1012
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImplementsStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPLEMENTS(self):
            return self.getToken(vbaParser.IMPLEMENTS, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_implementsStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplementsStmt" ):
                listener.enterImplementsStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplementsStmt" ):
                listener.exitImplementsStmt(self)




    def implementsStmt(self):

        localctx = vbaParser.ImplementsStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_implementsStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1015
            self.match(vbaParser.IMPLEMENTS)
            self.state = 1016
            self.match(vbaParser.WS)
            self.state = 1017
            self.ambiguousIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InputStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INPUT(self):
            return self.getToken(vbaParser.INPUT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_inputStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInputStmt" ):
                listener.enterInputStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInputStmt" ):
                listener.exitInputStmt(self)




    def inputStmt(self):

        localctx = vbaParser.InputStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_inputStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1019
            self.match(vbaParser.INPUT)
            self.state = 1020
            self.match(vbaParser.WS)
            self.state = 1021
            self.fileNumber()
            self.state = 1030 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1023
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 1022
                        self.match(vbaParser.WS)


                    self.state = 1025
                    self.match(vbaParser.T__0)
                    self.state = 1027
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 1026
                        self.match(vbaParser.WS)


                    self.state = 1029
                    self.valueStmt(0)

                else:
                    raise NoViableAltException(self)
                self.state = 1032 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,116,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KillStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KILL(self):
            return self.getToken(vbaParser.KILL, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_killStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKillStmt" ):
                listener.enterKillStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKillStmt" ):
                listener.exitKillStmt(self)




    def killStmt(self):

        localctx = vbaParser.KillStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_killStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1034
            self.match(vbaParser.KILL)
            self.state = 1035
            self.match(vbaParser.WS)
            self.state = 1036
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LetStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(vbaParser.ImplicitCallStmt_InStmtContext,0)


        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def PLUS_EQ(self):
            return self.getToken(vbaParser.PLUS_EQ, 0)

        def MINUS_EQ(self):
            return self.getToken(vbaParser.MINUS_EQ, 0)

        def LET(self):
            return self.getToken(vbaParser.LET, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_letStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetStmt" ):
                listener.enterLetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetStmt" ):
                listener.exitLetStmt(self)




    def letStmt(self):

        localctx = vbaParser.LetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_letStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1040
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.state = 1038
                self.match(vbaParser.LET)
                self.state = 1039
                self.match(vbaParser.WS)


            self.state = 1042
            self.implicitCallStmt_InStmt()
            self.state = 1044
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1043
                self.match(vbaParser.WS)


            self.state = 1046
            _la = self._input.LA(1)
            if not(((((_la - 189)) & ~0x3f) == 0 and ((1 << (_la - 189)) & ((1 << (vbaParser.EQ - 189)) | (1 << (vbaParser.MINUS_EQ - 189)) | (1 << (vbaParser.PLUS_EQ - 189)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
            self.state = 1048
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1047
                self.match(vbaParser.WS)


            self.state = 1050
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LineInputStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINE_INPUT(self):
            return self.getToken(vbaParser.LINE_INPUT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_lineInputStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineInputStmt" ):
                listener.enterLineInputStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineInputStmt" ):
                listener.exitLineInputStmt(self)




    def lineInputStmt(self):

        localctx = vbaParser.LineInputStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_lineInputStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1052
            self.match(vbaParser.LINE_INPUT)
            self.state = 1053
            self.match(vbaParser.WS)
            self.state = 1054
            self.fileNumber()
            self.state = 1056
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1055
                self.match(vbaParser.WS)


            self.state = 1058
            self.match(vbaParser.T__0)
            self.state = 1060
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1059
                self.match(vbaParser.WS)


            self.state = 1062
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LoadStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOAD(self):
            return self.getToken(vbaParser.LOAD, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_loadStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadStmt" ):
                listener.enterLoadStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadStmt" ):
                listener.exitLoadStmt(self)




    def loadStmt(self):

        localctx = vbaParser.LoadStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_loadStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1064
            self.match(vbaParser.LOAD)
            self.state = 1065
            self.match(vbaParser.WS)
            self.state = 1066
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LockStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCK(self):
            return self.getToken(vbaParser.LOCK, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)


        def TO(self):
            return self.getToken(vbaParser.TO, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_lockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockStmt" ):
                listener.enterLockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockStmt" ):
                listener.exitLockStmt(self)




    def lockStmt(self):

        localctx = vbaParser.LockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_lockStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1068
            self.match(vbaParser.LOCK)
            self.state = 1069
            self.match(vbaParser.WS)
            self.state = 1070
            self.valueStmt(0)
            self.state = 1085
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.state = 1072
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1071
                    self.match(vbaParser.WS)


                self.state = 1074
                self.match(vbaParser.T__0)
                self.state = 1076
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1075
                    self.match(vbaParser.WS)


                self.state = 1078
                self.valueStmt(0)
                self.state = 1083
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
                if la_ == 1:
                    self.state = 1079
                    self.match(vbaParser.WS)
                    self.state = 1080
                    self.match(vbaParser.TO)
                    self.state = 1081
                    self.match(vbaParser.WS)
                    self.state = 1082
                    self.valueStmt(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LsetStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSET(self):
            return self.getToken(vbaParser.LSET, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(vbaParser.ImplicitCallStmt_InStmtContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_lsetStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLsetStmt" ):
                listener.enterLsetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLsetStmt" ):
                listener.exitLsetStmt(self)




    def lsetStmt(self):

        localctx = vbaParser.LsetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_lsetStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1087
            self.match(vbaParser.LSET)
            self.state = 1088
            self.match(vbaParser.WS)
            self.state = 1089
            self.implicitCallStmt_InStmt()
            self.state = 1091
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1090
                self.match(vbaParser.WS)


            self.state = 1093
            self.match(vbaParser.EQ)
            self.state = 1095
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1094
                self.match(vbaParser.WS)


            self.state = 1097
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MacroConstStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MACRO_CONST(self):
            return self.getToken(vbaParser.MACRO_CONST, 0)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_macroConstStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroConstStmt" ):
                listener.enterMacroConstStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroConstStmt" ):
                listener.exitMacroConstStmt(self)




    def macroConstStmt(self):

        localctx = vbaParser.MacroConstStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_macroConstStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1099
            self.match(vbaParser.MACRO_CONST)
            self.state = 1101
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1100
                self.match(vbaParser.WS)


            self.state = 1103
            self.ambiguousIdentifier()
            self.state = 1105
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1104
                self.match(vbaParser.WS)


            self.state = 1107
            self.match(vbaParser.EQ)
            self.state = 1109
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1108
                self.match(vbaParser.WS)


            self.state = 1111
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MacroIfThenElseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def macroIfBlockStmt(self):
            return self.getTypedRuleContext(vbaParser.MacroIfBlockStmtContext,0)


        def MACRO_END_IF(self):
            return self.getToken(vbaParser.MACRO_END_IF, 0)

        def macroElseIfBlockStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.MacroElseIfBlockStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.MacroElseIfBlockStmtContext,i)


        def macroElseBlockStmt(self):
            return self.getTypedRuleContext(vbaParser.MacroElseBlockStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_macroIfThenElseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroIfThenElseStmt" ):
                listener.enterMacroIfThenElseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroIfThenElseStmt" ):
                listener.exitMacroIfThenElseStmt(self)




    def macroIfThenElseStmt(self):

        localctx = vbaParser.MacroIfThenElseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_macroIfThenElseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1113
            self.macroIfBlockStmt()
            self.state = 1117
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==vbaParser.MACRO_ELSEIF:
                self.state = 1114
                self.macroElseIfBlockStmt()
                self.state = 1119
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1121
            _la = self._input.LA(1)
            if _la==vbaParser.MACRO_ELSE:
                self.state = 1120
                self.macroElseBlockStmt()


            self.state = 1123
            self.match(vbaParser.MACRO_END_IF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MacroIfBlockStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MACRO_IF(self):
            return self.getToken(vbaParser.MACRO_IF, 0)

        def ifConditionStmt(self):
            return self.getTypedRuleContext(vbaParser.IfConditionStmtContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def THEN(self):
            return self.getToken(vbaParser.THEN, 0)

        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def moduleDeclarations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ModuleDeclarationsContext)
            else:
                return self.getTypedRuleContext(vbaParser.ModuleDeclarationsContext,i)


        def moduleBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ModuleBodyContext)
            else:
                return self.getTypedRuleContext(vbaParser.ModuleBodyContext,i)


        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.BlockContext)
            else:
                return self.getTypedRuleContext(vbaParser.BlockContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_macroIfBlockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroIfBlockStmt" ):
                listener.enterMacroIfBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroIfBlockStmt" ):
                listener.exitMacroIfBlockStmt(self)




    def macroIfBlockStmt(self):

        localctx = vbaParser.MacroIfBlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_macroIfBlockStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1125
            self.match(vbaParser.MACRO_IF)
            self.state = 1127
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1126
                self.match(vbaParser.WS)


            self.state = 1129
            self.ifConditionStmt()
            self.state = 1130
            self.match(vbaParser.WS)
            self.state = 1131
            self.match(vbaParser.THEN)
            self.state = 1132
            self.endOfStatement()
            self.state = 1138
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST) | (1 << vbaParser.DATABASE) | (1 << vbaParser.DATE) | (1 << vbaParser.DECLARE) | (1 << vbaParser.DEFBOOL) | (1 << vbaParser.DEFBYTE) | (1 << vbaParser.DEFDATE) | (1 << vbaParser.DEFDBL) | (1 << vbaParser.DEFDEC) | (1 << vbaParser.DEFCUR) | (1 << vbaParser.DEFINT) | (1 << vbaParser.DEFLNG) | (1 << vbaParser.DEFOBJ) | (1 << vbaParser.DEFSNG) | (1 << vbaParser.DEFSTR) | (1 << vbaParser.DEFVAR) | (1 << vbaParser.DELETESETTING) | (1 << vbaParser.DIM) | (1 << vbaParser.DO) | (1 << vbaParser.DOUBLE) | (1 << vbaParser.EACH) | (1 << vbaParser.ELSE) | (1 << vbaParser.ELSEIF) | (1 << vbaParser.END) | (1 << vbaParser.ENUM))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.EXIT_DO - 64)) | (1 << (vbaParser.EXIT_FOR - 64)) | (1 << (vbaParser.EXIT_FUNCTION - 64)) | (1 << (vbaParser.EXIT_PROPERTY - 64)) | (1 << (vbaParser.EXIT_SUB - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)) | (1 << (vbaParser.LIB - 64)) | (1 << (vbaParser.LIKE - 64)) | (1 << (vbaParser.LINE_INPUT - 64)) | (1 << (vbaParser.LSET - 64)) | (1 << (vbaParser.MACRO_CONST - 64)) | (1 << (vbaParser.MACRO_IF - 64)) | (1 << (vbaParser.ME - 64)) | (1 << (vbaParser.MID - 64)) | (1 << (vbaParser.MKDIR - 64)) | (1 << (vbaParser.MOD - 64)) | (1 << (vbaParser.NAME - 64)) | (1 << (vbaParser.NEXT - 64)) | (1 << (vbaParser.NEW - 64)) | (1 << (vbaParser.NOT - 64)) | (1 << (vbaParser.NOTHING - 64)) | (1 << (vbaParser.NULL - 64)) | (1 << (vbaParser.ON - 64)) | (1 << (vbaParser.ON_ERROR - 64)) | (1 << (vbaParser.ON_LOCAL_ERROR - 64)) | (1 << (vbaParser.OPEN - 64)) | (1 << (vbaParser.OPTIONAL - 64)) | (1 << (vbaParser.OPTION_BASE - 64)) | (1 << (vbaParser.OPTION_EXPLICIT - 64)) | (1 << (vbaParser.OPTION_COMPARE - 64)) | (1 << (vbaParser.OPTION_PRIVATE_MODULE - 64)) | (1 << (vbaParser.OR - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PROPERTY_GET - 128)) | (1 << (vbaParser.PROPERTY_LET - 128)) | (1 << (vbaParser.PROPERTY_SET - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)) | (1 << (vbaParser.SPC - 128)) | (1 << (vbaParser.STATIC - 128)) | (1 << (vbaParser.STEP - 128)) | (1 << (vbaParser.STOP - 128)) | (1 << (vbaParser.STRING - 128)) | (1 << (vbaParser.SUB - 128)) | (1 << (vbaParser.TAB - 128)) | (1 << (vbaParser.TEXT - 128)) | (1 << (vbaParser.THEN - 128)) | (1 << (vbaParser.TIME - 128)) | (1 << (vbaParser.TO - 128)) | (1 << (vbaParser.TRUE - 128)) | (1 << (vbaParser.TYPE - 128)) | (1 << (vbaParser.TYPEOF - 128)) | (1 << (vbaParser.UNLOAD - 128)) | (1 << (vbaParser.UNLOCK - 128)) | (1 << (vbaParser.UNTIL - 128)) | (1 << (vbaParser.VARIANT - 128)) | (1 << (vbaParser.VERSION - 128)) | (1 << (vbaParser.WEND - 128)) | (1 << (vbaParser.WHILE - 128)) | (1 << (vbaParser.WIDTH - 128)) | (1 << (vbaParser.WITH - 128)) | (1 << (vbaParser.WITHEVENTS - 128)) | (1 << (vbaParser.WRITE - 128)) | (1 << (vbaParser.XOR - 128)))) != 0) or _la==vbaParser.COMMENT or _la==vbaParser.IDENTIFIER:
                self.state = 1136
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
                if la_ == 1:
                    self.state = 1133
                    self.moduleDeclarations()
                    pass

                elif la_ == 2:
                    self.state = 1134
                    self.moduleBody()
                    pass

                elif la_ == 3:
                    self.state = 1135
                    self.block()
                    pass


                self.state = 1140
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MacroElseIfBlockStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MACRO_ELSEIF(self):
            return self.getToken(vbaParser.MACRO_ELSEIF, 0)

        def ifConditionStmt(self):
            return self.getTypedRuleContext(vbaParser.IfConditionStmtContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def THEN(self):
            return self.getToken(vbaParser.THEN, 0)

        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def moduleDeclarations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ModuleDeclarationsContext)
            else:
                return self.getTypedRuleContext(vbaParser.ModuleDeclarationsContext,i)


        def moduleBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ModuleBodyContext)
            else:
                return self.getTypedRuleContext(vbaParser.ModuleBodyContext,i)


        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.BlockContext)
            else:
                return self.getTypedRuleContext(vbaParser.BlockContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_macroElseIfBlockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroElseIfBlockStmt" ):
                listener.enterMacroElseIfBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroElseIfBlockStmt" ):
                listener.exitMacroElseIfBlockStmt(self)




    def macroElseIfBlockStmt(self):

        localctx = vbaParser.MacroElseIfBlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_macroElseIfBlockStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1141
            self.match(vbaParser.MACRO_ELSEIF)
            self.state = 1143
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1142
                self.match(vbaParser.WS)


            self.state = 1145
            self.ifConditionStmt()
            self.state = 1146
            self.match(vbaParser.WS)
            self.state = 1147
            self.match(vbaParser.THEN)
            self.state = 1148
            self.endOfStatement()
            self.state = 1154
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST) | (1 << vbaParser.DATABASE) | (1 << vbaParser.DATE) | (1 << vbaParser.DECLARE) | (1 << vbaParser.DEFBOOL) | (1 << vbaParser.DEFBYTE) | (1 << vbaParser.DEFDATE) | (1 << vbaParser.DEFDBL) | (1 << vbaParser.DEFDEC) | (1 << vbaParser.DEFCUR) | (1 << vbaParser.DEFINT) | (1 << vbaParser.DEFLNG) | (1 << vbaParser.DEFOBJ) | (1 << vbaParser.DEFSNG) | (1 << vbaParser.DEFSTR) | (1 << vbaParser.DEFVAR) | (1 << vbaParser.DELETESETTING) | (1 << vbaParser.DIM) | (1 << vbaParser.DO) | (1 << vbaParser.DOUBLE) | (1 << vbaParser.EACH) | (1 << vbaParser.ELSE) | (1 << vbaParser.ELSEIF) | (1 << vbaParser.END) | (1 << vbaParser.ENUM))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.EXIT_DO - 64)) | (1 << (vbaParser.EXIT_FOR - 64)) | (1 << (vbaParser.EXIT_FUNCTION - 64)) | (1 << (vbaParser.EXIT_PROPERTY - 64)) | (1 << (vbaParser.EXIT_SUB - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)) | (1 << (vbaParser.LIB - 64)) | (1 << (vbaParser.LIKE - 64)) | (1 << (vbaParser.LINE_INPUT - 64)) | (1 << (vbaParser.LSET - 64)) | (1 << (vbaParser.MACRO_CONST - 64)) | (1 << (vbaParser.MACRO_IF - 64)) | (1 << (vbaParser.ME - 64)) | (1 << (vbaParser.MID - 64)) | (1 << (vbaParser.MKDIR - 64)) | (1 << (vbaParser.MOD - 64)) | (1 << (vbaParser.NAME - 64)) | (1 << (vbaParser.NEXT - 64)) | (1 << (vbaParser.NEW - 64)) | (1 << (vbaParser.NOT - 64)) | (1 << (vbaParser.NOTHING - 64)) | (1 << (vbaParser.NULL - 64)) | (1 << (vbaParser.ON - 64)) | (1 << (vbaParser.ON_ERROR - 64)) | (1 << (vbaParser.ON_LOCAL_ERROR - 64)) | (1 << (vbaParser.OPEN - 64)) | (1 << (vbaParser.OPTIONAL - 64)) | (1 << (vbaParser.OPTION_BASE - 64)) | (1 << (vbaParser.OPTION_EXPLICIT - 64)) | (1 << (vbaParser.OPTION_COMPARE - 64)) | (1 << (vbaParser.OPTION_PRIVATE_MODULE - 64)) | (1 << (vbaParser.OR - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PROPERTY_GET - 128)) | (1 << (vbaParser.PROPERTY_LET - 128)) | (1 << (vbaParser.PROPERTY_SET - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)) | (1 << (vbaParser.SPC - 128)) | (1 << (vbaParser.STATIC - 128)) | (1 << (vbaParser.STEP - 128)) | (1 << (vbaParser.STOP - 128)) | (1 << (vbaParser.STRING - 128)) | (1 << (vbaParser.SUB - 128)) | (1 << (vbaParser.TAB - 128)) | (1 << (vbaParser.TEXT - 128)) | (1 << (vbaParser.THEN - 128)) | (1 << (vbaParser.TIME - 128)) | (1 << (vbaParser.TO - 128)) | (1 << (vbaParser.TRUE - 128)) | (1 << (vbaParser.TYPE - 128)) | (1 << (vbaParser.TYPEOF - 128)) | (1 << (vbaParser.UNLOAD - 128)) | (1 << (vbaParser.UNLOCK - 128)) | (1 << (vbaParser.UNTIL - 128)) | (1 << (vbaParser.VARIANT - 128)) | (1 << (vbaParser.VERSION - 128)) | (1 << (vbaParser.WEND - 128)) | (1 << (vbaParser.WHILE - 128)) | (1 << (vbaParser.WIDTH - 128)) | (1 << (vbaParser.WITH - 128)) | (1 << (vbaParser.WITHEVENTS - 128)) | (1 << (vbaParser.WRITE - 128)) | (1 << (vbaParser.XOR - 128)))) != 0) or _la==vbaParser.COMMENT or _la==vbaParser.IDENTIFIER:
                self.state = 1152
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
                if la_ == 1:
                    self.state = 1149
                    self.moduleDeclarations()
                    pass

                elif la_ == 2:
                    self.state = 1150
                    self.moduleBody()
                    pass

                elif la_ == 3:
                    self.state = 1151
                    self.block()
                    pass


                self.state = 1156
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MacroElseBlockStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MACRO_ELSE(self):
            return self.getToken(vbaParser.MACRO_ELSE, 0)

        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def moduleDeclarations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ModuleDeclarationsContext)
            else:
                return self.getTypedRuleContext(vbaParser.ModuleDeclarationsContext,i)


        def moduleBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ModuleBodyContext)
            else:
                return self.getTypedRuleContext(vbaParser.ModuleBodyContext,i)


        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.BlockContext)
            else:
                return self.getTypedRuleContext(vbaParser.BlockContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_macroElseBlockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroElseBlockStmt" ):
                listener.enterMacroElseBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroElseBlockStmt" ):
                listener.exitMacroElseBlockStmt(self)




    def macroElseBlockStmt(self):

        localctx = vbaParser.MacroElseBlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_macroElseBlockStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1157
            self.match(vbaParser.MACRO_ELSE)
            self.state = 1158
            self.endOfStatement()
            self.state = 1164
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST) | (1 << vbaParser.DATABASE) | (1 << vbaParser.DATE) | (1 << vbaParser.DECLARE) | (1 << vbaParser.DEFBOOL) | (1 << vbaParser.DEFBYTE) | (1 << vbaParser.DEFDATE) | (1 << vbaParser.DEFDBL) | (1 << vbaParser.DEFDEC) | (1 << vbaParser.DEFCUR) | (1 << vbaParser.DEFINT) | (1 << vbaParser.DEFLNG) | (1 << vbaParser.DEFOBJ) | (1 << vbaParser.DEFSNG) | (1 << vbaParser.DEFSTR) | (1 << vbaParser.DEFVAR) | (1 << vbaParser.DELETESETTING) | (1 << vbaParser.DIM) | (1 << vbaParser.DO) | (1 << vbaParser.DOUBLE) | (1 << vbaParser.EACH) | (1 << vbaParser.ELSE) | (1 << vbaParser.ELSEIF) | (1 << vbaParser.END) | (1 << vbaParser.ENUM))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.EXIT_DO - 64)) | (1 << (vbaParser.EXIT_FOR - 64)) | (1 << (vbaParser.EXIT_FUNCTION - 64)) | (1 << (vbaParser.EXIT_PROPERTY - 64)) | (1 << (vbaParser.EXIT_SUB - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)) | (1 << (vbaParser.LIB - 64)) | (1 << (vbaParser.LIKE - 64)) | (1 << (vbaParser.LINE_INPUT - 64)) | (1 << (vbaParser.LSET - 64)) | (1 << (vbaParser.MACRO_CONST - 64)) | (1 << (vbaParser.MACRO_IF - 64)) | (1 << (vbaParser.ME - 64)) | (1 << (vbaParser.MID - 64)) | (1 << (vbaParser.MKDIR - 64)) | (1 << (vbaParser.MOD - 64)) | (1 << (vbaParser.NAME - 64)) | (1 << (vbaParser.NEXT - 64)) | (1 << (vbaParser.NEW - 64)) | (1 << (vbaParser.NOT - 64)) | (1 << (vbaParser.NOTHING - 64)) | (1 << (vbaParser.NULL - 64)) | (1 << (vbaParser.ON - 64)) | (1 << (vbaParser.ON_ERROR - 64)) | (1 << (vbaParser.ON_LOCAL_ERROR - 64)) | (1 << (vbaParser.OPEN - 64)) | (1 << (vbaParser.OPTIONAL - 64)) | (1 << (vbaParser.OPTION_BASE - 64)) | (1 << (vbaParser.OPTION_EXPLICIT - 64)) | (1 << (vbaParser.OPTION_COMPARE - 64)) | (1 << (vbaParser.OPTION_PRIVATE_MODULE - 64)) | (1 << (vbaParser.OR - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PROPERTY_GET - 128)) | (1 << (vbaParser.PROPERTY_LET - 128)) | (1 << (vbaParser.PROPERTY_SET - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)) | (1 << (vbaParser.SPC - 128)) | (1 << (vbaParser.STATIC - 128)) | (1 << (vbaParser.STEP - 128)) | (1 << (vbaParser.STOP - 128)) | (1 << (vbaParser.STRING - 128)) | (1 << (vbaParser.SUB - 128)) | (1 << (vbaParser.TAB - 128)) | (1 << (vbaParser.TEXT - 128)) | (1 << (vbaParser.THEN - 128)) | (1 << (vbaParser.TIME - 128)) | (1 << (vbaParser.TO - 128)) | (1 << (vbaParser.TRUE - 128)) | (1 << (vbaParser.TYPE - 128)) | (1 << (vbaParser.TYPEOF - 128)) | (1 << (vbaParser.UNLOAD - 128)) | (1 << (vbaParser.UNLOCK - 128)) | (1 << (vbaParser.UNTIL - 128)) | (1 << (vbaParser.VARIANT - 128)) | (1 << (vbaParser.VERSION - 128)) | (1 << (vbaParser.WEND - 128)) | (1 << (vbaParser.WHILE - 128)) | (1 << (vbaParser.WIDTH - 128)) | (1 << (vbaParser.WITH - 128)) | (1 << (vbaParser.WITHEVENTS - 128)) | (1 << (vbaParser.WRITE - 128)) | (1 << (vbaParser.XOR - 128)))) != 0) or _la==vbaParser.COMMENT or _la==vbaParser.IDENTIFIER:
                self.state = 1162
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
                if la_ == 1:
                    self.state = 1159
                    self.moduleDeclarations()
                    pass

                elif la_ == 2:
                    self.state = 1160
                    self.moduleBody()
                    pass

                elif la_ == 3:
                    self.state = 1161
                    self.block()
                    pass


                self.state = 1166
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MidStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MID(self):
            return self.getToken(vbaParser.MID, 0)

        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def argsCall(self):
            return self.getTypedRuleContext(vbaParser.ArgsCallContext,0)


        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_midStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMidStmt" ):
                listener.enterMidStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMidStmt" ):
                listener.exitMidStmt(self)




    def midStmt(self):

        localctx = vbaParser.MidStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_midStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1167
            self.match(vbaParser.MID)
            self.state = 1169
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1168
                self.match(vbaParser.WS)


            self.state = 1171
            self.match(vbaParser.LPAREN)
            self.state = 1173
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.state = 1172
                self.match(vbaParser.WS)


            self.state = 1175
            self.argsCall()
            self.state = 1177
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1176
                self.match(vbaParser.WS)


            self.state = 1179
            self.match(vbaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MkdirStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MKDIR(self):
            return self.getToken(vbaParser.MKDIR, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_mkdirStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMkdirStmt" ):
                listener.enterMkdirStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMkdirStmt" ):
                listener.exitMkdirStmt(self)




    def mkdirStmt(self):

        localctx = vbaParser.MkdirStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_mkdirStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1181
            self.match(vbaParser.MKDIR)
            self.state = 1182
            self.match(vbaParser.WS)
            self.state = 1183
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NameStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(vbaParser.NAME, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)


        def AS(self):
            return self.getToken(vbaParser.AS, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_nameStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameStmt" ):
                listener.enterNameStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameStmt" ):
                listener.exitNameStmt(self)




    def nameStmt(self):

        localctx = vbaParser.NameStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_nameStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1185
            self.match(vbaParser.NAME)
            self.state = 1186
            self.match(vbaParser.WS)
            self.state = 1187
            self.valueStmt(0)
            self.state = 1188
            self.match(vbaParser.WS)
            self.state = 1189
            self.match(vbaParser.AS)
            self.state = 1190
            self.match(vbaParser.WS)
            self.state = 1191
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OnErrorStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ON_ERROR(self):
            return self.getToken(vbaParser.ON_ERROR, 0)

        def ON_LOCAL_ERROR(self):
            return self.getToken(vbaParser.ON_LOCAL_ERROR, 0)

        def GOTO(self):
            return self.getToken(vbaParser.GOTO, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def RESUME(self):
            return self.getToken(vbaParser.RESUME, 0)

        def NEXT(self):
            return self.getToken(vbaParser.NEXT, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_onErrorStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnErrorStmt" ):
                listener.enterOnErrorStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnErrorStmt" ):
                listener.exitOnErrorStmt(self)




    def onErrorStmt(self):

        localctx = vbaParser.OnErrorStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_onErrorStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1193
            _la = self._input.LA(1)
            if not(_la==vbaParser.ON_ERROR or _la==vbaParser.ON_LOCAL_ERROR):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
            self.state = 1194
            self.match(vbaParser.WS)
            self.state = 1201
            token = self._input.LA(1)
            if token in [vbaParser.GOTO]:
                self.state = 1195
                self.match(vbaParser.GOTO)
                self.state = 1196
                self.match(vbaParser.WS)
                self.state = 1197
                self.valueStmt(0)

            elif token in [vbaParser.RESUME]:
                self.state = 1198
                self.match(vbaParser.RESUME)
                self.state = 1199
                self.match(vbaParser.WS)
                self.state = 1200
                self.match(vbaParser.NEXT)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OnGoToStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(vbaParser.ON, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)


        def GOTO(self):
            return self.getToken(vbaParser.GOTO, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_onGoToStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnGoToStmt" ):
                listener.enterOnGoToStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnGoToStmt" ):
                listener.exitOnGoToStmt(self)




    def onGoToStmt(self):

        localctx = vbaParser.OnGoToStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_onGoToStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1203
            self.match(vbaParser.ON)
            self.state = 1204
            self.match(vbaParser.WS)
            self.state = 1205
            self.valueStmt(0)
            self.state = 1206
            self.match(vbaParser.WS)
            self.state = 1207
            self.match(vbaParser.GOTO)
            self.state = 1208
            self.match(vbaParser.WS)
            self.state = 1209
            self.valueStmt(0)
            self.state = 1220
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,147,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1211
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 1210
                        self.match(vbaParser.WS)


                    self.state = 1213
                    self.match(vbaParser.T__0)
                    self.state = 1215
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 1214
                        self.match(vbaParser.WS)


                    self.state = 1217
                    self.valueStmt(0) 
                self.state = 1222
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,147,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OnGoSubStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(vbaParser.ON, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)


        def GOSUB(self):
            return self.getToken(vbaParser.GOSUB, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_onGoSubStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnGoSubStmt" ):
                listener.enterOnGoSubStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnGoSubStmt" ):
                listener.exitOnGoSubStmt(self)




    def onGoSubStmt(self):

        localctx = vbaParser.OnGoSubStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_onGoSubStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1223
            self.match(vbaParser.ON)
            self.state = 1224
            self.match(vbaParser.WS)
            self.state = 1225
            self.valueStmt(0)
            self.state = 1226
            self.match(vbaParser.WS)
            self.state = 1227
            self.match(vbaParser.GOSUB)
            self.state = 1228
            self.match(vbaParser.WS)
            self.state = 1229
            self.valueStmt(0)
            self.state = 1240
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,150,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1231
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 1230
                        self.match(vbaParser.WS)


                    self.state = 1233
                    self.match(vbaParser.T__0)
                    self.state = 1235
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 1234
                        self.match(vbaParser.WS)


                    self.state = 1237
                    self.valueStmt(0) 
                self.state = 1242
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,150,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OpenStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN(self):
            return self.getToken(vbaParser.OPEN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)


        def FOR(self):
            return self.getToken(vbaParser.FOR, 0)

        def AS(self):
            return self.getToken(vbaParser.AS, 0)

        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def APPEND(self):
            return self.getToken(vbaParser.APPEND, 0)

        def BINARY(self):
            return self.getToken(vbaParser.BINARY, 0)

        def INPUT(self):
            return self.getToken(vbaParser.INPUT, 0)

        def OUTPUT(self):
            return self.getToken(vbaParser.OUTPUT, 0)

        def RANDOM(self):
            return self.getToken(vbaParser.RANDOM, 0)

        def ACCESS(self):
            return self.getToken(vbaParser.ACCESS, 0)

        def LEN(self):
            return self.getToken(vbaParser.LEN, 0)

        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def READ(self):
            return self.getToken(vbaParser.READ, 0)

        def WRITE(self):
            return self.getToken(vbaParser.WRITE, 0)

        def READ_WRITE(self):
            return self.getToken(vbaParser.READ_WRITE, 0)

        def SHARED(self):
            return self.getToken(vbaParser.SHARED, 0)

        def LOCK_READ(self):
            return self.getToken(vbaParser.LOCK_READ, 0)

        def LOCK_WRITE(self):
            return self.getToken(vbaParser.LOCK_WRITE, 0)

        def LOCK_READ_WRITE(self):
            return self.getToken(vbaParser.LOCK_READ_WRITE, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_openStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpenStmt" ):
                listener.enterOpenStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpenStmt" ):
                listener.exitOpenStmt(self)




    def openStmt(self):

        localctx = vbaParser.OpenStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_openStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1243
            self.match(vbaParser.OPEN)
            self.state = 1244
            self.match(vbaParser.WS)
            self.state = 1245
            self.valueStmt(0)
            self.state = 1246
            self.match(vbaParser.WS)
            self.state = 1247
            self.match(vbaParser.FOR)
            self.state = 1248
            self.match(vbaParser.WS)
            self.state = 1249
            _la = self._input.LA(1)
            if not(_la==vbaParser.APPEND or _la==vbaParser.BINARY or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & ((1 << (vbaParser.INPUT - 86)) | (1 << (vbaParser.OUTPUT - 86)) | (1 << (vbaParser.RANDOM - 86)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
            self.state = 1254
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
            if la_ == 1:
                self.state = 1250
                self.match(vbaParser.WS)
                self.state = 1251
                self.match(vbaParser.ACCESS)
                self.state = 1252
                self.match(vbaParser.WS)
                self.state = 1253
                _la = self._input.LA(1)
                if not(((((_la - 142)) & ~0x3f) == 0 and ((1 << (_la - 142)) & ((1 << (vbaParser.READ - 142)) | (1 << (vbaParser.READ_WRITE - 142)) | (1 << (vbaParser.WRITE - 142)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()


            self.state = 1258
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
            if la_ == 1:
                self.state = 1256
                self.match(vbaParser.WS)
                self.state = 1257
                _la = self._input.LA(1)
                if not(((((_la - 99)) & ~0x3f) == 0 and ((1 << (_la - 99)) & ((1 << (vbaParser.LOCK_READ - 99)) | (1 << (vbaParser.LOCK_WRITE - 99)) | (1 << (vbaParser.LOCK_READ_WRITE - 99)) | (1 << (vbaParser.SHARED - 99)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()


            self.state = 1260
            self.match(vbaParser.WS)
            self.state = 1261
            self.match(vbaParser.AS)
            self.state = 1262
            self.match(vbaParser.WS)
            self.state = 1263
            self.fileNumber()
            self.state = 1274
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
            if la_ == 1:
                self.state = 1264
                self.match(vbaParser.WS)
                self.state = 1265
                self.match(vbaParser.LEN)
                self.state = 1267
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1266
                    self.match(vbaParser.WS)


                self.state = 1269
                self.match(vbaParser.EQ)
                self.state = 1271
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1270
                    self.match(vbaParser.WS)


                self.state = 1273
                self.valueStmt(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OutputListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def outputList_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.OutputList_ExpressionContext)
            else:
                return self.getTypedRuleContext(vbaParser.OutputList_ExpressionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_outputList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutputList" ):
                listener.enterOutputList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutputList" ):
                listener.exitOutputList(self)




    def outputList(self):

        localctx = vbaParser.OutputListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_outputList)
        self._la = 0 # Token type
        try:
            self.state = 1309
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1276
                self.outputList_Expression()
                self.state = 1289
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,159,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1278
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1277
                            self.match(vbaParser.WS)


                        self.state = 1280
                        _la = self._input.LA(1)
                        if not(_la==vbaParser.T__0 or _la==vbaParser.T__1):
                            self._errHandler.recoverInline(self)
                        else:
                            self.consume()
                        self.state = 1282
                        self._errHandler.sync(self);
                        la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
                        if la_ == 1:
                            self.state = 1281
                            self.match(vbaParser.WS)


                        self.state = 1285
                        self._errHandler.sync(self);
                        la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
                        if la_ == 1:
                            self.state = 1284
                            self.outputList_Expression()

                 
                    self.state = 1291
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,159,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1293
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST) | (1 << vbaParser.DATABASE) | (1 << vbaParser.DATE) | (1 << vbaParser.DECLARE) | (1 << vbaParser.DEFBOOL) | (1 << vbaParser.DEFBYTE) | (1 << vbaParser.DEFDATE) | (1 << vbaParser.DEFDBL) | (1 << vbaParser.DEFDEC) | (1 << vbaParser.DEFCUR) | (1 << vbaParser.DEFINT) | (1 << vbaParser.DEFLNG) | (1 << vbaParser.DEFOBJ) | (1 << vbaParser.DEFSNG) | (1 << vbaParser.DEFSTR) | (1 << vbaParser.DEFVAR) | (1 << vbaParser.DELETESETTING) | (1 << vbaParser.DIM) | (1 << vbaParser.DO) | (1 << vbaParser.DOUBLE) | (1 << vbaParser.EACH) | (1 << vbaParser.ELSE) | (1 << vbaParser.ELSEIF) | (1 << vbaParser.END) | (1 << vbaParser.ENUM))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)) | (1 << (vbaParser.LIB - 64)) | (1 << (vbaParser.LIKE - 64)) | (1 << (vbaParser.LSET - 64)) | (1 << (vbaParser.ME - 64)) | (1 << (vbaParser.MID - 64)) | (1 << (vbaParser.MKDIR - 64)) | (1 << (vbaParser.MOD - 64)) | (1 << (vbaParser.NAME - 64)) | (1 << (vbaParser.NEXT - 64)) | (1 << (vbaParser.NEW - 64)) | (1 << (vbaParser.NOT - 64)) | (1 << (vbaParser.NOTHING - 64)) | (1 << (vbaParser.NULL - 64)) | (1 << (vbaParser.ON - 64)) | (1 << (vbaParser.OPEN - 64)) | (1 << (vbaParser.OPTIONAL - 64)) | (1 << (vbaParser.OR - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)) | (1 << (vbaParser.SPC - 128)) | (1 << (vbaParser.STATIC - 128)) | (1 << (vbaParser.STEP - 128)) | (1 << (vbaParser.STOP - 128)) | (1 << (vbaParser.STRING - 128)) | (1 << (vbaParser.SUB - 128)) | (1 << (vbaParser.TAB - 128)) | (1 << (vbaParser.TEXT - 128)) | (1 << (vbaParser.THEN - 128)) | (1 << (vbaParser.TIME - 128)) | (1 << (vbaParser.TO - 128)) | (1 << (vbaParser.TRUE - 128)) | (1 << (vbaParser.TYPE - 128)) | (1 << (vbaParser.TYPEOF - 128)) | (1 << (vbaParser.UNLOAD - 128)) | (1 << (vbaParser.UNLOCK - 128)) | (1 << (vbaParser.UNTIL - 128)) | (1 << (vbaParser.VARIANT - 128)) | (1 << (vbaParser.VERSION - 128)) | (1 << (vbaParser.WEND - 128)) | (1 << (vbaParser.WHILE - 128)) | (1 << (vbaParser.WIDTH - 128)) | (1 << (vbaParser.WITH - 128)) | (1 << (vbaParser.WITHEVENTS - 128)) | (1 << (vbaParser.WRITE - 128)) | (1 << (vbaParser.XOR - 128)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (vbaParser.LPAREN - 193)) | (1 << (vbaParser.MINUS - 193)) | (1 << (vbaParser.PLUS - 193)) | (1 << (vbaParser.STRINGLITERAL - 193)) | (1 << (vbaParser.OCTLITERAL - 193)) | (1 << (vbaParser.HEXLITERAL - 193)) | (1 << (vbaParser.SHORTLITERAL - 193)) | (1 << (vbaParser.INTEGERLITERAL - 193)) | (1 << (vbaParser.DOUBLELITERAL - 193)) | (1 << (vbaParser.DATELITERAL - 193)) | (1 << (vbaParser.IDENTIFIER - 193)))) != 0):
                    self.state = 1292
                    self.outputList_Expression()


                self.state = 1305 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1296
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1295
                            self.match(vbaParser.WS)


                        self.state = 1298
                        _la = self._input.LA(1)
                        if not(_la==vbaParser.T__0 or _la==vbaParser.T__1):
                            self._errHandler.recoverInline(self)
                        else:
                            self.consume()
                        self.state = 1300
                        self._errHandler.sync(self);
                        la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
                        if la_ == 1:
                            self.state = 1299
                            self.match(vbaParser.WS)


                        self.state = 1303
                        self._errHandler.sync(self);
                        la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
                        if la_ == 1:
                            self.state = 1302
                            self.outputList_Expression()



                    else:
                        raise NoViableAltException(self)
                    self.state = 1307 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,164,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OutputList_ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def SPC(self):
            return self.getToken(vbaParser.SPC, 0)

        def TAB(self):
            return self.getToken(vbaParser.TAB, 0)

        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def argsCall(self):
            return self.getTypedRuleContext(vbaParser.ArgsCallContext,0)


        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_outputList_Expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutputList_Expression" ):
                listener.enterOutputList_Expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutputList_Expression" ):
                listener.exitOutputList_Expression(self)




    def outputList_Expression(self):

        localctx = vbaParser.OutputList_ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_outputList_Expression)
        self._la = 0 # Token type
        try:
            self.state = 1328
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1311
                self.valueStmt(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1312
                _la = self._input.LA(1)
                if not(_la==vbaParser.SPC or _la==vbaParser.TAB):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()
                self.state = 1326
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
                if la_ == 1:
                    self.state = 1314
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 1313
                        self.match(vbaParser.WS)


                    self.state = 1316
                    self.match(vbaParser.LPAREN)
                    self.state = 1318
                    self._errHandler.sync(self);
                    la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
                    if la_ == 1:
                        self.state = 1317
                        self.match(vbaParser.WS)


                    self.state = 1320
                    self.argsCall()
                    self.state = 1322
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 1321
                        self.match(vbaParser.WS)


                    self.state = 1324
                    self.match(vbaParser.RPAREN)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrintStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRINT(self):
            return self.getToken(vbaParser.PRINT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def outputList(self):
            return self.getTypedRuleContext(vbaParser.OutputListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_printStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrintStmt" ):
                listener.enterPrintStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrintStmt" ):
                listener.exitPrintStmt(self)




    def printStmt(self):

        localctx = vbaParser.PrintStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_printStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1330
            self.match(vbaParser.PRINT)
            self.state = 1331
            self.match(vbaParser.WS)
            self.state = 1332
            self.fileNumber()
            self.state = 1334
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1333
                self.match(vbaParser.WS)


            self.state = 1336
            self.match(vbaParser.T__0)
            self.state = 1341
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                self.state = 1338
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
                if la_ == 1:
                    self.state = 1337
                    self.match(vbaParser.WS)


                self.state = 1340
                self.outputList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PropertyGetStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROPERTY_GET(self):
            return self.getToken(vbaParser.PROPERTY_GET, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def END_PROPERTY(self):
            return self.getToken(vbaParser.END_PROPERTY, 0)

        def visibility(self):
            return self.getTypedRuleContext(vbaParser.VisibilityContext,0)


        def STATIC(self):
            return self.getToken(vbaParser.STATIC, 0)

        def typeHint(self):
            return self.getTypedRuleContext(vbaParser.TypeHintContext,0)


        def argList(self):
            return self.getTypedRuleContext(vbaParser.ArgListContext,0)


        def asTypeClause(self):
            return self.getTypedRuleContext(vbaParser.AsTypeClauseContext,0)


        def block(self):
            return self.getTypedRuleContext(vbaParser.BlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_propertyGetStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyGetStmt" ):
                listener.enterPropertyGetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyGetStmt" ):
                listener.exitPropertyGetStmt(self)




    def propertyGetStmt(self):

        localctx = vbaParser.PropertyGetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_propertyGetStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1346
            _la = self._input.LA(1)
            if ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (vbaParser.FRIEND - 75)) | (1 << (vbaParser.GLOBAL - 75)) | (1 << (vbaParser.PRIVATE - 75)) | (1 << (vbaParser.PUBLIC - 75)))) != 0):
                self.state = 1343
                self.visibility()
                self.state = 1344
                self.match(vbaParser.WS)


            self.state = 1350
            _la = self._input.LA(1)
            if _la==vbaParser.STATIC:
                self.state = 1348
                self.match(vbaParser.STATIC)
                self.state = 1349
                self.match(vbaParser.WS)


            self.state = 1352
            self.match(vbaParser.PROPERTY_GET)
            self.state = 1353
            self.match(vbaParser.WS)
            self.state = 1354
            self.ambiguousIdentifier()
            self.state = 1356
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
            if la_ == 1:
                self.state = 1355
                self.typeHint()


            self.state = 1362
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
            if la_ == 1:
                self.state = 1359
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1358
                    self.match(vbaParser.WS)


                self.state = 1361
                self.argList()


            self.state = 1366
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
            if la_ == 1:
                self.state = 1364
                self.match(vbaParser.WS)
                self.state = 1365
                self.asTypeClause()


            self.state = 1368
            self.endOfStatement()
            self.state = 1370
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST) | (1 << vbaParser.DATABASE) | (1 << vbaParser.DATE) | (1 << vbaParser.DECLARE) | (1 << vbaParser.DEFBOOL) | (1 << vbaParser.DEFBYTE) | (1 << vbaParser.DEFDATE) | (1 << vbaParser.DEFDBL) | (1 << vbaParser.DEFDEC) | (1 << vbaParser.DEFCUR) | (1 << vbaParser.DEFINT) | (1 << vbaParser.DEFLNG) | (1 << vbaParser.DEFOBJ) | (1 << vbaParser.DEFSNG) | (1 << vbaParser.DEFSTR) | (1 << vbaParser.DEFVAR) | (1 << vbaParser.DELETESETTING) | (1 << vbaParser.DIM) | (1 << vbaParser.DO) | (1 << vbaParser.DOUBLE) | (1 << vbaParser.EACH) | (1 << vbaParser.ELSE) | (1 << vbaParser.ELSEIF) | (1 << vbaParser.END) | (1 << vbaParser.ENUM))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.EXIT_DO - 64)) | (1 << (vbaParser.EXIT_FOR - 64)) | (1 << (vbaParser.EXIT_FUNCTION - 64)) | (1 << (vbaParser.EXIT_PROPERTY - 64)) | (1 << (vbaParser.EXIT_SUB - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)) | (1 << (vbaParser.LIB - 64)) | (1 << (vbaParser.LIKE - 64)) | (1 << (vbaParser.LINE_INPUT - 64)) | (1 << (vbaParser.LSET - 64)) | (1 << (vbaParser.MACRO_CONST - 64)) | (1 << (vbaParser.MACRO_IF - 64)) | (1 << (vbaParser.ME - 64)) | (1 << (vbaParser.MID - 64)) | (1 << (vbaParser.MKDIR - 64)) | (1 << (vbaParser.MOD - 64)) | (1 << (vbaParser.NAME - 64)) | (1 << (vbaParser.NEXT - 64)) | (1 << (vbaParser.NEW - 64)) | (1 << (vbaParser.NOT - 64)) | (1 << (vbaParser.NOTHING - 64)) | (1 << (vbaParser.NULL - 64)) | (1 << (vbaParser.ON - 64)) | (1 << (vbaParser.ON_ERROR - 64)) | (1 << (vbaParser.ON_LOCAL_ERROR - 64)) | (1 << (vbaParser.OPEN - 64)) | (1 << (vbaParser.OPTIONAL - 64)) | (1 << (vbaParser.OR - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)) | (1 << (vbaParser.SPC - 128)) | (1 << (vbaParser.STATIC - 128)) | (1 << (vbaParser.STEP - 128)) | (1 << (vbaParser.STOP - 128)) | (1 << (vbaParser.STRING - 128)) | (1 << (vbaParser.SUB - 128)) | (1 << (vbaParser.TAB - 128)) | (1 << (vbaParser.TEXT - 128)) | (1 << (vbaParser.THEN - 128)) | (1 << (vbaParser.TIME - 128)) | (1 << (vbaParser.TO - 128)) | (1 << (vbaParser.TRUE - 128)) | (1 << (vbaParser.TYPE - 128)) | (1 << (vbaParser.TYPEOF - 128)) | (1 << (vbaParser.UNLOAD - 128)) | (1 << (vbaParser.UNLOCK - 128)) | (1 << (vbaParser.UNTIL - 128)) | (1 << (vbaParser.VARIANT - 128)) | (1 << (vbaParser.VERSION - 128)) | (1 << (vbaParser.WEND - 128)) | (1 << (vbaParser.WHILE - 128)) | (1 << (vbaParser.WIDTH - 128)) | (1 << (vbaParser.WITH - 128)) | (1 << (vbaParser.WITHEVENTS - 128)) | (1 << (vbaParser.WRITE - 128)) | (1 << (vbaParser.XOR - 128)))) != 0) or _la==vbaParser.IDENTIFIER:
                self.state = 1369
                self.block()


            self.state = 1372
            self.match(vbaParser.END_PROPERTY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PropertySetStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROPERTY_SET(self):
            return self.getToken(vbaParser.PROPERTY_SET, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def END_PROPERTY(self):
            return self.getToken(vbaParser.END_PROPERTY, 0)

        def visibility(self):
            return self.getTypedRuleContext(vbaParser.VisibilityContext,0)


        def STATIC(self):
            return self.getToken(vbaParser.STATIC, 0)

        def argList(self):
            return self.getTypedRuleContext(vbaParser.ArgListContext,0)


        def block(self):
            return self.getTypedRuleContext(vbaParser.BlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_propertySetStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertySetStmt" ):
                listener.enterPropertySetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertySetStmt" ):
                listener.exitPropertySetStmt(self)




    def propertySetStmt(self):

        localctx = vbaParser.PropertySetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_propertySetStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1377
            _la = self._input.LA(1)
            if ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (vbaParser.FRIEND - 75)) | (1 << (vbaParser.GLOBAL - 75)) | (1 << (vbaParser.PRIVATE - 75)) | (1 << (vbaParser.PUBLIC - 75)))) != 0):
                self.state = 1374
                self.visibility()
                self.state = 1375
                self.match(vbaParser.WS)


            self.state = 1381
            _la = self._input.LA(1)
            if _la==vbaParser.STATIC:
                self.state = 1379
                self.match(vbaParser.STATIC)
                self.state = 1380
                self.match(vbaParser.WS)


            self.state = 1383
            self.match(vbaParser.PROPERTY_SET)
            self.state = 1384
            self.match(vbaParser.WS)
            self.state = 1385
            self.ambiguousIdentifier()
            self.state = 1390
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
            if la_ == 1:
                self.state = 1387
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1386
                    self.match(vbaParser.WS)


                self.state = 1389
                self.argList()


            self.state = 1392
            self.endOfStatement()
            self.state = 1394
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST) | (1 << vbaParser.DATABASE) | (1 << vbaParser.DATE) | (1 << vbaParser.DECLARE) | (1 << vbaParser.DEFBOOL) | (1 << vbaParser.DEFBYTE) | (1 << vbaParser.DEFDATE) | (1 << vbaParser.DEFDBL) | (1 << vbaParser.DEFDEC) | (1 << vbaParser.DEFCUR) | (1 << vbaParser.DEFINT) | (1 << vbaParser.DEFLNG) | (1 << vbaParser.DEFOBJ) | (1 << vbaParser.DEFSNG) | (1 << vbaParser.DEFSTR) | (1 << vbaParser.DEFVAR) | (1 << vbaParser.DELETESETTING) | (1 << vbaParser.DIM) | (1 << vbaParser.DO) | (1 << vbaParser.DOUBLE) | (1 << vbaParser.EACH) | (1 << vbaParser.ELSE) | (1 << vbaParser.ELSEIF) | (1 << vbaParser.END) | (1 << vbaParser.ENUM))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.EXIT_DO - 64)) | (1 << (vbaParser.EXIT_FOR - 64)) | (1 << (vbaParser.EXIT_FUNCTION - 64)) | (1 << (vbaParser.EXIT_PROPERTY - 64)) | (1 << (vbaParser.EXIT_SUB - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)) | (1 << (vbaParser.LIB - 64)) | (1 << (vbaParser.LIKE - 64)) | (1 << (vbaParser.LINE_INPUT - 64)) | (1 << (vbaParser.LSET - 64)) | (1 << (vbaParser.MACRO_CONST - 64)) | (1 << (vbaParser.MACRO_IF - 64)) | (1 << (vbaParser.ME - 64)) | (1 << (vbaParser.MID - 64)) | (1 << (vbaParser.MKDIR - 64)) | (1 << (vbaParser.MOD - 64)) | (1 << (vbaParser.NAME - 64)) | (1 << (vbaParser.NEXT - 64)) | (1 << (vbaParser.NEW - 64)) | (1 << (vbaParser.NOT - 64)) | (1 << (vbaParser.NOTHING - 64)) | (1 << (vbaParser.NULL - 64)) | (1 << (vbaParser.ON - 64)) | (1 << (vbaParser.ON_ERROR - 64)) | (1 << (vbaParser.ON_LOCAL_ERROR - 64)) | (1 << (vbaParser.OPEN - 64)) | (1 << (vbaParser.OPTIONAL - 64)) | (1 << (vbaParser.OR - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)) | (1 << (vbaParser.SPC - 128)) | (1 << (vbaParser.STATIC - 128)) | (1 << (vbaParser.STEP - 128)) | (1 << (vbaParser.STOP - 128)) | (1 << (vbaParser.STRING - 128)) | (1 << (vbaParser.SUB - 128)) | (1 << (vbaParser.TAB - 128)) | (1 << (vbaParser.TEXT - 128)) | (1 << (vbaParser.THEN - 128)) | (1 << (vbaParser.TIME - 128)) | (1 << (vbaParser.TO - 128)) | (1 << (vbaParser.TRUE - 128)) | (1 << (vbaParser.TYPE - 128)) | (1 << (vbaParser.TYPEOF - 128)) | (1 << (vbaParser.UNLOAD - 128)) | (1 << (vbaParser.UNLOCK - 128)) | (1 << (vbaParser.UNTIL - 128)) | (1 << (vbaParser.VARIANT - 128)) | (1 << (vbaParser.VERSION - 128)) | (1 << (vbaParser.WEND - 128)) | (1 << (vbaParser.WHILE - 128)) | (1 << (vbaParser.WIDTH - 128)) | (1 << (vbaParser.WITH - 128)) | (1 << (vbaParser.WITHEVENTS - 128)) | (1 << (vbaParser.WRITE - 128)) | (1 << (vbaParser.XOR - 128)))) != 0) or _la==vbaParser.IDENTIFIER:
                self.state = 1393
                self.block()


            self.state = 1396
            self.match(vbaParser.END_PROPERTY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PropertyLetStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROPERTY_LET(self):
            return self.getToken(vbaParser.PROPERTY_LET, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def END_PROPERTY(self):
            return self.getToken(vbaParser.END_PROPERTY, 0)

        def visibility(self):
            return self.getTypedRuleContext(vbaParser.VisibilityContext,0)


        def STATIC(self):
            return self.getToken(vbaParser.STATIC, 0)

        def argList(self):
            return self.getTypedRuleContext(vbaParser.ArgListContext,0)


        def block(self):
            return self.getTypedRuleContext(vbaParser.BlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_propertyLetStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyLetStmt" ):
                listener.enterPropertyLetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyLetStmt" ):
                listener.exitPropertyLetStmt(self)




    def propertyLetStmt(self):

        localctx = vbaParser.PropertyLetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_propertyLetStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1401
            _la = self._input.LA(1)
            if ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (vbaParser.FRIEND - 75)) | (1 << (vbaParser.GLOBAL - 75)) | (1 << (vbaParser.PRIVATE - 75)) | (1 << (vbaParser.PUBLIC - 75)))) != 0):
                self.state = 1398
                self.visibility()
                self.state = 1399
                self.match(vbaParser.WS)


            self.state = 1405
            _la = self._input.LA(1)
            if _la==vbaParser.STATIC:
                self.state = 1403
                self.match(vbaParser.STATIC)
                self.state = 1404
                self.match(vbaParser.WS)


            self.state = 1407
            self.match(vbaParser.PROPERTY_LET)
            self.state = 1408
            self.match(vbaParser.WS)
            self.state = 1409
            self.ambiguousIdentifier()
            self.state = 1414
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
            if la_ == 1:
                self.state = 1411
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1410
                    self.match(vbaParser.WS)


                self.state = 1413
                self.argList()


            self.state = 1416
            self.endOfStatement()
            self.state = 1418
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST) | (1 << vbaParser.DATABASE) | (1 << vbaParser.DATE) | (1 << vbaParser.DECLARE) | (1 << vbaParser.DEFBOOL) | (1 << vbaParser.DEFBYTE) | (1 << vbaParser.DEFDATE) | (1 << vbaParser.DEFDBL) | (1 << vbaParser.DEFDEC) | (1 << vbaParser.DEFCUR) | (1 << vbaParser.DEFINT) | (1 << vbaParser.DEFLNG) | (1 << vbaParser.DEFOBJ) | (1 << vbaParser.DEFSNG) | (1 << vbaParser.DEFSTR) | (1 << vbaParser.DEFVAR) | (1 << vbaParser.DELETESETTING) | (1 << vbaParser.DIM) | (1 << vbaParser.DO) | (1 << vbaParser.DOUBLE) | (1 << vbaParser.EACH) | (1 << vbaParser.ELSE) | (1 << vbaParser.ELSEIF) | (1 << vbaParser.END) | (1 << vbaParser.ENUM))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.EXIT_DO - 64)) | (1 << (vbaParser.EXIT_FOR - 64)) | (1 << (vbaParser.EXIT_FUNCTION - 64)) | (1 << (vbaParser.EXIT_PROPERTY - 64)) | (1 << (vbaParser.EXIT_SUB - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)) | (1 << (vbaParser.LIB - 64)) | (1 << (vbaParser.LIKE - 64)) | (1 << (vbaParser.LINE_INPUT - 64)) | (1 << (vbaParser.LSET - 64)) | (1 << (vbaParser.MACRO_CONST - 64)) | (1 << (vbaParser.MACRO_IF - 64)) | (1 << (vbaParser.ME - 64)) | (1 << (vbaParser.MID - 64)) | (1 << (vbaParser.MKDIR - 64)) | (1 << (vbaParser.MOD - 64)) | (1 << (vbaParser.NAME - 64)) | (1 << (vbaParser.NEXT - 64)) | (1 << (vbaParser.NEW - 64)) | (1 << (vbaParser.NOT - 64)) | (1 << (vbaParser.NOTHING - 64)) | (1 << (vbaParser.NULL - 64)) | (1 << (vbaParser.ON - 64)) | (1 << (vbaParser.ON_ERROR - 64)) | (1 << (vbaParser.ON_LOCAL_ERROR - 64)) | (1 << (vbaParser.OPEN - 64)) | (1 << (vbaParser.OPTIONAL - 64)) | (1 << (vbaParser.OR - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)) | (1 << (vbaParser.SPC - 128)) | (1 << (vbaParser.STATIC - 128)) | (1 << (vbaParser.STEP - 128)) | (1 << (vbaParser.STOP - 128)) | (1 << (vbaParser.STRING - 128)) | (1 << (vbaParser.SUB - 128)) | (1 << (vbaParser.TAB - 128)) | (1 << (vbaParser.TEXT - 128)) | (1 << (vbaParser.THEN - 128)) | (1 << (vbaParser.TIME - 128)) | (1 << (vbaParser.TO - 128)) | (1 << (vbaParser.TRUE - 128)) | (1 << (vbaParser.TYPE - 128)) | (1 << (vbaParser.TYPEOF - 128)) | (1 << (vbaParser.UNLOAD - 128)) | (1 << (vbaParser.UNLOCK - 128)) | (1 << (vbaParser.UNTIL - 128)) | (1 << (vbaParser.VARIANT - 128)) | (1 << (vbaParser.VERSION - 128)) | (1 << (vbaParser.WEND - 128)) | (1 << (vbaParser.WHILE - 128)) | (1 << (vbaParser.WIDTH - 128)) | (1 << (vbaParser.WITH - 128)) | (1 << (vbaParser.WITHEVENTS - 128)) | (1 << (vbaParser.WRITE - 128)) | (1 << (vbaParser.XOR - 128)))) != 0) or _la==vbaParser.IDENTIFIER:
                self.state = 1417
                self.block()


            self.state = 1420
            self.match(vbaParser.END_PROPERTY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PutStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUT(self):
            return self.getToken(vbaParser.PUT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_putStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPutStmt" ):
                listener.enterPutStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPutStmt" ):
                listener.exitPutStmt(self)




    def putStmt(self):

        localctx = vbaParser.PutStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_putStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1422
            self.match(vbaParser.PUT)
            self.state = 1423
            self.match(vbaParser.WS)
            self.state = 1424
            self.fileNumber()
            self.state = 1426
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1425
                self.match(vbaParser.WS)


            self.state = 1428
            self.match(vbaParser.T__0)
            self.state = 1430
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
            if la_ == 1:
                self.state = 1429
                self.match(vbaParser.WS)


            self.state = 1433
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST) | (1 << vbaParser.DATABASE) | (1 << vbaParser.DATE) | (1 << vbaParser.DECLARE) | (1 << vbaParser.DEFBOOL) | (1 << vbaParser.DEFBYTE) | (1 << vbaParser.DEFDATE) | (1 << vbaParser.DEFDBL) | (1 << vbaParser.DEFDEC) | (1 << vbaParser.DEFCUR) | (1 << vbaParser.DEFINT) | (1 << vbaParser.DEFLNG) | (1 << vbaParser.DEFOBJ) | (1 << vbaParser.DEFSNG) | (1 << vbaParser.DEFSTR) | (1 << vbaParser.DEFVAR) | (1 << vbaParser.DELETESETTING) | (1 << vbaParser.DIM) | (1 << vbaParser.DO) | (1 << vbaParser.DOUBLE) | (1 << vbaParser.EACH) | (1 << vbaParser.ELSE) | (1 << vbaParser.ELSEIF) | (1 << vbaParser.END) | (1 << vbaParser.ENUM))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)) | (1 << (vbaParser.LIB - 64)) | (1 << (vbaParser.LIKE - 64)) | (1 << (vbaParser.LSET - 64)) | (1 << (vbaParser.ME - 64)) | (1 << (vbaParser.MID - 64)) | (1 << (vbaParser.MKDIR - 64)) | (1 << (vbaParser.MOD - 64)) | (1 << (vbaParser.NAME - 64)) | (1 << (vbaParser.NEXT - 64)) | (1 << (vbaParser.NEW - 64)) | (1 << (vbaParser.NOT - 64)) | (1 << (vbaParser.NOTHING - 64)) | (1 << (vbaParser.NULL - 64)) | (1 << (vbaParser.ON - 64)) | (1 << (vbaParser.OPEN - 64)) | (1 << (vbaParser.OPTIONAL - 64)) | (1 << (vbaParser.OR - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)) | (1 << (vbaParser.SPC - 128)) | (1 << (vbaParser.STATIC - 128)) | (1 << (vbaParser.STEP - 128)) | (1 << (vbaParser.STOP - 128)) | (1 << (vbaParser.STRING - 128)) | (1 << (vbaParser.SUB - 128)) | (1 << (vbaParser.TAB - 128)) | (1 << (vbaParser.TEXT - 128)) | (1 << (vbaParser.THEN - 128)) | (1 << (vbaParser.TIME - 128)) | (1 << (vbaParser.TO - 128)) | (1 << (vbaParser.TRUE - 128)) | (1 << (vbaParser.TYPE - 128)) | (1 << (vbaParser.TYPEOF - 128)) | (1 << (vbaParser.UNLOAD - 128)) | (1 << (vbaParser.UNLOCK - 128)) | (1 << (vbaParser.UNTIL - 128)) | (1 << (vbaParser.VARIANT - 128)) | (1 << (vbaParser.VERSION - 128)) | (1 << (vbaParser.WEND - 128)) | (1 << (vbaParser.WHILE - 128)) | (1 << (vbaParser.WIDTH - 128)) | (1 << (vbaParser.WITH - 128)) | (1 << (vbaParser.WITHEVENTS - 128)) | (1 << (vbaParser.WRITE - 128)) | (1 << (vbaParser.XOR - 128)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (vbaParser.LPAREN - 193)) | (1 << (vbaParser.MINUS - 193)) | (1 << (vbaParser.PLUS - 193)) | (1 << (vbaParser.STRINGLITERAL - 193)) | (1 << (vbaParser.OCTLITERAL - 193)) | (1 << (vbaParser.HEXLITERAL - 193)) | (1 << (vbaParser.SHORTLITERAL - 193)) | (1 << (vbaParser.INTEGERLITERAL - 193)) | (1 << (vbaParser.DOUBLELITERAL - 193)) | (1 << (vbaParser.DATELITERAL - 193)) | (1 << (vbaParser.IDENTIFIER - 193)))) != 0):
                self.state = 1432
                self.valueStmt(0)


            self.state = 1436
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1435
                self.match(vbaParser.WS)


            self.state = 1438
            self.match(vbaParser.T__0)
            self.state = 1440
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1439
                self.match(vbaParser.WS)


            self.state = 1442
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RaiseEventStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISEEVENT(self):
            return self.getToken(vbaParser.RAISEEVENT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def argsCall(self):
            return self.getTypedRuleContext(vbaParser.ArgsCallContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_raiseEventStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaiseEventStmt" ):
                listener.enterRaiseEventStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaiseEventStmt" ):
                listener.exitRaiseEventStmt(self)




    def raiseEventStmt(self):

        localctx = vbaParser.RaiseEventStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_raiseEventStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1444
            self.match(vbaParser.RAISEEVENT)
            self.state = 1445
            self.match(vbaParser.WS)
            self.state = 1446
            self.ambiguousIdentifier()
            self.state = 1461
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
            if la_ == 1:
                self.state = 1448
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1447
                    self.match(vbaParser.WS)


                self.state = 1450
                self.match(vbaParser.LPAREN)
                self.state = 1452
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
                if la_ == 1:
                    self.state = 1451
                    self.match(vbaParser.WS)


                self.state = 1458
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
                if la_ == 1:
                    self.state = 1454
                    self.argsCall()
                    self.state = 1456
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 1455
                        self.match(vbaParser.WS)




                self.state = 1460
                self.match(vbaParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RandomizeStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RANDOMIZE(self):
            return self.getToken(vbaParser.RANDOMIZE, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_randomizeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRandomizeStmt" ):
                listener.enterRandomizeStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRandomizeStmt" ):
                listener.exitRandomizeStmt(self)




    def randomizeStmt(self):

        localctx = vbaParser.RandomizeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_randomizeStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1463
            self.match(vbaParser.RANDOMIZE)
            self.state = 1466
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
            if la_ == 1:
                self.state = 1464
                self.match(vbaParser.WS)
                self.state = 1465
                self.valueStmt(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RedimStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REDIM(self):
            return self.getToken(vbaParser.REDIM, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def redimSubStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.RedimSubStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.RedimSubStmtContext,i)


        def PRESERVE(self):
            return self.getToken(vbaParser.PRESERVE, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_redimStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRedimStmt" ):
                listener.enterRedimStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRedimStmt" ):
                listener.exitRedimStmt(self)




    def redimStmt(self):

        localctx = vbaParser.RedimStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_redimStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1468
            self.match(vbaParser.REDIM)
            self.state = 1469
            self.match(vbaParser.WS)
            self.state = 1472
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
            if la_ == 1:
                self.state = 1470
                self.match(vbaParser.PRESERVE)
                self.state = 1471
                self.match(vbaParser.WS)


            self.state = 1474
            self.redimSubStmt()
            self.state = 1485
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,205,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1476
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 1475
                        self.match(vbaParser.WS)


                    self.state = 1478
                    self.match(vbaParser.T__0)
                    self.state = 1480
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 1479
                        self.match(vbaParser.WS)


                    self.state = 1482
                    self.redimSubStmt() 
                self.state = 1487
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,205,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RedimSubStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(vbaParser.ImplicitCallStmt_InStmtContext,0)


        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def subscripts(self):
            return self.getTypedRuleContext(vbaParser.SubscriptsContext,0)


        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def asTypeClause(self):
            return self.getTypedRuleContext(vbaParser.AsTypeClauseContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_redimSubStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRedimSubStmt" ):
                listener.enterRedimSubStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRedimSubStmt" ):
                listener.exitRedimSubStmt(self)




    def redimSubStmt(self):

        localctx = vbaParser.RedimSubStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_redimSubStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1488
            self.implicitCallStmt_InStmt()
            self.state = 1490
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1489
                self.match(vbaParser.WS)


            self.state = 1492
            self.match(vbaParser.LPAREN)
            self.state = 1494
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1493
                self.match(vbaParser.WS)


            self.state = 1496
            self.subscripts()
            self.state = 1498
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1497
                self.match(vbaParser.WS)


            self.state = 1500
            self.match(vbaParser.RPAREN)
            self.state = 1503
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
            if la_ == 1:
                self.state = 1501
                self.match(vbaParser.WS)
                self.state = 1502
                self.asTypeClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ResetStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(vbaParser.RESET, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_resetStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetStmt" ):
                listener.enterResetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetStmt" ):
                listener.exitResetStmt(self)




    def resetStmt(self):

        localctx = vbaParser.ResetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_resetStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1505
            self.match(vbaParser.RESET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ResumeStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESUME(self):
            return self.getToken(vbaParser.RESUME, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def NEXT(self):
            return self.getToken(vbaParser.NEXT, 0)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_resumeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResumeStmt" ):
                listener.enterResumeStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResumeStmt" ):
                listener.exitResumeStmt(self)




    def resumeStmt(self):

        localctx = vbaParser.ResumeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_resumeStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1507
            self.match(vbaParser.RESUME)
            self.state = 1513
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
            if la_ == 1:
                self.state = 1508
                self.match(vbaParser.WS)
                self.state = 1511
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
                if la_ == 1:
                    self.state = 1509
                    self.match(vbaParser.NEXT)
                    pass

                elif la_ == 2:
                    self.state = 1510
                    self.ambiguousIdentifier()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(vbaParser.RETURN, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_returnStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStmt" ):
                listener.enterReturnStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStmt" ):
                listener.exitReturnStmt(self)




    def returnStmt(self):

        localctx = vbaParser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_returnStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1515
            self.match(vbaParser.RETURN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RmdirStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RMDIR(self):
            return self.getToken(vbaParser.RMDIR, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_rmdirStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRmdirStmt" ):
                listener.enterRmdirStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRmdirStmt" ):
                listener.exitRmdirStmt(self)




    def rmdirStmt(self):

        localctx = vbaParser.RmdirStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_rmdirStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1517
            self.match(vbaParser.RMDIR)
            self.state = 1518
            self.match(vbaParser.WS)
            self.state = 1519
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RsetStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RSET(self):
            return self.getToken(vbaParser.RSET, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(vbaParser.ImplicitCallStmt_InStmtContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_rsetStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRsetStmt" ):
                listener.enterRsetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRsetStmt" ):
                listener.exitRsetStmt(self)




    def rsetStmt(self):

        localctx = vbaParser.RsetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_rsetStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1521
            self.match(vbaParser.RSET)
            self.state = 1522
            self.match(vbaParser.WS)
            self.state = 1523
            self.implicitCallStmt_InStmt()
            self.state = 1525
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1524
                self.match(vbaParser.WS)


            self.state = 1527
            self.match(vbaParser.EQ)
            self.state = 1529
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1528
                self.match(vbaParser.WS)


            self.state = 1531
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SavepictureStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAVEPICTURE(self):
            return self.getToken(vbaParser.SAVEPICTURE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_savepictureStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSavepictureStmt" ):
                listener.enterSavepictureStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSavepictureStmt" ):
                listener.exitSavepictureStmt(self)




    def savepictureStmt(self):

        localctx = vbaParser.SavepictureStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_savepictureStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1533
            self.match(vbaParser.SAVEPICTURE)
            self.state = 1534
            self.match(vbaParser.WS)
            self.state = 1535
            self.valueStmt(0)
            self.state = 1537
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1536
                self.match(vbaParser.WS)


            self.state = 1539
            self.match(vbaParser.T__0)
            self.state = 1541
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1540
                self.match(vbaParser.WS)


            self.state = 1543
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SaveSettingStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAVESETTING(self):
            return self.getToken(vbaParser.SAVESETTING, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_saveSettingStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSaveSettingStmt" ):
                listener.enterSaveSettingStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSaveSettingStmt" ):
                listener.exitSaveSettingStmt(self)




    def saveSettingStmt(self):

        localctx = vbaParser.SaveSettingStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_saveSettingStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1545
            self.match(vbaParser.SAVESETTING)
            self.state = 1546
            self.match(vbaParser.WS)
            self.state = 1547
            self.valueStmt(0)
            self.state = 1549
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1548
                self.match(vbaParser.WS)


            self.state = 1551
            self.match(vbaParser.T__0)
            self.state = 1553
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1552
                self.match(vbaParser.WS)


            self.state = 1555
            self.valueStmt(0)
            self.state = 1557
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1556
                self.match(vbaParser.WS)


            self.state = 1559
            self.match(vbaParser.T__0)
            self.state = 1561
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1560
                self.match(vbaParser.WS)


            self.state = 1563
            self.valueStmt(0)
            self.state = 1565
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1564
                self.match(vbaParser.WS)


            self.state = 1567
            self.match(vbaParser.T__0)
            self.state = 1569
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1568
                self.match(vbaParser.WS)


            self.state = 1571
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SeekStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEEK(self):
            return self.getToken(vbaParser.SEEK, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_seekStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSeekStmt" ):
                listener.enterSeekStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSeekStmt" ):
                listener.exitSeekStmt(self)




    def seekStmt(self):

        localctx = vbaParser.SeekStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_seekStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1573
            self.match(vbaParser.SEEK)
            self.state = 1574
            self.match(vbaParser.WS)
            self.state = 1575
            self.fileNumber()
            self.state = 1577
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1576
                self.match(vbaParser.WS)


            self.state = 1579
            self.match(vbaParser.T__0)
            self.state = 1581
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1580
                self.match(vbaParser.WS)


            self.state = 1583
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectCaseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(vbaParser.SELECT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def CASE(self):
            return self.getToken(vbaParser.CASE, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def END_SELECT(self):
            return self.getToken(vbaParser.END_SELECT, 0)

        def sC_Case(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.SC_CaseContext)
            else:
                return self.getTypedRuleContext(vbaParser.SC_CaseContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_selectCaseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectCaseStmt" ):
                listener.enterSelectCaseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectCaseStmt" ):
                listener.exitSelectCaseStmt(self)




    def selectCaseStmt(self):

        localctx = vbaParser.SelectCaseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_selectCaseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1585
            self.match(vbaParser.SELECT)
            self.state = 1586
            self.match(vbaParser.WS)
            self.state = 1587
            self.match(vbaParser.CASE)
            self.state = 1588
            self.match(vbaParser.WS)
            self.state = 1589
            self.valueStmt(0)
            self.state = 1590
            self.endOfStatement()
            self.state = 1594
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==vbaParser.CASE:
                self.state = 1591
                self.sC_Case()
                self.state = 1596
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1597
            self.match(vbaParser.END_SELECT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SC_SelectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return vbaParser.RULE_sC_Selection

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CaseCondValueContext(SC_SelectionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.SC_SelectionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseCondValue" ):
                listener.enterCaseCondValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseCondValue" ):
                listener.exitCaseCondValue(self)


    class CaseCondToContext(SC_SelectionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.SC_SelectionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)
        def TO(self):
            return self.getToken(vbaParser.TO, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseCondTo" ):
                listener.enterCaseCondTo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseCondTo" ):
                listener.exitCaseCondTo(self)


    class CaseCondIsContext(SC_SelectionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.SC_SelectionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IS(self):
            return self.getToken(vbaParser.IS, 0)
        def comparisonOperator(self):
            return self.getTypedRuleContext(vbaParser.ComparisonOperatorContext,0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseCondIs" ):
                listener.enterCaseCondIs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseCondIs" ):
                listener.exitCaseCondIs(self)



    def sC_Selection(self):

        localctx = vbaParser.SC_SelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_sC_Selection)
        self._la = 0 # Token type
        try:
            self.state = 1616
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
            if la_ == 1:
                localctx = vbaParser.CaseCondIsContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1599
                self.match(vbaParser.IS)
                self.state = 1601
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1600
                    self.match(vbaParser.WS)


                self.state = 1603
                self.comparisonOperator()
                self.state = 1605
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1604
                    self.match(vbaParser.WS)


                self.state = 1607
                self.valueStmt(0)
                pass

            elif la_ == 2:
                localctx = vbaParser.CaseCondToContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1609
                self.valueStmt(0)
                self.state = 1610
                self.match(vbaParser.WS)
                self.state = 1611
                self.match(vbaParser.TO)
                self.state = 1612
                self.match(vbaParser.WS)
                self.state = 1613
                self.valueStmt(0)
                pass

            elif la_ == 3:
                localctx = vbaParser.CaseCondValueContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1615
                self.valueStmt(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SC_CaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(vbaParser.CASE, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def sC_Cond(self):
            return self.getTypedRuleContext(vbaParser.SC_CondContext,0)


        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def block(self):
            return self.getTypedRuleContext(vbaParser.BlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_sC_Case

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSC_Case" ):
                listener.enterSC_Case(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSC_Case" ):
                listener.exitSC_Case(self)




    def sC_Case(self):

        localctx = vbaParser.SC_CaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_sC_Case)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1618
            self.match(vbaParser.CASE)
            self.state = 1619
            self.match(vbaParser.WS)
            self.state = 1620
            self.sC_Cond()
            self.state = 1621
            self.endOfStatement()
            self.state = 1623
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
            if la_ == 1:
                self.state = 1622
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SC_CondContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return vbaParser.RULE_sC_Cond

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CaseCondSelectionContext(SC_CondContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.SC_CondContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def sC_Selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.SC_SelectionContext)
            else:
                return self.getTypedRuleContext(vbaParser.SC_SelectionContext,i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseCondSelection" ):
                listener.enterCaseCondSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseCondSelection" ):
                listener.exitCaseCondSelection(self)


    class CaseCondElseContext(SC_CondContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.SC_CondContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ELSE(self):
            return self.getToken(vbaParser.ELSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseCondElse" ):
                listener.enterCaseCondElse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseCondElse" ):
                listener.exitCaseCondElse(self)



    def sC_Cond(self):

        localctx = vbaParser.SC_CondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_sC_Cond)
        self._la = 0 # Token type
        try:
            self.state = 1640
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
            if la_ == 1:
                localctx = vbaParser.CaseCondElseContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1625
                self.match(vbaParser.ELSE)
                pass

            elif la_ == 2:
                localctx = vbaParser.CaseCondSelectionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1626
                self.sC_Selection()
                self.state = 1637
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,231,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1628
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1627
                            self.match(vbaParser.WS)


                        self.state = 1630
                        self.match(vbaParser.T__0)
                        self.state = 1632
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1631
                            self.match(vbaParser.WS)


                        self.state = 1634
                        self.sC_Selection() 
                    self.state = 1639
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,231,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SendkeysStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SENDKEYS(self):
            return self.getToken(vbaParser.SENDKEYS, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_sendkeysStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSendkeysStmt" ):
                listener.enterSendkeysStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSendkeysStmt" ):
                listener.exitSendkeysStmt(self)




    def sendkeysStmt(self):

        localctx = vbaParser.SendkeysStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_sendkeysStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1642
            self.match(vbaParser.SENDKEYS)
            self.state = 1643
            self.match(vbaParser.WS)
            self.state = 1644
            self.valueStmt(0)
            self.state = 1653
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
            if la_ == 1:
                self.state = 1646
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1645
                    self.match(vbaParser.WS)


                self.state = 1648
                self.match(vbaParser.T__0)
                self.state = 1650
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1649
                    self.match(vbaParser.WS)


                self.state = 1652
                self.valueStmt(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetattrStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SETATTR(self):
            return self.getToken(vbaParser.SETATTR, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_setattrStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetattrStmt" ):
                listener.enterSetattrStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetattrStmt" ):
                listener.exitSetattrStmt(self)




    def setattrStmt(self):

        localctx = vbaParser.SetattrStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_setattrStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1655
            self.match(vbaParser.SETATTR)
            self.state = 1656
            self.match(vbaParser.WS)
            self.state = 1657
            self.valueStmt(0)
            self.state = 1659
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1658
                self.match(vbaParser.WS)


            self.state = 1661
            self.match(vbaParser.T__0)
            self.state = 1663
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1662
                self.match(vbaParser.WS)


            self.state = 1665
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(vbaParser.SET, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(vbaParser.ImplicitCallStmt_InStmtContext,0)


        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_setStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetStmt" ):
                listener.enterSetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetStmt" ):
                listener.exitSetStmt(self)




    def setStmt(self):

        localctx = vbaParser.SetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_setStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1667
            self.match(vbaParser.SET)
            self.state = 1668
            self.match(vbaParser.WS)
            self.state = 1669
            self.implicitCallStmt_InStmt()
            self.state = 1671
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1670
                self.match(vbaParser.WS)


            self.state = 1673
            self.match(vbaParser.EQ)
            self.state = 1675
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1674
                self.match(vbaParser.WS)


            self.state = 1677
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StopStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STOP(self):
            return self.getToken(vbaParser.STOP, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_stopStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStopStmt" ):
                listener.enterStopStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStopStmt" ):
                listener.exitStopStmt(self)




    def stopStmt(self):

        localctx = vbaParser.StopStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_stopStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1679
            self.match(vbaParser.STOP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUB(self):
            return self.getToken(vbaParser.SUB, 0)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def END_SUB(self):
            return self.getToken(vbaParser.END_SUB, 0)

        def visibility(self):
            return self.getTypedRuleContext(vbaParser.VisibilityContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def STATIC(self):
            return self.getToken(vbaParser.STATIC, 0)

        def argList(self):
            return self.getTypedRuleContext(vbaParser.ArgListContext,0)


        def block(self):
            return self.getTypedRuleContext(vbaParser.BlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_subStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubStmt" ):
                listener.enterSubStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubStmt" ):
                listener.exitSubStmt(self)




    def subStmt(self):

        localctx = vbaParser.SubStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_subStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1684
            _la = self._input.LA(1)
            if ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (vbaParser.FRIEND - 75)) | (1 << (vbaParser.GLOBAL - 75)) | (1 << (vbaParser.PRIVATE - 75)) | (1 << (vbaParser.PUBLIC - 75)))) != 0):
                self.state = 1681
                self.visibility()
                self.state = 1682
                self.match(vbaParser.WS)


            self.state = 1688
            _la = self._input.LA(1)
            if _la==vbaParser.STATIC:
                self.state = 1686
                self.match(vbaParser.STATIC)
                self.state = 1687
                self.match(vbaParser.WS)


            self.state = 1690
            self.match(vbaParser.SUB)
            self.state = 1692
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1691
                self.match(vbaParser.WS)


            self.state = 1694
            self.ambiguousIdentifier()
            self.state = 1699
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
            if la_ == 1:
                self.state = 1696
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1695
                    self.match(vbaParser.WS)


                self.state = 1698
                self.argList()


            self.state = 1701
            self.endOfStatement()
            self.state = 1703
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST) | (1 << vbaParser.DATABASE) | (1 << vbaParser.DATE) | (1 << vbaParser.DECLARE) | (1 << vbaParser.DEFBOOL) | (1 << vbaParser.DEFBYTE) | (1 << vbaParser.DEFDATE) | (1 << vbaParser.DEFDBL) | (1 << vbaParser.DEFDEC) | (1 << vbaParser.DEFCUR) | (1 << vbaParser.DEFINT) | (1 << vbaParser.DEFLNG) | (1 << vbaParser.DEFOBJ) | (1 << vbaParser.DEFSNG) | (1 << vbaParser.DEFSTR) | (1 << vbaParser.DEFVAR) | (1 << vbaParser.DELETESETTING) | (1 << vbaParser.DIM) | (1 << vbaParser.DO) | (1 << vbaParser.DOUBLE) | (1 << vbaParser.EACH) | (1 << vbaParser.ELSE) | (1 << vbaParser.ELSEIF) | (1 << vbaParser.END) | (1 << vbaParser.ENUM))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.EXIT_DO - 64)) | (1 << (vbaParser.EXIT_FOR - 64)) | (1 << (vbaParser.EXIT_FUNCTION - 64)) | (1 << (vbaParser.EXIT_PROPERTY - 64)) | (1 << (vbaParser.EXIT_SUB - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)) | (1 << (vbaParser.LIB - 64)) | (1 << (vbaParser.LIKE - 64)) | (1 << (vbaParser.LINE_INPUT - 64)) | (1 << (vbaParser.LSET - 64)) | (1 << (vbaParser.MACRO_CONST - 64)) | (1 << (vbaParser.MACRO_IF - 64)) | (1 << (vbaParser.ME - 64)) | (1 << (vbaParser.MID - 64)) | (1 << (vbaParser.MKDIR - 64)) | (1 << (vbaParser.MOD - 64)) | (1 << (vbaParser.NAME - 64)) | (1 << (vbaParser.NEXT - 64)) | (1 << (vbaParser.NEW - 64)) | (1 << (vbaParser.NOT - 64)) | (1 << (vbaParser.NOTHING - 64)) | (1 << (vbaParser.NULL - 64)) | (1 << (vbaParser.ON - 64)) | (1 << (vbaParser.ON_ERROR - 64)) | (1 << (vbaParser.ON_LOCAL_ERROR - 64)) | (1 << (vbaParser.OPEN - 64)) | (1 << (vbaParser.OPTIONAL - 64)) | (1 << (vbaParser.OR - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)) | (1 << (vbaParser.SPC - 128)) | (1 << (vbaParser.STATIC - 128)) | (1 << (vbaParser.STEP - 128)) | (1 << (vbaParser.STOP - 128)) | (1 << (vbaParser.STRING - 128)) | (1 << (vbaParser.SUB - 128)) | (1 << (vbaParser.TAB - 128)) | (1 << (vbaParser.TEXT - 128)) | (1 << (vbaParser.THEN - 128)) | (1 << (vbaParser.TIME - 128)) | (1 << (vbaParser.TO - 128)) | (1 << (vbaParser.TRUE - 128)) | (1 << (vbaParser.TYPE - 128)) | (1 << (vbaParser.TYPEOF - 128)) | (1 << (vbaParser.UNLOAD - 128)) | (1 << (vbaParser.UNLOCK - 128)) | (1 << (vbaParser.UNTIL - 128)) | (1 << (vbaParser.VARIANT - 128)) | (1 << (vbaParser.VERSION - 128)) | (1 << (vbaParser.WEND - 128)) | (1 << (vbaParser.WHILE - 128)) | (1 << (vbaParser.WIDTH - 128)) | (1 << (vbaParser.WITH - 128)) | (1 << (vbaParser.WITHEVENTS - 128)) | (1 << (vbaParser.WRITE - 128)) | (1 << (vbaParser.XOR - 128)))) != 0) or _la==vbaParser.IDENTIFIER:
                self.state = 1702
                self.block()


            self.state = 1705
            self.match(vbaParser.END_SUB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimeStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIME(self):
            return self.getToken(vbaParser.TIME, 0)

        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_timeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeStmt" ):
                listener.enterTimeStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeStmt" ):
                listener.exitTimeStmt(self)




    def timeStmt(self):

        localctx = vbaParser.TimeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_timeStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1707
            self.match(vbaParser.TIME)
            self.state = 1709
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1708
                self.match(vbaParser.WS)


            self.state = 1711
            self.match(vbaParser.EQ)
            self.state = 1713
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 1712
                self.match(vbaParser.WS)


            self.state = 1715
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(vbaParser.TYPE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def END_TYPE(self):
            return self.getToken(vbaParser.END_TYPE, 0)

        def visibility(self):
            return self.getTypedRuleContext(vbaParser.VisibilityContext,0)


        def typeStmt_Element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.TypeStmt_ElementContext)
            else:
                return self.getTypedRuleContext(vbaParser.TypeStmt_ElementContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_typeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeStmt" ):
                listener.enterTypeStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeStmt" ):
                listener.exitTypeStmt(self)




    def typeStmt(self):

        localctx = vbaParser.TypeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_typeStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1720
            _la = self._input.LA(1)
            if ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (vbaParser.FRIEND - 75)) | (1 << (vbaParser.GLOBAL - 75)) | (1 << (vbaParser.PRIVATE - 75)) | (1 << (vbaParser.PUBLIC - 75)))) != 0):
                self.state = 1717
                self.visibility()
                self.state = 1718
                self.match(vbaParser.WS)


            self.state = 1722
            self.match(vbaParser.TYPE)
            self.state = 1723
            self.match(vbaParser.WS)
            self.state = 1724
            self.ambiguousIdentifier()
            self.state = 1725
            self.endOfStatement()
            self.state = 1729
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST) | (1 << vbaParser.DATABASE) | (1 << vbaParser.DATE) | (1 << vbaParser.DECLARE) | (1 << vbaParser.DEFBOOL) | (1 << vbaParser.DEFBYTE) | (1 << vbaParser.DEFDATE) | (1 << vbaParser.DEFDBL) | (1 << vbaParser.DEFDEC) | (1 << vbaParser.DEFCUR) | (1 << vbaParser.DEFINT) | (1 << vbaParser.DEFLNG) | (1 << vbaParser.DEFOBJ) | (1 << vbaParser.DEFSNG) | (1 << vbaParser.DEFSTR) | (1 << vbaParser.DEFVAR) | (1 << vbaParser.DELETESETTING) | (1 << vbaParser.DIM) | (1 << vbaParser.DO) | (1 << vbaParser.DOUBLE) | (1 << vbaParser.EACH) | (1 << vbaParser.ELSE) | (1 << vbaParser.ELSEIF) | (1 << vbaParser.END) | (1 << vbaParser.ENUM))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)) | (1 << (vbaParser.LIB - 64)) | (1 << (vbaParser.LIKE - 64)) | (1 << (vbaParser.LSET - 64)) | (1 << (vbaParser.ME - 64)) | (1 << (vbaParser.MID - 64)) | (1 << (vbaParser.MKDIR - 64)) | (1 << (vbaParser.MOD - 64)) | (1 << (vbaParser.NAME - 64)) | (1 << (vbaParser.NEXT - 64)) | (1 << (vbaParser.NEW - 64)) | (1 << (vbaParser.NOT - 64)) | (1 << (vbaParser.NOTHING - 64)) | (1 << (vbaParser.NULL - 64)) | (1 << (vbaParser.ON - 64)) | (1 << (vbaParser.OPEN - 64)) | (1 << (vbaParser.OPTIONAL - 64)) | (1 << (vbaParser.OR - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)) | (1 << (vbaParser.SPC - 128)) | (1 << (vbaParser.STATIC - 128)) | (1 << (vbaParser.STEP - 128)) | (1 << (vbaParser.STOP - 128)) | (1 << (vbaParser.STRING - 128)) | (1 << (vbaParser.SUB - 128)) | (1 << (vbaParser.TAB - 128)) | (1 << (vbaParser.TEXT - 128)) | (1 << (vbaParser.THEN - 128)) | (1 << (vbaParser.TIME - 128)) | (1 << (vbaParser.TO - 128)) | (1 << (vbaParser.TRUE - 128)) | (1 << (vbaParser.TYPE - 128)) | (1 << (vbaParser.TYPEOF - 128)) | (1 << (vbaParser.UNLOAD - 128)) | (1 << (vbaParser.UNLOCK - 128)) | (1 << (vbaParser.UNTIL - 128)) | (1 << (vbaParser.VARIANT - 128)) | (1 << (vbaParser.VERSION - 128)) | (1 << (vbaParser.WEND - 128)) | (1 << (vbaParser.WHILE - 128)) | (1 << (vbaParser.WIDTH - 128)) | (1 << (vbaParser.WITH - 128)) | (1 << (vbaParser.WITHEVENTS - 128)) | (1 << (vbaParser.WRITE - 128)) | (1 << (vbaParser.XOR - 128)))) != 0) or _la==vbaParser.IDENTIFIER:
                self.state = 1726
                self.typeStmt_Element()
                self.state = 1731
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1732
            self.match(vbaParser.END_TYPE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeStmt_ElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def asTypeClause(self):
            return self.getTypedRuleContext(vbaParser.AsTypeClauseContext,0)


        def subscripts(self):
            return self.getTypedRuleContext(vbaParser.SubscriptsContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_typeStmt_Element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeStmt_Element" ):
                listener.enterTypeStmt_Element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeStmt_Element" ):
                listener.exitTypeStmt_Element(self)




    def typeStmt_Element(self):

        localctx = vbaParser.TypeStmt_ElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_typeStmt_Element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1734
            self.ambiguousIdentifier()
            self.state = 1749
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,254,self._ctx)
            if la_ == 1:
                self.state = 1736
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1735
                    self.match(vbaParser.WS)


                self.state = 1738
                self.match(vbaParser.LPAREN)
                self.state = 1743
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
                if la_ == 1:
                    self.state = 1740
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 1739
                        self.match(vbaParser.WS)


                    self.state = 1742
                    self.subscripts()


                self.state = 1746
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1745
                    self.match(vbaParser.WS)


                self.state = 1748
                self.match(vbaParser.RPAREN)


            self.state = 1753
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
            if la_ == 1:
                self.state = 1751
                self.match(vbaParser.WS)
                self.state = 1752
                self.asTypeClause()


            self.state = 1755
            self.endOfStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeOfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPEOF(self):
            return self.getToken(vbaParser.TYPEOF, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def IS(self):
            return self.getToken(vbaParser.IS, 0)

        def type(self):
            return self.getTypedRuleContext(vbaParser.TypeContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_typeOfStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeOfStmt" ):
                listener.enterTypeOfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeOfStmt" ):
                listener.exitTypeOfStmt(self)




    def typeOfStmt(self):

        localctx = vbaParser.TypeOfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_typeOfStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1757
            self.match(vbaParser.TYPEOF)
            self.state = 1758
            self.match(vbaParser.WS)
            self.state = 1759
            self.valueStmt(0)
            self.state = 1764
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
            if la_ == 1:
                self.state = 1760
                self.match(vbaParser.WS)
                self.state = 1761
                self.match(vbaParser.IS)
                self.state = 1762
                self.match(vbaParser.WS)
                self.state = 1763
                self.type()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnloadStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNLOAD(self):
            return self.getToken(vbaParser.UNLOAD, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_unloadStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnloadStmt" ):
                listener.enterUnloadStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnloadStmt" ):
                listener.exitUnloadStmt(self)




    def unloadStmt(self):

        localctx = vbaParser.UnloadStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_unloadStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1766
            self.match(vbaParser.UNLOAD)
            self.state = 1767
            self.match(vbaParser.WS)
            self.state = 1768
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnlockStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNLOCK(self):
            return self.getToken(vbaParser.UNLOCK, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)


        def TO(self):
            return self.getToken(vbaParser.TO, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_unlockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnlockStmt" ):
                listener.enterUnlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnlockStmt" ):
                listener.exitUnlockStmt(self)




    def unlockStmt(self):

        localctx = vbaParser.UnlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_unlockStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1770
            self.match(vbaParser.UNLOCK)
            self.state = 1771
            self.match(vbaParser.WS)
            self.state = 1772
            self.fileNumber()
            self.state = 1787
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,260,self._ctx)
            if la_ == 1:
                self.state = 1774
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1773
                    self.match(vbaParser.WS)


                self.state = 1776
                self.match(vbaParser.T__0)
                self.state = 1778
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1777
                    self.match(vbaParser.WS)


                self.state = 1780
                self.valueStmt(0)
                self.state = 1785
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,259,self._ctx)
                if la_ == 1:
                    self.state = 1781
                    self.match(vbaParser.WS)
                    self.state = 1782
                    self.match(vbaParser.TO)
                    self.state = 1783
                    self.match(vbaParser.WS)
                    self.state = 1784
                    self.valueStmt(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ValueStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return vbaParser.RULE_valueStmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class VsStructContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)
        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)

        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsStruct" ):
                listener.enterVsStruct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsStruct" ):
                listener.exitVsStruct(self)


    class VsAddContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)

        def PLUS(self):
            return self.getToken(vbaParser.PLUS, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsAdd" ):
                listener.enterVsAdd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsAdd" ):
                listener.exitVsAdd(self)


    class VsLtContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)

        def LT(self):
            return self.getToken(vbaParser.LT, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsLt" ):
                listener.enterVsLt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsLt" ):
                listener.exitVsLt(self)


    class VsAddressOfContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ADDRESSOF(self):
            return self.getToken(vbaParser.ADDRESSOF, 0)
        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsAddressOf" ):
                listener.enterVsAddressOf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsAddressOf" ):
                listener.exitVsAddressOf(self)


    class VsNewContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(vbaParser.NEW, 0)
        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsNew" ):
                listener.enterVsNew(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsNew" ):
                listener.exitVsNew(self)


    class VsMultContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)

        def MULT(self):
            return self.getToken(vbaParser.MULT, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsMult" ):
                listener.enterVsMult(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsMult" ):
                listener.exitVsMult(self)


    class VsNegationContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MINUS(self):
            return self.getToken(vbaParser.MINUS, 0)
        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsNegation" ):
                listener.enterVsNegation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsNegation" ):
                listener.exitVsNegation(self)


    class VsAssignContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(vbaParser.ImplicitCallStmt_InStmtContext,0)

        def ASSIGN(self):
            return self.getToken(vbaParser.ASSIGN, 0)
        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsAssign" ):
                listener.enterVsAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsAssign" ):
                listener.exitVsAssign(self)


    class VsLikeContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)

        def LIKE(self):
            return self.getToken(vbaParser.LIKE, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsLike" ):
                listener.enterVsLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsLike" ):
                listener.exitVsLike(self)


    class VsDivContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)

        def DIV(self):
            return self.getToken(vbaParser.DIV, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsDiv" ):
                listener.enterVsDiv(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsDiv" ):
                listener.exitVsDiv(self)


    class VsPlusContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PLUS(self):
            return self.getToken(vbaParser.PLUS, 0)
        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsPlus" ):
                listener.enterVsPlus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsPlus" ):
                listener.exitVsPlus(self)


    class VsNotContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(vbaParser.NOT, 0)
        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsNot" ):
                listener.enterVsNot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsNot" ):
                listener.exitVsNot(self)


    class VsGeqContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)

        def GEQ(self):
            return self.getToken(vbaParser.GEQ, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsGeq" ):
                listener.enterVsGeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsGeq" ):
                listener.exitVsGeq(self)


    class VsTypeOfContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typeOfStmt(self):
            return self.getTypedRuleContext(vbaParser.TypeOfStmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsTypeOf" ):
                listener.enterVsTypeOf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsTypeOf" ):
                listener.exitVsTypeOf(self)


    class VsICSContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(vbaParser.ImplicitCallStmt_InStmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsICS" ):
                listener.enterVsICS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsICS" ):
                listener.exitVsICS(self)


    class VsNeqContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)

        def NEQ(self):
            return self.getToken(vbaParser.NEQ, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsNeq" ):
                listener.enterVsNeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsNeq" ):
                listener.exitVsNeq(self)


    class VsXorContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)

        def XOR(self):
            return self.getToken(vbaParser.XOR, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsXor" ):
                listener.enterVsXor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsXor" ):
                listener.exitVsXor(self)


    class VsAndContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)

        def AND(self):
            return self.getToken(vbaParser.AND, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsAnd" ):
                listener.enterVsAnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsAnd" ):
                listener.exitVsAnd(self)


    class VsLeqContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)

        def LEQ(self):
            return self.getToken(vbaParser.LEQ, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsLeq" ):
                listener.enterVsLeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsLeq" ):
                listener.exitVsLeq(self)


    class VsPowContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)

        def POW(self):
            return self.getToken(vbaParser.POW, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsPow" ):
                listener.enterVsPow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsPow" ):
                listener.exitVsPow(self)


    class VsIsContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)

        def IS(self):
            return self.getToken(vbaParser.IS, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsIs" ):
                listener.enterVsIs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsIs" ):
                listener.exitVsIs(self)


    class VsModContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)

        def MOD(self):
            return self.getToken(vbaParser.MOD, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsMod" ):
                listener.enterVsMod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsMod" ):
                listener.exitVsMod(self)


    class VsAmpContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)

        def AMPERSAND(self):
            return self.getToken(vbaParser.AMPERSAND, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsAmp" ):
                listener.enterVsAmp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsAmp" ):
                listener.exitVsAmp(self)


    class VsOrContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)

        def OR(self):
            return self.getToken(vbaParser.OR, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsOr" ):
                listener.enterVsOr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsOr" ):
                listener.exitVsOr(self)


    class VsMinusContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)

        def MINUS(self):
            return self.getToken(vbaParser.MINUS, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsMinus" ):
                listener.enterVsMinus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsMinus" ):
                listener.exitVsMinus(self)


    class VsLiteralContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(vbaParser.LiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsLiteral" ):
                listener.enterVsLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsLiteral" ):
                listener.exitVsLiteral(self)


    class VsEqvContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)

        def EQV(self):
            return self.getToken(vbaParser.EQV, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsEqv" ):
                listener.enterVsEqv(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsEqv" ):
                listener.exitVsEqv(self)


    class VsImpContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)

        def IMP(self):
            return self.getToken(vbaParser.IMP, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsImp" ):
                listener.enterVsImp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsImp" ):
                listener.exitVsImp(self)


    class VsGtContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)

        def GT(self):
            return self.getToken(vbaParser.GT, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsGt" ):
                listener.enterVsGt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsGt" ):
                listener.exitVsGt(self)


    class VsEqContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)

        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsEq" ):
                listener.enterVsEq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsEq" ):
                listener.exitVsEq(self)


    class VsMidContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a vbaParser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def midStmt(self):
            return self.getTypedRuleContext(vbaParser.MidStmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsMid" ):
                listener.enterVsMid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsMid" ):
                listener.exitVsMid(self)



    def valueStmt(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = vbaParser.ValueStmtContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 200
        self.enterRecursionRule(localctx, 200, self.RULE_valueStmt, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1849
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
            if la_ == 1:
                localctx = vbaParser.VsLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1790
                self.literal()
                pass

            elif la_ == 2:
                localctx = vbaParser.VsICSContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1791
                self.implicitCallStmt_InStmt()
                pass

            elif la_ == 3:
                localctx = vbaParser.VsStructContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1792
                self.match(vbaParser.LPAREN)
                self.state = 1794
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1793
                    self.match(vbaParser.WS)


                self.state = 1796
                self.valueStmt(0)
                self.state = 1807
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==vbaParser.T__0 or _la==vbaParser.WS:
                    self.state = 1798
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 1797
                        self.match(vbaParser.WS)


                    self.state = 1800
                    self.match(vbaParser.T__0)
                    self.state = 1802
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 1801
                        self.match(vbaParser.WS)


                    self.state = 1804
                    self.valueStmt(0)
                    self.state = 1809
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1810
                self.match(vbaParser.RPAREN)
                pass

            elif la_ == 4:
                localctx = vbaParser.VsNewContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1812
                self.match(vbaParser.NEW)
                self.state = 1814
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1813
                    self.match(vbaParser.WS)


                self.state = 1816
                self.valueStmt(28)
                pass

            elif la_ == 5:
                localctx = vbaParser.VsTypeOfContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1817
                self.typeOfStmt()
                pass

            elif la_ == 6:
                localctx = vbaParser.VsMidContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1818
                self.midStmt()
                pass

            elif la_ == 7:
                localctx = vbaParser.VsAddressOfContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1819
                self.match(vbaParser.ADDRESSOF)
                self.state = 1821
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1820
                    self.match(vbaParser.WS)


                self.state = 1823
                self.valueStmt(25)
                pass

            elif la_ == 8:
                localctx = vbaParser.VsAssignContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1824
                self.implicitCallStmt_InStmt()
                self.state = 1826
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1825
                    self.match(vbaParser.WS)


                self.state = 1828
                self.match(vbaParser.ASSIGN)
                self.state = 1830
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1829
                    self.match(vbaParser.WS)


                self.state = 1832
                self.valueStmt(24)
                pass

            elif la_ == 9:
                localctx = vbaParser.VsNegationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1834
                self.match(vbaParser.MINUS)
                self.state = 1836
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1835
                    self.match(vbaParser.WS)


                self.state = 1838
                self.valueStmt(14)
                pass

            elif la_ == 10:
                localctx = vbaParser.VsPlusContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1839
                self.match(vbaParser.PLUS)
                self.state = 1841
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1840
                    self.match(vbaParser.WS)


                self.state = 1843
                self.valueStmt(13)
                pass

            elif la_ == 11:
                localctx = vbaParser.VsNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1844
                self.match(vbaParser.NOT)
                self.state = 1846
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 1845
                    self.match(vbaParser.WS)


                self.state = 1848
                self.valueStmt(1)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2033
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,314,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2031
                    self._errHandler.sync(self);
                    la_ = self._interp.adaptivePredict(self._input,313,self._ctx)
                    if la_ == 1:
                        localctx = vbaParser.VsIsContext(self, vbaParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1851
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 1853
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1852
                            self.match(vbaParser.WS)


                        self.state = 1855
                        self.match(vbaParser.IS)
                        self.state = 1857
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1856
                            self.match(vbaParser.WS)


                        self.state = 1859
                        self.valueStmt(24)
                        pass

                    elif la_ == 2:
                        localctx = vbaParser.VsLikeContext(self, vbaParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1860
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 1862
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1861
                            self.match(vbaParser.WS)


                        self.state = 1864
                        self.match(vbaParser.LIKE)
                        self.state = 1866
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1865
                            self.match(vbaParser.WS)


                        self.state = 1868
                        self.valueStmt(23)
                        pass

                    elif la_ == 3:
                        localctx = vbaParser.VsGeqContext(self, vbaParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1869
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 1871
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1870
                            self.match(vbaParser.WS)


                        self.state = 1873
                        self.match(vbaParser.GEQ)
                        self.state = 1875
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1874
                            self.match(vbaParser.WS)


                        self.state = 1877
                        self.valueStmt(22)
                        pass

                    elif la_ == 4:
                        localctx = vbaParser.VsLeqContext(self, vbaParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1878
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 1880
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1879
                            self.match(vbaParser.WS)


                        self.state = 1882
                        self.match(vbaParser.LEQ)
                        self.state = 1884
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1883
                            self.match(vbaParser.WS)


                        self.state = 1886
                        self.valueStmt(21)
                        pass

                    elif la_ == 5:
                        localctx = vbaParser.VsGtContext(self, vbaParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1887
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 1889
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1888
                            self.match(vbaParser.WS)


                        self.state = 1891
                        self.match(vbaParser.GT)
                        self.state = 1893
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1892
                            self.match(vbaParser.WS)


                        self.state = 1895
                        self.valueStmt(20)
                        pass

                    elif la_ == 6:
                        localctx = vbaParser.VsLtContext(self, vbaParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1896
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 1898
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1897
                            self.match(vbaParser.WS)


                        self.state = 1900
                        self.match(vbaParser.LT)
                        self.state = 1902
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1901
                            self.match(vbaParser.WS)


                        self.state = 1904
                        self.valueStmt(19)
                        pass

                    elif la_ == 7:
                        localctx = vbaParser.VsNeqContext(self, vbaParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1905
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 1907
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1906
                            self.match(vbaParser.WS)


                        self.state = 1909
                        self.match(vbaParser.NEQ)
                        self.state = 1911
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1910
                            self.match(vbaParser.WS)


                        self.state = 1913
                        self.valueStmt(18)
                        pass

                    elif la_ == 8:
                        localctx = vbaParser.VsEqContext(self, vbaParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1914
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 1916
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1915
                            self.match(vbaParser.WS)


                        self.state = 1918
                        self.match(vbaParser.EQ)
                        self.state = 1920
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1919
                            self.match(vbaParser.WS)


                        self.state = 1922
                        self.valueStmt(17)
                        pass

                    elif la_ == 9:
                        localctx = vbaParser.VsPowContext(self, vbaParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1923
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 1925
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1924
                            self.match(vbaParser.WS)


                        self.state = 1927
                        self.match(vbaParser.POW)
                        self.state = 1929
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1928
                            self.match(vbaParser.WS)


                        self.state = 1931
                        self.valueStmt(16)
                        pass

                    elif la_ == 10:
                        localctx = vbaParser.VsDivContext(self, vbaParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1932
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 1934
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1933
                            self.match(vbaParser.WS)


                        self.state = 1936
                        self.match(vbaParser.DIV)
                        self.state = 1938
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1937
                            self.match(vbaParser.WS)


                        self.state = 1940
                        self.valueStmt(13)
                        pass

                    elif la_ == 11:
                        localctx = vbaParser.VsMultContext(self, vbaParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1941
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 1943
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1942
                            self.match(vbaParser.WS)


                        self.state = 1945
                        self.match(vbaParser.MULT)
                        self.state = 1947
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1946
                            self.match(vbaParser.WS)


                        self.state = 1949
                        self.valueStmt(12)
                        pass

                    elif la_ == 12:
                        localctx = vbaParser.VsModContext(self, vbaParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1950
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1952
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1951
                            self.match(vbaParser.WS)


                        self.state = 1954
                        self.match(vbaParser.MOD)
                        self.state = 1956
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1955
                            self.match(vbaParser.WS)


                        self.state = 1958
                        self.valueStmt(11)
                        pass

                    elif la_ == 13:
                        localctx = vbaParser.VsAddContext(self, vbaParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1959
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1961
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1960
                            self.match(vbaParser.WS)


                        self.state = 1963
                        self.match(vbaParser.PLUS)
                        self.state = 1965
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1964
                            self.match(vbaParser.WS)


                        self.state = 1967
                        self.valueStmt(10)
                        pass

                    elif la_ == 14:
                        localctx = vbaParser.VsMinusContext(self, vbaParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1968
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1970
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1969
                            self.match(vbaParser.WS)


                        self.state = 1972
                        self.match(vbaParser.MINUS)
                        self.state = 1974
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1973
                            self.match(vbaParser.WS)


                        self.state = 1976
                        self.valueStmt(9)
                        pass

                    elif la_ == 15:
                        localctx = vbaParser.VsAmpContext(self, vbaParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1977
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1979
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1978
                            self.match(vbaParser.WS)


                        self.state = 1981
                        self.match(vbaParser.AMPERSAND)
                        self.state = 1983
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1982
                            self.match(vbaParser.WS)


                        self.state = 1985
                        self.valueStmt(8)
                        pass

                    elif la_ == 16:
                        localctx = vbaParser.VsImpContext(self, vbaParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1986
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1988
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1987
                            self.match(vbaParser.WS)


                        self.state = 1990
                        self.match(vbaParser.IMP)
                        self.state = 1992
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1991
                            self.match(vbaParser.WS)


                        self.state = 1994
                        self.valueStmt(7)
                        pass

                    elif la_ == 17:
                        localctx = vbaParser.VsEqvContext(self, vbaParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 1995
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1997
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 1996
                            self.match(vbaParser.WS)


                        self.state = 1999
                        self.match(vbaParser.EQV)
                        self.state = 2001
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 2000
                            self.match(vbaParser.WS)


                        self.state = 2003
                        self.valueStmt(6)
                        pass

                    elif la_ == 18:
                        localctx = vbaParser.VsXorContext(self, vbaParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 2004
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 2006
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 2005
                            self.match(vbaParser.WS)


                        self.state = 2008
                        self.match(vbaParser.XOR)
                        self.state = 2010
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 2009
                            self.match(vbaParser.WS)


                        self.state = 2012
                        self.valueStmt(5)
                        pass

                    elif la_ == 19:
                        localctx = vbaParser.VsOrContext(self, vbaParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 2013
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 2015
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 2014
                            self.match(vbaParser.WS)


                        self.state = 2017
                        self.match(vbaParser.OR)
                        self.state = 2019
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 2018
                            self.match(vbaParser.WS)


                        self.state = 2021
                        self.valueStmt(4)
                        pass

                    elif la_ == 20:
                        localctx = vbaParser.VsAndContext(self, vbaParser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 2022
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2024
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 2023
                            self.match(vbaParser.WS)


                        self.state = 2026
                        self.match(vbaParser.AND)
                        self.state = 2028
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 2027
                            self.match(vbaParser.WS)


                        self.state = 2030
                        self.valueStmt(3)
                        pass

             
                self.state = 2035
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,314,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class VariableStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def variableListStmt(self):
            return self.getTypedRuleContext(vbaParser.VariableListStmtContext,0)


        def DIM(self):
            return self.getToken(vbaParser.DIM, 0)

        def STATIC(self):
            return self.getToken(vbaParser.STATIC, 0)

        def visibility(self):
            return self.getTypedRuleContext(vbaParser.VisibilityContext,0)


        def WITHEVENTS(self):
            return self.getToken(vbaParser.WITHEVENTS, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_variableStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableStmt" ):
                listener.enterVariableStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableStmt" ):
                listener.exitVariableStmt(self)




    def variableStmt(self):

        localctx = vbaParser.VariableStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_variableStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2039
            token = self._input.LA(1)
            if token in [vbaParser.DIM]:
                self.state = 2036
                self.match(vbaParser.DIM)

            elif token in [vbaParser.STATIC]:
                self.state = 2037
                self.match(vbaParser.STATIC)

            elif token in [vbaParser.FRIEND, vbaParser.GLOBAL, vbaParser.PRIVATE, vbaParser.PUBLIC]:
                self.state = 2038
                self.visibility()

            else:
                raise NoViableAltException(self)

            self.state = 2041
            self.match(vbaParser.WS)
            self.state = 2044
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,316,self._ctx)
            if la_ == 1:
                self.state = 2042
                self.match(vbaParser.WITHEVENTS)
                self.state = 2043
                self.match(vbaParser.WS)


            self.state = 2046
            self.variableListStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableListStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableSubStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.VariableSubStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.VariableSubStmtContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_variableListStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableListStmt" ):
                listener.enterVariableListStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableListStmt" ):
                listener.exitVariableListStmt(self)




    def variableListStmt(self):

        localctx = vbaParser.VariableListStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_variableListStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2048
            self.variableSubStmt()
            self.state = 2059
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,319,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2050
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 2049
                        self.match(vbaParser.WS)


                    self.state = 2052
                    self.match(vbaParser.T__0)
                    self.state = 2054
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 2053
                        self.match(vbaParser.WS)


                    self.state = 2056
                    self.variableSubStmt() 
                self.state = 2061
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,319,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableSubStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def typeHint(self):
            return self.getTypedRuleContext(vbaParser.TypeHintContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def asTypeClause(self):
            return self.getTypedRuleContext(vbaParser.AsTypeClauseContext,0)


        def subscripts(self):
            return self.getTypedRuleContext(vbaParser.SubscriptsContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_variableSubStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableSubStmt" ):
                listener.enterVariableSubStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableSubStmt" ):
                listener.exitVariableSubStmt(self)




    def variableSubStmt(self):

        localctx = vbaParser.VariableSubStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_variableSubStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2062
            self.ambiguousIdentifier()
            self.state = 2080
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,325,self._ctx)
            if la_ == 1:
                self.state = 2064
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 2063
                    self.match(vbaParser.WS)


                self.state = 2066
                self.match(vbaParser.LPAREN)
                self.state = 2068
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 2067
                    self.match(vbaParser.WS)


                self.state = 2074
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST) | (1 << vbaParser.DATABASE) | (1 << vbaParser.DATE) | (1 << vbaParser.DECLARE) | (1 << vbaParser.DEFBOOL) | (1 << vbaParser.DEFBYTE) | (1 << vbaParser.DEFDATE) | (1 << vbaParser.DEFDBL) | (1 << vbaParser.DEFDEC) | (1 << vbaParser.DEFCUR) | (1 << vbaParser.DEFINT) | (1 << vbaParser.DEFLNG) | (1 << vbaParser.DEFOBJ) | (1 << vbaParser.DEFSNG) | (1 << vbaParser.DEFSTR) | (1 << vbaParser.DEFVAR) | (1 << vbaParser.DELETESETTING) | (1 << vbaParser.DIM) | (1 << vbaParser.DO) | (1 << vbaParser.DOUBLE) | (1 << vbaParser.EACH) | (1 << vbaParser.ELSE) | (1 << vbaParser.ELSEIF) | (1 << vbaParser.END) | (1 << vbaParser.ENUM))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)) | (1 << (vbaParser.LIB - 64)) | (1 << (vbaParser.LIKE - 64)) | (1 << (vbaParser.LSET - 64)) | (1 << (vbaParser.ME - 64)) | (1 << (vbaParser.MID - 64)) | (1 << (vbaParser.MKDIR - 64)) | (1 << (vbaParser.MOD - 64)) | (1 << (vbaParser.NAME - 64)) | (1 << (vbaParser.NEXT - 64)) | (1 << (vbaParser.NEW - 64)) | (1 << (vbaParser.NOT - 64)) | (1 << (vbaParser.NOTHING - 64)) | (1 << (vbaParser.NULL - 64)) | (1 << (vbaParser.ON - 64)) | (1 << (vbaParser.OPEN - 64)) | (1 << (vbaParser.OPTIONAL - 64)) | (1 << (vbaParser.OR - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)) | (1 << (vbaParser.SPC - 128)) | (1 << (vbaParser.STATIC - 128)) | (1 << (vbaParser.STEP - 128)) | (1 << (vbaParser.STOP - 128)) | (1 << (vbaParser.STRING - 128)) | (1 << (vbaParser.SUB - 128)) | (1 << (vbaParser.TAB - 128)) | (1 << (vbaParser.TEXT - 128)) | (1 << (vbaParser.THEN - 128)) | (1 << (vbaParser.TIME - 128)) | (1 << (vbaParser.TO - 128)) | (1 << (vbaParser.TRUE - 128)) | (1 << (vbaParser.TYPE - 128)) | (1 << (vbaParser.TYPEOF - 128)) | (1 << (vbaParser.UNLOAD - 128)) | (1 << (vbaParser.UNLOCK - 128)) | (1 << (vbaParser.UNTIL - 128)) | (1 << (vbaParser.VARIANT - 128)) | (1 << (vbaParser.VERSION - 128)) | (1 << (vbaParser.WEND - 128)) | (1 << (vbaParser.WHILE - 128)) | (1 << (vbaParser.WIDTH - 128)) | (1 << (vbaParser.WITH - 128)) | (1 << (vbaParser.WITHEVENTS - 128)) | (1 << (vbaParser.WRITE - 128)) | (1 << (vbaParser.XOR - 128)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (vbaParser.LPAREN - 193)) | (1 << (vbaParser.MINUS - 193)) | (1 << (vbaParser.PLUS - 193)) | (1 << (vbaParser.STRINGLITERAL - 193)) | (1 << (vbaParser.OCTLITERAL - 193)) | (1 << (vbaParser.HEXLITERAL - 193)) | (1 << (vbaParser.SHORTLITERAL - 193)) | (1 << (vbaParser.INTEGERLITERAL - 193)) | (1 << (vbaParser.DOUBLELITERAL - 193)) | (1 << (vbaParser.DATELITERAL - 193)) | (1 << (vbaParser.IDENTIFIER - 193)))) != 0):
                    self.state = 2070
                    self.subscripts()
                    self.state = 2072
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 2071
                        self.match(vbaParser.WS)




                self.state = 2076
                self.match(vbaParser.RPAREN)
                self.state = 2078
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,324,self._ctx)
                if la_ == 1:
                    self.state = 2077
                    self.match(vbaParser.WS)




            self.state = 2083
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,326,self._ctx)
            if la_ == 1:
                self.state = 2082
                self.typeHint()


            self.state = 2087
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,327,self._ctx)
            if la_ == 1:
                self.state = 2085
                self.match(vbaParser.WS)
                self.state = 2086
                self.asTypeClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhileWendStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(vbaParser.WHILE, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def WEND(self):
            return self.getToken(vbaParser.WEND, 0)

        def block(self):
            return self.getTypedRuleContext(vbaParser.BlockContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_whileWendStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileWendStmt" ):
                listener.enterWhileWendStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileWendStmt" ):
                listener.exitWhileWendStmt(self)




    def whileWendStmt(self):

        localctx = vbaParser.WhileWendStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_whileWendStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2089
            self.match(vbaParser.WHILE)
            self.state = 2090
            self.match(vbaParser.WS)
            self.state = 2091
            self.valueStmt(0)
            self.state = 2092
            self.endOfStatement()
            self.state = 2094
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,328,self._ctx)
            if la_ == 1:
                self.state = 2093
                self.block()


            self.state = 2096
            self.match(vbaParser.WEND)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WidthStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WIDTH(self):
            return self.getToken(vbaParser.WIDTH, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_widthStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWidthStmt" ):
                listener.enterWidthStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWidthStmt" ):
                listener.exitWidthStmt(self)




    def widthStmt(self):

        localctx = vbaParser.WidthStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_widthStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2098
            self.match(vbaParser.WIDTH)
            self.state = 2099
            self.match(vbaParser.WS)
            self.state = 2100
            self.fileNumber()
            self.state = 2102
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 2101
                self.match(vbaParser.WS)


            self.state = 2104
            self.match(vbaParser.T__0)
            self.state = 2106
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 2105
                self.match(vbaParser.WS)


            self.state = 2108
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WithStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(vbaParser.WITH, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def endOfStatement(self):
            return self.getTypedRuleContext(vbaParser.EndOfStatementContext,0)


        def END_WITH(self):
            return self.getToken(vbaParser.END_WITH, 0)

        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(vbaParser.ImplicitCallStmt_InStmtContext,0)


        def block(self):
            return self.getTypedRuleContext(vbaParser.BlockContext,0)


        def NEW(self):
            return self.getToken(vbaParser.NEW, 0)

        def type(self):
            return self.getTypedRuleContext(vbaParser.TypeContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_withStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithStmt" ):
                listener.enterWithStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithStmt" ):
                listener.exitWithStmt(self)




    def withStmt(self):

        localctx = vbaParser.WithStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_withStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2110
            self.match(vbaParser.WITH)
            self.state = 2111
            self.match(vbaParser.WS)
            self.state = 2116
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,331,self._ctx)
            if la_ == 1:
                self.state = 2112
                self.implicitCallStmt_InStmt()
                pass

            elif la_ == 2:
                self.state = 2113
                self.match(vbaParser.NEW)
                self.state = 2114
                self.match(vbaParser.WS)
                self.state = 2115
                self.type()
                pass


            self.state = 2118
            self.endOfStatement()
            self.state = 2120
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST) | (1 << vbaParser.DATABASE) | (1 << vbaParser.DATE) | (1 << vbaParser.DECLARE) | (1 << vbaParser.DEFBOOL) | (1 << vbaParser.DEFBYTE) | (1 << vbaParser.DEFDATE) | (1 << vbaParser.DEFDBL) | (1 << vbaParser.DEFDEC) | (1 << vbaParser.DEFCUR) | (1 << vbaParser.DEFINT) | (1 << vbaParser.DEFLNG) | (1 << vbaParser.DEFOBJ) | (1 << vbaParser.DEFSNG) | (1 << vbaParser.DEFSTR) | (1 << vbaParser.DEFVAR) | (1 << vbaParser.DELETESETTING) | (1 << vbaParser.DIM) | (1 << vbaParser.DO) | (1 << vbaParser.DOUBLE) | (1 << vbaParser.EACH) | (1 << vbaParser.ELSE) | (1 << vbaParser.ELSEIF) | (1 << vbaParser.END) | (1 << vbaParser.ENUM))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.EXIT_DO - 64)) | (1 << (vbaParser.EXIT_FOR - 64)) | (1 << (vbaParser.EXIT_FUNCTION - 64)) | (1 << (vbaParser.EXIT_PROPERTY - 64)) | (1 << (vbaParser.EXIT_SUB - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)) | (1 << (vbaParser.LIB - 64)) | (1 << (vbaParser.LIKE - 64)) | (1 << (vbaParser.LINE_INPUT - 64)) | (1 << (vbaParser.LSET - 64)) | (1 << (vbaParser.MACRO_CONST - 64)) | (1 << (vbaParser.MACRO_IF - 64)) | (1 << (vbaParser.ME - 64)) | (1 << (vbaParser.MID - 64)) | (1 << (vbaParser.MKDIR - 64)) | (1 << (vbaParser.MOD - 64)) | (1 << (vbaParser.NAME - 64)) | (1 << (vbaParser.NEXT - 64)) | (1 << (vbaParser.NEW - 64)) | (1 << (vbaParser.NOT - 64)) | (1 << (vbaParser.NOTHING - 64)) | (1 << (vbaParser.NULL - 64)) | (1 << (vbaParser.ON - 64)) | (1 << (vbaParser.ON_ERROR - 64)) | (1 << (vbaParser.ON_LOCAL_ERROR - 64)) | (1 << (vbaParser.OPEN - 64)) | (1 << (vbaParser.OPTIONAL - 64)) | (1 << (vbaParser.OR - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)) | (1 << (vbaParser.SPC - 128)) | (1 << (vbaParser.STATIC - 128)) | (1 << (vbaParser.STEP - 128)) | (1 << (vbaParser.STOP - 128)) | (1 << (vbaParser.STRING - 128)) | (1 << (vbaParser.SUB - 128)) | (1 << (vbaParser.TAB - 128)) | (1 << (vbaParser.TEXT - 128)) | (1 << (vbaParser.THEN - 128)) | (1 << (vbaParser.TIME - 128)) | (1 << (vbaParser.TO - 128)) | (1 << (vbaParser.TRUE - 128)) | (1 << (vbaParser.TYPE - 128)) | (1 << (vbaParser.TYPEOF - 128)) | (1 << (vbaParser.UNLOAD - 128)) | (1 << (vbaParser.UNLOCK - 128)) | (1 << (vbaParser.UNTIL - 128)) | (1 << (vbaParser.VARIANT - 128)) | (1 << (vbaParser.VERSION - 128)) | (1 << (vbaParser.WEND - 128)) | (1 << (vbaParser.WHILE - 128)) | (1 << (vbaParser.WIDTH - 128)) | (1 << (vbaParser.WITH - 128)) | (1 << (vbaParser.WITHEVENTS - 128)) | (1 << (vbaParser.WRITE - 128)) | (1 << (vbaParser.XOR - 128)))) != 0) or _la==vbaParser.IDENTIFIER:
                self.state = 2119
                self.block()


            self.state = 2122
            self.match(vbaParser.END_WITH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WriteStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WRITE(self):
            return self.getToken(vbaParser.WRITE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def fileNumber(self):
            return self.getTypedRuleContext(vbaParser.FileNumberContext,0)


        def outputList(self):
            return self.getTypedRuleContext(vbaParser.OutputListContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_writeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWriteStmt" ):
                listener.enterWriteStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWriteStmt" ):
                listener.exitWriteStmt(self)




    def writeStmt(self):

        localctx = vbaParser.WriteStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_writeStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2124
            self.match(vbaParser.WRITE)
            self.state = 2125
            self.match(vbaParser.WS)
            self.state = 2126
            self.fileNumber()
            self.state = 2128
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 2127
                self.match(vbaParser.WS)


            self.state = 2130
            self.match(vbaParser.T__0)
            self.state = 2135
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,335,self._ctx)
            if la_ == 1:
                self.state = 2132
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,334,self._ctx)
                if la_ == 1:
                    self.state = 2131
                    self.match(vbaParser.WS)


                self.state = 2134
                self.outputList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FileNumberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_fileNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileNumber" ):
                listener.enterFileNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileNumber" ):
                listener.exitFileNumber(self)




    def fileNumber(self):

        localctx = vbaParser.FileNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_fileNumber)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2138
            _la = self._input.LA(1)
            if _la==vbaParser.T__2:
                self.state = 2137
                self.match(vbaParser.T__2)


            self.state = 2140
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExplicitCallStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eCS_ProcedureCall(self):
            return self.getTypedRuleContext(vbaParser.ECS_ProcedureCallContext,0)


        def eCS_MemberProcedureCall(self):
            return self.getTypedRuleContext(vbaParser.ECS_MemberProcedureCallContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_explicitCallStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitCallStmt" ):
                listener.enterExplicitCallStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitCallStmt" ):
                listener.exitExplicitCallStmt(self)




    def explicitCallStmt(self):

        localctx = vbaParser.ExplicitCallStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_explicitCallStmt)
        try:
            self.state = 2144
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,337,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2142
                self.eCS_ProcedureCall()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2143
                self.eCS_MemberProcedureCall()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ECS_ProcedureCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(vbaParser.CALL, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def typeHint(self):
            return self.getTypedRuleContext(vbaParser.TypeHintContext,0)


        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.LPAREN)
            else:
                return self.getToken(vbaParser.LPAREN, i)

        def argsCall(self):
            return self.getTypedRuleContext(vbaParser.ArgsCallContext,0)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.RPAREN)
            else:
                return self.getToken(vbaParser.RPAREN, i)

        def subscripts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.SubscriptsContext)
            else:
                return self.getTypedRuleContext(vbaParser.SubscriptsContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_eCS_ProcedureCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterECS_ProcedureCall" ):
                listener.enterECS_ProcedureCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitECS_ProcedureCall" ):
                listener.exitECS_ProcedureCall(self)




    def eCS_ProcedureCall(self):

        localctx = vbaParser.ECS_ProcedureCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_eCS_ProcedureCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2146
            self.match(vbaParser.CALL)
            self.state = 2147
            self.match(vbaParser.WS)
            self.state = 2148
            self.ambiguousIdentifier()
            self.state = 2150
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,338,self._ctx)
            if la_ == 1:
                self.state = 2149
                self.typeHint()


            self.state = 2165
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,342,self._ctx)
            if la_ == 1:
                self.state = 2153
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 2152
                    self.match(vbaParser.WS)


                self.state = 2155
                self.match(vbaParser.LPAREN)
                self.state = 2157
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,340,self._ctx)
                if la_ == 1:
                    self.state = 2156
                    self.match(vbaParser.WS)


                self.state = 2159
                self.argsCall()
                self.state = 2161
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 2160
                    self.match(vbaParser.WS)


                self.state = 2163
                self.match(vbaParser.RPAREN)


            self.state = 2176
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,344,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2168
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 2167
                        self.match(vbaParser.WS)


                    self.state = 2170
                    self.match(vbaParser.LPAREN)
                    self.state = 2171
                    self.subscripts()
                    self.state = 2172
                    self.match(vbaParser.RPAREN) 
                self.state = 2178
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,344,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ECS_MemberProcedureCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(vbaParser.CALL, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(vbaParser.ImplicitCallStmt_InStmtContext,0)


        def typeHint(self):
            return self.getTypedRuleContext(vbaParser.TypeHintContext,0)


        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.LPAREN)
            else:
                return self.getToken(vbaParser.LPAREN, i)

        def argsCall(self):
            return self.getTypedRuleContext(vbaParser.ArgsCallContext,0)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.RPAREN)
            else:
                return self.getToken(vbaParser.RPAREN, i)

        def subscripts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.SubscriptsContext)
            else:
                return self.getTypedRuleContext(vbaParser.SubscriptsContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_eCS_MemberProcedureCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterECS_MemberProcedureCall" ):
                listener.enterECS_MemberProcedureCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitECS_MemberProcedureCall" ):
                listener.exitECS_MemberProcedureCall(self)




    def eCS_MemberProcedureCall(self):

        localctx = vbaParser.ECS_MemberProcedureCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_eCS_MemberProcedureCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2179
            self.match(vbaParser.CALL)
            self.state = 2180
            self.match(vbaParser.WS)
            self.state = 2182
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,345,self._ctx)
            if la_ == 1:
                self.state = 2181
                self.implicitCallStmt_InStmt()


            self.state = 2184
            self.match(vbaParser.T__3)
            self.state = 2185
            self.ambiguousIdentifier()
            self.state = 2187
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,346,self._ctx)
            if la_ == 1:
                self.state = 2186
                self.typeHint()


            self.state = 2202
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,350,self._ctx)
            if la_ == 1:
                self.state = 2190
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 2189
                    self.match(vbaParser.WS)


                self.state = 2192
                self.match(vbaParser.LPAREN)
                self.state = 2194
                self._errHandler.sync(self);
                la_ = self._interp.adaptivePredict(self._input,348,self._ctx)
                if la_ == 1:
                    self.state = 2193
                    self.match(vbaParser.WS)


                self.state = 2196
                self.argsCall()
                self.state = 2198
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 2197
                    self.match(vbaParser.WS)


                self.state = 2200
                self.match(vbaParser.RPAREN)


            self.state = 2213
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,352,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2205
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 2204
                        self.match(vbaParser.WS)


                    self.state = 2207
                    self.match(vbaParser.LPAREN)
                    self.state = 2208
                    self.subscripts()
                    self.state = 2209
                    self.match(vbaParser.RPAREN) 
                self.state = 2215
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,352,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImplicitCallStmt_InBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def iCS_B_MemberProcedureCall(self):
            return self.getTypedRuleContext(vbaParser.ICS_B_MemberProcedureCallContext,0)


        def iCS_B_ProcedureCall(self):
            return self.getTypedRuleContext(vbaParser.ICS_B_ProcedureCallContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_implicitCallStmt_InBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplicitCallStmt_InBlock" ):
                listener.enterImplicitCallStmt_InBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplicitCallStmt_InBlock" ):
                listener.exitImplicitCallStmt_InBlock(self)




    def implicitCallStmt_InBlock(self):

        localctx = vbaParser.ImplicitCallStmt_InBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_implicitCallStmt_InBlock)
        try:
            self.state = 2218
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,353,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2216
                self.iCS_B_MemberProcedureCall()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2217
                self.iCS_B_ProcedureCall()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ICS_B_MemberProcedureCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(vbaParser.ImplicitCallStmt_InStmtContext,0)


        def typeHint(self):
            return self.getTypedRuleContext(vbaParser.TypeHintContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def argsCall(self):
            return self.getTypedRuleContext(vbaParser.ArgsCallContext,0)


        def dictionaryCallStmt(self):
            return self.getTypedRuleContext(vbaParser.DictionaryCallStmtContext,0)


        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.LPAREN)
            else:
                return self.getToken(vbaParser.LPAREN, i)

        def subscripts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.SubscriptsContext)
            else:
                return self.getTypedRuleContext(vbaParser.SubscriptsContext,i)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.RPAREN)
            else:
                return self.getToken(vbaParser.RPAREN, i)

        def getRuleIndex(self):
            return vbaParser.RULE_iCS_B_MemberProcedureCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterICS_B_MemberProcedureCall" ):
                listener.enterICS_B_MemberProcedureCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitICS_B_MemberProcedureCall" ):
                listener.exitICS_B_MemberProcedureCall(self)




    def iCS_B_MemberProcedureCall(self):

        localctx = vbaParser.ICS_B_MemberProcedureCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_iCS_B_MemberProcedureCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2221
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,354,self._ctx)
            if la_ == 1:
                self.state = 2220
                self.implicitCallStmt_InStmt()


            self.state = 2223
            self.match(vbaParser.T__3)
            self.state = 2224
            self.ambiguousIdentifier()
            self.state = 2226
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,355,self._ctx)
            if la_ == 1:
                self.state = 2225
                self.typeHint()


            self.state = 2230
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,356,self._ctx)
            if la_ == 1:
                self.state = 2228
                self.match(vbaParser.WS)
                self.state = 2229
                self.argsCall()


            self.state = 2233
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,357,self._ctx)
            if la_ == 1:
                self.state = 2232
                self.dictionaryCallStmt()


            self.state = 2244
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,359,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2236
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 2235
                        self.match(vbaParser.WS)


                    self.state = 2238
                    self.match(vbaParser.LPAREN)
                    self.state = 2239
                    self.subscripts()
                    self.state = 2240
                    self.match(vbaParser.RPAREN) 
                self.state = 2246
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,359,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ICS_B_ProcedureCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def certainIdentifier(self):
            return self.getTypedRuleContext(vbaParser.CertainIdentifierContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def argsCall(self):
            return self.getTypedRuleContext(vbaParser.ArgsCallContext,0)


        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.LPAREN)
            else:
                return self.getToken(vbaParser.LPAREN, i)

        def subscripts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.SubscriptsContext)
            else:
                return self.getTypedRuleContext(vbaParser.SubscriptsContext,i)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.RPAREN)
            else:
                return self.getToken(vbaParser.RPAREN, i)

        def getRuleIndex(self):
            return vbaParser.RULE_iCS_B_ProcedureCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterICS_B_ProcedureCall" ):
                listener.enterICS_B_ProcedureCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitICS_B_ProcedureCall" ):
                listener.exitICS_B_ProcedureCall(self)




    def iCS_B_ProcedureCall(self):

        localctx = vbaParser.ICS_B_ProcedureCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_iCS_B_ProcedureCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2247
            self.certainIdentifier()
            self.state = 2250
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,360,self._ctx)
            if la_ == 1:
                self.state = 2248
                self.match(vbaParser.WS)
                self.state = 2249
                self.argsCall()


            self.state = 2261
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,362,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2253
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 2252
                        self.match(vbaParser.WS)


                    self.state = 2255
                    self.match(vbaParser.LPAREN)
                    self.state = 2256
                    self.subscripts()
                    self.state = 2257
                    self.match(vbaParser.RPAREN) 
                self.state = 2263
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,362,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImplicitCallStmt_InStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def iCS_S_MembersCall(self):
            return self.getTypedRuleContext(vbaParser.ICS_S_MembersCallContext,0)


        def iCS_S_VariableOrProcedureCall(self):
            return self.getTypedRuleContext(vbaParser.ICS_S_VariableOrProcedureCallContext,0)


        def iCS_S_ProcedureOrArrayCall(self):
            return self.getTypedRuleContext(vbaParser.ICS_S_ProcedureOrArrayCallContext,0)


        def iCS_S_DictionaryCall(self):
            return self.getTypedRuleContext(vbaParser.ICS_S_DictionaryCallContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_implicitCallStmt_InStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplicitCallStmt_InStmt" ):
                listener.enterImplicitCallStmt_InStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplicitCallStmt_InStmt" ):
                listener.exitImplicitCallStmt_InStmt(self)




    def implicitCallStmt_InStmt(self):

        localctx = vbaParser.ImplicitCallStmt_InStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_implicitCallStmt_InStmt)
        try:
            self.state = 2268
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,363,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2264
                self.iCS_S_MembersCall()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2265
                self.iCS_S_VariableOrProcedureCall()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2266
                self.iCS_S_ProcedureOrArrayCall()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2267
                self.iCS_S_DictionaryCall()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ICS_S_VariableOrProcedureCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def typeHint(self):
            return self.getTypedRuleContext(vbaParser.TypeHintContext,0)


        def dictionaryCallStmt(self):
            return self.getTypedRuleContext(vbaParser.DictionaryCallStmtContext,0)


        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.LPAREN)
            else:
                return self.getToken(vbaParser.LPAREN, i)

        def subscripts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.SubscriptsContext)
            else:
                return self.getTypedRuleContext(vbaParser.SubscriptsContext,i)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.RPAREN)
            else:
                return self.getToken(vbaParser.RPAREN, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_iCS_S_VariableOrProcedureCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterICS_S_VariableOrProcedureCall" ):
                listener.enterICS_S_VariableOrProcedureCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitICS_S_VariableOrProcedureCall" ):
                listener.exitICS_S_VariableOrProcedureCall(self)




    def iCS_S_VariableOrProcedureCall(self):

        localctx = vbaParser.ICS_S_VariableOrProcedureCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_iCS_S_VariableOrProcedureCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2270
            self.ambiguousIdentifier()
            self.state = 2272
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,364,self._ctx)
            if la_ == 1:
                self.state = 2271
                self.typeHint()


            self.state = 2275
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,365,self._ctx)
            if la_ == 1:
                self.state = 2274
                self.dictionaryCallStmt()


            self.state = 2286
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,367,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2278
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 2277
                        self.match(vbaParser.WS)


                    self.state = 2280
                    self.match(vbaParser.LPAREN)
                    self.state = 2281
                    self.subscripts()
                    self.state = 2282
                    self.match(vbaParser.RPAREN) 
                self.state = 2288
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,367,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ICS_S_ProcedureOrArrayCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.LPAREN)
            else:
                return self.getToken(vbaParser.LPAREN, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.RPAREN)
            else:
                return self.getToken(vbaParser.RPAREN, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def baseType(self):
            return self.getTypedRuleContext(vbaParser.BaseTypeContext,0)


        def typeHint(self):
            return self.getTypedRuleContext(vbaParser.TypeHintContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def argsCall(self):
            return self.getTypedRuleContext(vbaParser.ArgsCallContext,0)


        def dictionaryCallStmt(self):
            return self.getTypedRuleContext(vbaParser.DictionaryCallStmtContext,0)


        def subscripts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.SubscriptsContext)
            else:
                return self.getTypedRuleContext(vbaParser.SubscriptsContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_iCS_S_ProcedureOrArrayCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterICS_S_ProcedureOrArrayCall" ):
                listener.enterICS_S_ProcedureOrArrayCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitICS_S_ProcedureOrArrayCall" ):
                listener.exitICS_S_ProcedureOrArrayCall(self)




    def iCS_S_ProcedureOrArrayCall(self):

        localctx = vbaParser.ICS_S_ProcedureOrArrayCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_iCS_S_ProcedureOrArrayCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2291
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,368,self._ctx)
            if la_ == 1:
                self.state = 2289
                self.ambiguousIdentifier()
                pass

            elif la_ == 2:
                self.state = 2290
                self.baseType()
                pass


            self.state = 2294
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__2) | (1 << vbaParser.T__4) | (1 << vbaParser.T__5) | (1 << vbaParser.T__6) | (1 << vbaParser.T__7))) != 0) or _la==vbaParser.AMPERSAND:
                self.state = 2293
                self.typeHint()


            self.state = 2297
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 2296
                self.match(vbaParser.WS)


            self.state = 2299
            self.match(vbaParser.LPAREN)
            self.state = 2301
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,371,self._ctx)
            if la_ == 1:
                self.state = 2300
                self.match(vbaParser.WS)


            self.state = 2307
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,373,self._ctx)
            if la_ == 1:
                self.state = 2303
                self.argsCall()
                self.state = 2305
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 2304
                    self.match(vbaParser.WS)




            self.state = 2309
            self.match(vbaParser.RPAREN)
            self.state = 2311
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,374,self._ctx)
            if la_ == 1:
                self.state = 2310
                self.dictionaryCallStmt()


            self.state = 2322
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,376,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2314
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 2313
                        self.match(vbaParser.WS)


                    self.state = 2316
                    self.match(vbaParser.LPAREN)
                    self.state = 2317
                    self.subscripts()
                    self.state = 2318
                    self.match(vbaParser.RPAREN) 
                self.state = 2324
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,376,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ICS_S_MembersCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def iCS_S_VariableOrProcedureCall(self):
            return self.getTypedRuleContext(vbaParser.ICS_S_VariableOrProcedureCallContext,0)


        def iCS_S_ProcedureOrArrayCall(self):
            return self.getTypedRuleContext(vbaParser.ICS_S_ProcedureOrArrayCallContext,0)


        def iCS_S_MemberCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ICS_S_MemberCallContext)
            else:
                return self.getTypedRuleContext(vbaParser.ICS_S_MemberCallContext,i)


        def dictionaryCallStmt(self):
            return self.getTypedRuleContext(vbaParser.DictionaryCallStmtContext,0)


        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.LPAREN)
            else:
                return self.getToken(vbaParser.LPAREN, i)

        def subscripts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.SubscriptsContext)
            else:
                return self.getTypedRuleContext(vbaParser.SubscriptsContext,i)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.RPAREN)
            else:
                return self.getToken(vbaParser.RPAREN, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_iCS_S_MembersCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterICS_S_MembersCall" ):
                listener.enterICS_S_MembersCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitICS_S_MembersCall" ):
                listener.exitICS_S_MembersCall(self)




    def iCS_S_MembersCall(self):

        localctx = vbaParser.ICS_S_MembersCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_iCS_S_MembersCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2327
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,377,self._ctx)
            if la_ == 1:
                self.state = 2325
                self.iCS_S_VariableOrProcedureCall()

            elif la_ == 2:
                self.state = 2326
                self.iCS_S_ProcedureOrArrayCall()


            self.state = 2330 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2329
                    self.iCS_S_MemberCall()

                else:
                    raise NoViableAltException(self)
                self.state = 2332 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,378,self._ctx)

            self.state = 2335
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,379,self._ctx)
            if la_ == 1:
                self.state = 2334
                self.dictionaryCallStmt()


            self.state = 2346
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,381,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2338
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 2337
                        self.match(vbaParser.WS)


                    self.state = 2340
                    self.match(vbaParser.LPAREN)
                    self.state = 2341
                    self.subscripts()
                    self.state = 2342
                    self.match(vbaParser.RPAREN) 
                self.state = 2348
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,381,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ICS_S_MemberCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def iCS_S_VariableOrProcedureCall(self):
            return self.getTypedRuleContext(vbaParser.ICS_S_VariableOrProcedureCallContext,0)


        def iCS_S_ProcedureOrArrayCall(self):
            return self.getTypedRuleContext(vbaParser.ICS_S_ProcedureOrArrayCallContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_iCS_S_MemberCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterICS_S_MemberCall" ):
                listener.enterICS_S_MemberCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitICS_S_MemberCall" ):
                listener.exitICS_S_MemberCall(self)




    def iCS_S_MemberCall(self):

        localctx = vbaParser.ICS_S_MemberCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_iCS_S_MemberCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2349
            _la = self._input.LA(1)
            if not(_la==vbaParser.T__3 or _la==vbaParser.T__4):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
            self.state = 2352
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,382,self._ctx)
            if la_ == 1:
                self.state = 2350
                self.iCS_S_VariableOrProcedureCall()
                pass

            elif la_ == 2:
                self.state = 2351
                self.iCS_S_ProcedureOrArrayCall()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ICS_S_DictionaryCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dictionaryCallStmt(self):
            return self.getTypedRuleContext(vbaParser.DictionaryCallStmtContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_iCS_S_DictionaryCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterICS_S_DictionaryCall" ):
                listener.enterICS_S_DictionaryCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitICS_S_DictionaryCall" ):
                listener.exitICS_S_DictionaryCall(self)




    def iCS_S_DictionaryCall(self):

        localctx = vbaParser.ICS_S_DictionaryCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_iCS_S_DictionaryCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2354
            self.dictionaryCallStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgsCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ArgCallContext)
            else:
                return self.getTypedRuleContext(vbaParser.ArgCallContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_argsCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgsCall" ):
                listener.enterArgsCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgsCall" ):
                listener.exitArgsCall(self)




    def argsCall(self):

        localctx = vbaParser.ArgsCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_argsCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2368
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,386,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2357
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__3) | (1 << vbaParser.T__4) | (1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST) | (1 << vbaParser.DATABASE) | (1 << vbaParser.DATE) | (1 << vbaParser.DECLARE) | (1 << vbaParser.DEFBOOL) | (1 << vbaParser.DEFBYTE) | (1 << vbaParser.DEFDATE) | (1 << vbaParser.DEFDBL) | (1 << vbaParser.DEFDEC) | (1 << vbaParser.DEFCUR) | (1 << vbaParser.DEFINT) | (1 << vbaParser.DEFLNG) | (1 << vbaParser.DEFOBJ) | (1 << vbaParser.DEFSNG) | (1 << vbaParser.DEFSTR) | (1 << vbaParser.DEFVAR) | (1 << vbaParser.DELETESETTING) | (1 << vbaParser.DIM) | (1 << vbaParser.DO) | (1 << vbaParser.DOUBLE) | (1 << vbaParser.EACH) | (1 << vbaParser.ELSE) | (1 << vbaParser.ELSEIF) | (1 << vbaParser.END) | (1 << vbaParser.ENUM))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)) | (1 << (vbaParser.LIB - 64)) | (1 << (vbaParser.LIKE - 64)) | (1 << (vbaParser.LSET - 64)) | (1 << (vbaParser.ME - 64)) | (1 << (vbaParser.MID - 64)) | (1 << (vbaParser.MKDIR - 64)) | (1 << (vbaParser.MOD - 64)) | (1 << (vbaParser.NAME - 64)) | (1 << (vbaParser.NEXT - 64)) | (1 << (vbaParser.NEW - 64)) | (1 << (vbaParser.NOT - 64)) | (1 << (vbaParser.NOTHING - 64)) | (1 << (vbaParser.NULL - 64)) | (1 << (vbaParser.ON - 64)) | (1 << (vbaParser.OPEN - 64)) | (1 << (vbaParser.OPTIONAL - 64)) | (1 << (vbaParser.OR - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)) | (1 << (vbaParser.SPC - 128)) | (1 << (vbaParser.STATIC - 128)) | (1 << (vbaParser.STEP - 128)) | (1 << (vbaParser.STOP - 128)) | (1 << (vbaParser.STRING - 128)) | (1 << (vbaParser.SUB - 128)) | (1 << (vbaParser.TAB - 128)) | (1 << (vbaParser.TEXT - 128)) | (1 << (vbaParser.THEN - 128)) | (1 << (vbaParser.TIME - 128)) | (1 << (vbaParser.TO - 128)) | (1 << (vbaParser.TRUE - 128)) | (1 << (vbaParser.TYPE - 128)) | (1 << (vbaParser.TYPEOF - 128)) | (1 << (vbaParser.UNLOAD - 128)) | (1 << (vbaParser.UNLOCK - 128)) | (1 << (vbaParser.UNTIL - 128)) | (1 << (vbaParser.VARIANT - 128)) | (1 << (vbaParser.VERSION - 128)) | (1 << (vbaParser.WEND - 128)) | (1 << (vbaParser.WHILE - 128)) | (1 << (vbaParser.WIDTH - 128)) | (1 << (vbaParser.WITH - 128)) | (1 << (vbaParser.WITHEVENTS - 128)) | (1 << (vbaParser.WRITE - 128)) | (1 << (vbaParser.XOR - 128)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (vbaParser.LPAREN - 193)) | (1 << (vbaParser.MINUS - 193)) | (1 << (vbaParser.PLUS - 193)) | (1 << (vbaParser.RPAREN - 193)) | (1 << (vbaParser.STRINGLITERAL - 193)) | (1 << (vbaParser.OCTLITERAL - 193)) | (1 << (vbaParser.HEXLITERAL - 193)) | (1 << (vbaParser.SHORTLITERAL - 193)) | (1 << (vbaParser.INTEGERLITERAL - 193)) | (1 << (vbaParser.DOUBLELITERAL - 193)) | (1 << (vbaParser.DATELITERAL - 193)) | (1 << (vbaParser.IDENTIFIER - 193)))) != 0):
                        self.state = 2356
                        self.argCall()


                    self.state = 2360
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 2359
                        self.match(vbaParser.WS)


                    self.state = 2362
                    _la = self._input.LA(1)
                    if not(_la==vbaParser.T__0 or _la==vbaParser.T__1):
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()
                    self.state = 2364
                    self._errHandler.sync(self);
                    la_ = self._interp.adaptivePredict(self._input,385,self._ctx)
                    if la_ == 1:
                        self.state = 2363
                        self.match(vbaParser.WS)

             
                self.state = 2370
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,386,self._ctx)

            self.state = 2371
            self.argCall()
            self.state = 2384
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,390,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2373
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 2372
                        self.match(vbaParser.WS)


                    self.state = 2375
                    _la = self._input.LA(1)
                    if not(_la==vbaParser.T__0 or _la==vbaParser.T__1):
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()
                    self.state = 2377
                    self._errHandler.sync(self);
                    la_ = self._interp.adaptivePredict(self._input,388,self._ctx)
                    if la_ == 1:
                        self.state = 2376
                        self.match(vbaParser.WS)


                    self.state = 2380
                    self._errHandler.sync(self);
                    la_ = self._interp.adaptivePredict(self._input,389,self._ctx)
                    if la_ == 1:
                        self.state = 2379
                        self.argCall()

             
                self.state = 2386
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,390,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def BYVAL(self):
            return self.getToken(vbaParser.BYVAL, 0)

        def BYREF(self):
            return self.getToken(vbaParser.BYREF, 0)

        def PARAMARRAY(self):
            return self.getToken(vbaParser.PARAMARRAY, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_argCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgCall" ):
                listener.enterArgCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgCall" ):
                listener.exitArgCall(self)




    def argCall(self):

        localctx = vbaParser.ArgCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_argCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2388
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,391,self._ctx)
            if la_ == 1:
                self.state = 2387
                self.match(vbaParser.LPAREN)


            self.state = 2392
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,392,self._ctx)
            if la_ == 1:
                self.state = 2390
                _la = self._input.LA(1)
                if not(_la==vbaParser.BYVAL or _la==vbaParser.BYREF or _la==vbaParser.PARAMARRAY):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()
                self.state = 2391
                self.match(vbaParser.WS)


            self.state = 2395
            _la = self._input.LA(1)
            if _la==vbaParser.RPAREN:
                self.state = 2394
                self.match(vbaParser.RPAREN)


            self.state = 2397
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DictionaryCallStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def typeHint(self):
            return self.getTypedRuleContext(vbaParser.TypeHintContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_dictionaryCallStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictionaryCallStmt" ):
                listener.enterDictionaryCallStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictionaryCallStmt" ):
                listener.exitDictionaryCallStmt(self)




    def dictionaryCallStmt(self):

        localctx = vbaParser.DictionaryCallStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_dictionaryCallStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2399
            self.match(vbaParser.T__4)
            self.state = 2400
            self.ambiguousIdentifier()
            self.state = 2402
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,394,self._ctx)
            if la_ == 1:
                self.state = 2401
                self.typeHint()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ArgContext)
            else:
                return self.getTypedRuleContext(vbaParser.ArgContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_argList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgList" ):
                listener.enterArgList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgList" ):
                listener.exitArgList(self)




    def argList(self):

        localctx = vbaParser.ArgListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_argList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2404
            self.match(vbaParser.LPAREN)
            self.state = 2422
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,399,self._ctx)
            if la_ == 1:
                self.state = 2406
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 2405
                    self.match(vbaParser.WS)


                self.state = 2408
                self.arg()
                self.state = 2419
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,398,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2410
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 2409
                            self.match(vbaParser.WS)


                        self.state = 2412
                        self.match(vbaParser.T__0)
                        self.state = 2414
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 2413
                            self.match(vbaParser.WS)


                        self.state = 2416
                        self.arg() 
                    self.state = 2421
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,398,self._ctx)



            self.state = 2425
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 2424
                self.match(vbaParser.WS)


            self.state = 2427
            self.match(vbaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def OPTIONAL(self):
            return self.getToken(vbaParser.OPTIONAL, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def PARAMARRAY(self):
            return self.getToken(vbaParser.PARAMARRAY, 0)

        def typeHint(self):
            return self.getTypedRuleContext(vbaParser.TypeHintContext,0)


        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def asTypeClause(self):
            return self.getTypedRuleContext(vbaParser.AsTypeClauseContext,0)


        def argDefaultValue(self):
            return self.getTypedRuleContext(vbaParser.ArgDefaultValueContext,0)


        def BYVAL(self):
            return self.getToken(vbaParser.BYVAL, 0)

        def BYREF(self):
            return self.getToken(vbaParser.BYREF, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArg" ):
                listener.enterArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArg" ):
                listener.exitArg(self)




    def arg(self):

        localctx = vbaParser.ArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_arg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2431
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,401,self._ctx)
            if la_ == 1:
                self.state = 2429
                self.match(vbaParser.OPTIONAL)
                self.state = 2430
                self.match(vbaParser.WS)


            self.state = 2435
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,402,self._ctx)
            if la_ == 1:
                self.state = 2433
                _la = self._input.LA(1)
                if not(_la==vbaParser.BYVAL or _la==vbaParser.BYREF):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()
                self.state = 2434
                self.match(vbaParser.WS)


            self.state = 2439
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,403,self._ctx)
            if la_ == 1:
                self.state = 2437
                self.match(vbaParser.PARAMARRAY)
                self.state = 2438
                self.match(vbaParser.WS)


            self.state = 2441
            self.ambiguousIdentifier()
            self.state = 2443
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__2) | (1 << vbaParser.T__4) | (1 << vbaParser.T__5) | (1 << vbaParser.T__6) | (1 << vbaParser.T__7))) != 0) or _la==vbaParser.AMPERSAND:
                self.state = 2442
                self.typeHint()


            self.state = 2453
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,407,self._ctx)
            if la_ == 1:
                self.state = 2446
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 2445
                    self.match(vbaParser.WS)


                self.state = 2448
                self.match(vbaParser.LPAREN)
                self.state = 2450
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 2449
                    self.match(vbaParser.WS)


                self.state = 2452
                self.match(vbaParser.RPAREN)


            self.state = 2459
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,409,self._ctx)
            if la_ == 1:
                self.state = 2456
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 2455
                    self.match(vbaParser.WS)


                self.state = 2458
                self.asTypeClause()


            self.state = 2465
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,411,self._ctx)
            if la_ == 1:
                self.state = 2462
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 2461
                    self.match(vbaParser.WS)


                self.state = 2464
                self.argDefaultValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgDefaultValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(vbaParser.ValueStmtContext,0)


        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_argDefaultValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgDefaultValue" ):
                listener.enterArgDefaultValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgDefaultValue" ):
                listener.exitArgDefaultValue(self)




    def argDefaultValue(self):

        localctx = vbaParser.ArgDefaultValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_argDefaultValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2467
            self.match(vbaParser.EQ)
            self.state = 2469
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 2468
                self.match(vbaParser.WS)


            self.state = 2471
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubscriptsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.SubscriptContext)
            else:
                return self.getTypedRuleContext(vbaParser.SubscriptContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_subscripts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscripts" ):
                listener.enterSubscripts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscripts" ):
                listener.exitSubscripts(self)




    def subscripts(self):

        localctx = vbaParser.SubscriptsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_subscripts)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2473
            self.subscript()
            self.state = 2484
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,415,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2475
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 2474
                        self.match(vbaParser.WS)


                    self.state = 2477
                    self.match(vbaParser.T__0)
                    self.state = 2479
                    _la = self._input.LA(1)
                    if _la==vbaParser.WS:
                        self.state = 2478
                        self.match(vbaParser.WS)


                    self.state = 2481
                    self.subscript() 
                self.state = 2486
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,415,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubscriptContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(vbaParser.ValueStmtContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def TO(self):
            return self.getToken(vbaParser.TO, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_subscript

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)




    def subscript(self):

        localctx = vbaParser.SubscriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_subscript)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2492
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,416,self._ctx)
            if la_ == 1:
                self.state = 2487
                self.valueStmt(0)
                self.state = 2488
                self.match(vbaParser.WS)
                self.state = 2489
                self.match(vbaParser.TO)
                self.state = 2490
                self.match(vbaParser.WS)


            self.state = 2494
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AmbiguousIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.IDENTIFIER)
            else:
                return self.getToken(vbaParser.IDENTIFIER, i)

        def ambiguousKeyword(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.AmbiguousKeywordContext)
            else:
                return self.getTypedRuleContext(vbaParser.AmbiguousKeywordContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_ambiguousIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAmbiguousIdentifier" ):
                listener.enterAmbiguousIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAmbiguousIdentifier" ):
                listener.exitAmbiguousIdentifier(self)




    def ambiguousIdentifier(self):

        localctx = vbaParser.AmbiguousIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_ambiguousIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2498 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2498
                    token = self._input.LA(1)
                    if token in [vbaParser.IDENTIFIER]:
                        self.state = 2496
                        self.match(vbaParser.IDENTIFIER)

                    elif token in [vbaParser.ACCESS, vbaParser.ADDRESSOF, vbaParser.ALIAS, vbaParser.AND, vbaParser.ATTRIBUTE, vbaParser.APPACTIVATE, vbaParser.APPEND, vbaParser.AS, vbaParser.BEGIN, vbaParser.BEEP, vbaParser.BINARY, vbaParser.BOOLEAN, vbaParser.BYVAL, vbaParser.BYREF, vbaParser.BYTE, vbaParser.CALL, vbaParser.CASE, vbaParser.CHDIR, vbaParser.CHDRIVE, vbaParser.CLASS, vbaParser.CLOSE, vbaParser.COLLECTION, vbaParser.CONST, vbaParser.DATABASE, vbaParser.DATE, vbaParser.DECLARE, vbaParser.DEFBOOL, vbaParser.DEFBYTE, vbaParser.DEFDATE, vbaParser.DEFDBL, vbaParser.DEFDEC, vbaParser.DEFCUR, vbaParser.DEFINT, vbaParser.DEFLNG, vbaParser.DEFOBJ, vbaParser.DEFSNG, vbaParser.DEFSTR, vbaParser.DEFVAR, vbaParser.DELETESETTING, vbaParser.DIM, vbaParser.DO, vbaParser.DOUBLE, vbaParser.EACH, vbaParser.ELSE, vbaParser.ELSEIF, vbaParser.END, vbaParser.ENUM, vbaParser.EQV, vbaParser.ERASE, vbaParser.ERROR, vbaParser.EVENT, vbaParser.FALSE, vbaParser.FILECOPY, vbaParser.FRIEND, vbaParser.FOR, vbaParser.FUNCTION, vbaParser.GET, vbaParser.GLOBAL, vbaParser.GOSUB, vbaParser.GOTO, vbaParser.IF, vbaParser.IMP, vbaParser.IMPLEMENTS, vbaParser.IN, vbaParser.INPUT, vbaParser.IS, vbaParser.INTEGER, vbaParser.KILL, vbaParser.LOAD, vbaParser.LOCK, vbaParser.LONG, vbaParser.LOOP, vbaParser.LEN, vbaParser.LET, vbaParser.LIB, vbaParser.LIKE, vbaParser.LSET, vbaParser.ME, vbaParser.MID, vbaParser.MKDIR, vbaParser.MOD, vbaParser.NAME, vbaParser.NEXT, vbaParser.NEW, vbaParser.NOT, vbaParser.NOTHING, vbaParser.NULL, vbaParser.ON, vbaParser.OPEN, vbaParser.OPTIONAL, vbaParser.OR, vbaParser.OUTPUT, vbaParser.PARAMARRAY, vbaParser.PRESERVE, vbaParser.PRINT, vbaParser.PRIVATE, vbaParser.PUBLIC, vbaParser.PUT, vbaParser.RANDOM, vbaParser.RANDOMIZE, vbaParser.RAISEEVENT, vbaParser.READ, vbaParser.REDIM, vbaParser.REM, vbaParser.RESET, vbaParser.RESUME, vbaParser.RETURN, vbaParser.RMDIR, vbaParser.RSET, vbaParser.SAVEPICTURE, vbaParser.SAVESETTING, vbaParser.SEEK, vbaParser.SELECT, vbaParser.SENDKEYS, vbaParser.SET, vbaParser.SETATTR, vbaParser.SHARED, vbaParser.SINGLE, vbaParser.SPC, vbaParser.STATIC, vbaParser.STEP, vbaParser.STOP, vbaParser.STRING, vbaParser.SUB, vbaParser.TAB, vbaParser.TEXT, vbaParser.THEN, vbaParser.TIME, vbaParser.TO, vbaParser.TRUE, vbaParser.TYPE, vbaParser.TYPEOF, vbaParser.UNLOAD, vbaParser.UNLOCK, vbaParser.UNTIL, vbaParser.VARIANT, vbaParser.VERSION, vbaParser.WEND, vbaParser.WHILE, vbaParser.WIDTH, vbaParser.WITH, vbaParser.WITHEVENTS, vbaParser.WRITE, vbaParser.XOR]:
                        self.state = 2497
                        self.ambiguousKeyword()

                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 2500 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,418,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AsTypeClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(vbaParser.AS, 0)

        def type(self):
            return self.getTypedRuleContext(vbaParser.TypeContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def NEW(self):
            return self.getToken(vbaParser.NEW, 0)

        def fieldLength(self):
            return self.getTypedRuleContext(vbaParser.FieldLengthContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_asTypeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsTypeClause" ):
                listener.enterAsTypeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsTypeClause" ):
                listener.exitAsTypeClause(self)




    def asTypeClause(self):

        localctx = vbaParser.AsTypeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_asTypeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2502
            self.match(vbaParser.AS)
            self.state = 2504
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 2503
                self.match(vbaParser.WS)


            self.state = 2508
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,420,self._ctx)
            if la_ == 1:
                self.state = 2506
                self.match(vbaParser.NEW)
                self.state = 2507
                self.match(vbaParser.WS)


            self.state = 2510
            self.type()
            self.state = 2515
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,422,self._ctx)
            if la_ == 1:
                self.state = 2512
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 2511
                    self.match(vbaParser.WS)


                self.state = 2514
                self.fieldLength()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BaseTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOLEAN(self):
            return self.getToken(vbaParser.BOOLEAN, 0)

        def BYTE(self):
            return self.getToken(vbaParser.BYTE, 0)

        def COLLECTION(self):
            return self.getToken(vbaParser.COLLECTION, 0)

        def DATE(self):
            return self.getToken(vbaParser.DATE, 0)

        def DOUBLE(self):
            return self.getToken(vbaParser.DOUBLE, 0)

        def INTEGER(self):
            return self.getToken(vbaParser.INTEGER, 0)

        def LONG(self):
            return self.getToken(vbaParser.LONG, 0)

        def SINGLE(self):
            return self.getToken(vbaParser.SINGLE, 0)

        def STRING(self):
            return self.getToken(vbaParser.STRING, 0)

        def VARIANT(self):
            return self.getToken(vbaParser.VARIANT, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_baseType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBaseType" ):
                listener.enterBaseType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBaseType" ):
                listener.exitBaseType(self)




    def baseType(self):

        localctx = vbaParser.BaseTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_baseType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2517
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYTE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.DATE) | (1 << vbaParser.DOUBLE))) != 0) or _la==vbaParser.INTEGER or _la==vbaParser.LONG or ((((_la - 159)) & ~0x3f) == 0 and ((1 << (_la - 159)) & ((1 << (vbaParser.SINGLE - 159)) | (1 << (vbaParser.STRING - 159)) | (1 << (vbaParser.VARIANT - 159)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CertainIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.IDENTIFIER)
            else:
                return self.getToken(vbaParser.IDENTIFIER, i)

        def ambiguousKeyword(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.AmbiguousKeywordContext)
            else:
                return self.getTypedRuleContext(vbaParser.AmbiguousKeywordContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_certainIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCertainIdentifier" ):
                listener.enterCertainIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCertainIdentifier" ):
                listener.exitCertainIdentifier(self)




    def certainIdentifier(self):

        localctx = vbaParser.CertainIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_certainIdentifier)
        try:
            self.state = 2534
            token = self._input.LA(1)
            if token in [vbaParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2519
                self.match(vbaParser.IDENTIFIER)
                self.state = 2524
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,424,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2522
                        token = self._input.LA(1)
                        if token in [vbaParser.ACCESS, vbaParser.ADDRESSOF, vbaParser.ALIAS, vbaParser.AND, vbaParser.ATTRIBUTE, vbaParser.APPACTIVATE, vbaParser.APPEND, vbaParser.AS, vbaParser.BEGIN, vbaParser.BEEP, vbaParser.BINARY, vbaParser.BOOLEAN, vbaParser.BYVAL, vbaParser.BYREF, vbaParser.BYTE, vbaParser.CALL, vbaParser.CASE, vbaParser.CHDIR, vbaParser.CHDRIVE, vbaParser.CLASS, vbaParser.CLOSE, vbaParser.COLLECTION, vbaParser.CONST, vbaParser.DATABASE, vbaParser.DATE, vbaParser.DECLARE, vbaParser.DEFBOOL, vbaParser.DEFBYTE, vbaParser.DEFDATE, vbaParser.DEFDBL, vbaParser.DEFDEC, vbaParser.DEFCUR, vbaParser.DEFINT, vbaParser.DEFLNG, vbaParser.DEFOBJ, vbaParser.DEFSNG, vbaParser.DEFSTR, vbaParser.DEFVAR, vbaParser.DELETESETTING, vbaParser.DIM, vbaParser.DO, vbaParser.DOUBLE, vbaParser.EACH, vbaParser.ELSE, vbaParser.ELSEIF, vbaParser.END, vbaParser.ENUM, vbaParser.EQV, vbaParser.ERASE, vbaParser.ERROR, vbaParser.EVENT, vbaParser.FALSE, vbaParser.FILECOPY, vbaParser.FRIEND, vbaParser.FOR, vbaParser.FUNCTION, vbaParser.GET, vbaParser.GLOBAL, vbaParser.GOSUB, vbaParser.GOTO, vbaParser.IF, vbaParser.IMP, vbaParser.IMPLEMENTS, vbaParser.IN, vbaParser.INPUT, vbaParser.IS, vbaParser.INTEGER, vbaParser.KILL, vbaParser.LOAD, vbaParser.LOCK, vbaParser.LONG, vbaParser.LOOP, vbaParser.LEN, vbaParser.LET, vbaParser.LIB, vbaParser.LIKE, vbaParser.LSET, vbaParser.ME, vbaParser.MID, vbaParser.MKDIR, vbaParser.MOD, vbaParser.NAME, vbaParser.NEXT, vbaParser.NEW, vbaParser.NOT, vbaParser.NOTHING, vbaParser.NULL, vbaParser.ON, vbaParser.OPEN, vbaParser.OPTIONAL, vbaParser.OR, vbaParser.OUTPUT, vbaParser.PARAMARRAY, vbaParser.PRESERVE, vbaParser.PRINT, vbaParser.PRIVATE, vbaParser.PUBLIC, vbaParser.PUT, vbaParser.RANDOM, vbaParser.RANDOMIZE, vbaParser.RAISEEVENT, vbaParser.READ, vbaParser.REDIM, vbaParser.REM, vbaParser.RESET, vbaParser.RESUME, vbaParser.RETURN, vbaParser.RMDIR, vbaParser.RSET, vbaParser.SAVEPICTURE, vbaParser.SAVESETTING, vbaParser.SEEK, vbaParser.SELECT, vbaParser.SENDKEYS, vbaParser.SET, vbaParser.SETATTR, vbaParser.SHARED, vbaParser.SINGLE, vbaParser.SPC, vbaParser.STATIC, vbaParser.STEP, vbaParser.STOP, vbaParser.STRING, vbaParser.SUB, vbaParser.TAB, vbaParser.TEXT, vbaParser.THEN, vbaParser.TIME, vbaParser.TO, vbaParser.TRUE, vbaParser.TYPE, vbaParser.TYPEOF, vbaParser.UNLOAD, vbaParser.UNLOCK, vbaParser.UNTIL, vbaParser.VARIANT, vbaParser.VERSION, vbaParser.WEND, vbaParser.WHILE, vbaParser.WIDTH, vbaParser.WITH, vbaParser.WITHEVENTS, vbaParser.WRITE, vbaParser.XOR]:
                            self.state = 2520
                            self.ambiguousKeyword()

                        elif token in [vbaParser.IDENTIFIER]:
                            self.state = 2521
                            self.match(vbaParser.IDENTIFIER)

                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 2526
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,424,self._ctx)


            elif token in [vbaParser.ACCESS, vbaParser.ADDRESSOF, vbaParser.ALIAS, vbaParser.AND, vbaParser.ATTRIBUTE, vbaParser.APPACTIVATE, vbaParser.APPEND, vbaParser.AS, vbaParser.BEGIN, vbaParser.BEEP, vbaParser.BINARY, vbaParser.BOOLEAN, vbaParser.BYVAL, vbaParser.BYREF, vbaParser.BYTE, vbaParser.CALL, vbaParser.CASE, vbaParser.CHDIR, vbaParser.CHDRIVE, vbaParser.CLASS, vbaParser.CLOSE, vbaParser.COLLECTION, vbaParser.CONST, vbaParser.DATABASE, vbaParser.DATE, vbaParser.DECLARE, vbaParser.DEFBOOL, vbaParser.DEFBYTE, vbaParser.DEFDATE, vbaParser.DEFDBL, vbaParser.DEFDEC, vbaParser.DEFCUR, vbaParser.DEFINT, vbaParser.DEFLNG, vbaParser.DEFOBJ, vbaParser.DEFSNG, vbaParser.DEFSTR, vbaParser.DEFVAR, vbaParser.DELETESETTING, vbaParser.DIM, vbaParser.DO, vbaParser.DOUBLE, vbaParser.EACH, vbaParser.ELSE, vbaParser.ELSEIF, vbaParser.END, vbaParser.ENUM, vbaParser.EQV, vbaParser.ERASE, vbaParser.ERROR, vbaParser.EVENT, vbaParser.FALSE, vbaParser.FILECOPY, vbaParser.FRIEND, vbaParser.FOR, vbaParser.FUNCTION, vbaParser.GET, vbaParser.GLOBAL, vbaParser.GOSUB, vbaParser.GOTO, vbaParser.IF, vbaParser.IMP, vbaParser.IMPLEMENTS, vbaParser.IN, vbaParser.INPUT, vbaParser.IS, vbaParser.INTEGER, vbaParser.KILL, vbaParser.LOAD, vbaParser.LOCK, vbaParser.LONG, vbaParser.LOOP, vbaParser.LEN, vbaParser.LET, vbaParser.LIB, vbaParser.LIKE, vbaParser.LSET, vbaParser.ME, vbaParser.MID, vbaParser.MKDIR, vbaParser.MOD, vbaParser.NAME, vbaParser.NEXT, vbaParser.NEW, vbaParser.NOT, vbaParser.NOTHING, vbaParser.NULL, vbaParser.ON, vbaParser.OPEN, vbaParser.OPTIONAL, vbaParser.OR, vbaParser.OUTPUT, vbaParser.PARAMARRAY, vbaParser.PRESERVE, vbaParser.PRINT, vbaParser.PRIVATE, vbaParser.PUBLIC, vbaParser.PUT, vbaParser.RANDOM, vbaParser.RANDOMIZE, vbaParser.RAISEEVENT, vbaParser.READ, vbaParser.REDIM, vbaParser.REM, vbaParser.RESET, vbaParser.RESUME, vbaParser.RETURN, vbaParser.RMDIR, vbaParser.RSET, vbaParser.SAVEPICTURE, vbaParser.SAVESETTING, vbaParser.SEEK, vbaParser.SELECT, vbaParser.SENDKEYS, vbaParser.SET, vbaParser.SETATTR, vbaParser.SHARED, vbaParser.SINGLE, vbaParser.SPC, vbaParser.STATIC, vbaParser.STEP, vbaParser.STOP, vbaParser.STRING, vbaParser.SUB, vbaParser.TAB, vbaParser.TEXT, vbaParser.THEN, vbaParser.TIME, vbaParser.TO, vbaParser.TRUE, vbaParser.TYPE, vbaParser.TYPEOF, vbaParser.UNLOAD, vbaParser.UNLOCK, vbaParser.UNTIL, vbaParser.VARIANT, vbaParser.VERSION, vbaParser.WEND, vbaParser.WHILE, vbaParser.WIDTH, vbaParser.WITH, vbaParser.WITHEVENTS, vbaParser.WRITE, vbaParser.XOR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2527
                self.ambiguousKeyword()
                self.state = 2530 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2530
                        token = self._input.LA(1)
                        if token in [vbaParser.ACCESS, vbaParser.ADDRESSOF, vbaParser.ALIAS, vbaParser.AND, vbaParser.ATTRIBUTE, vbaParser.APPACTIVATE, vbaParser.APPEND, vbaParser.AS, vbaParser.BEGIN, vbaParser.BEEP, vbaParser.BINARY, vbaParser.BOOLEAN, vbaParser.BYVAL, vbaParser.BYREF, vbaParser.BYTE, vbaParser.CALL, vbaParser.CASE, vbaParser.CHDIR, vbaParser.CHDRIVE, vbaParser.CLASS, vbaParser.CLOSE, vbaParser.COLLECTION, vbaParser.CONST, vbaParser.DATABASE, vbaParser.DATE, vbaParser.DECLARE, vbaParser.DEFBOOL, vbaParser.DEFBYTE, vbaParser.DEFDATE, vbaParser.DEFDBL, vbaParser.DEFDEC, vbaParser.DEFCUR, vbaParser.DEFINT, vbaParser.DEFLNG, vbaParser.DEFOBJ, vbaParser.DEFSNG, vbaParser.DEFSTR, vbaParser.DEFVAR, vbaParser.DELETESETTING, vbaParser.DIM, vbaParser.DO, vbaParser.DOUBLE, vbaParser.EACH, vbaParser.ELSE, vbaParser.ELSEIF, vbaParser.END, vbaParser.ENUM, vbaParser.EQV, vbaParser.ERASE, vbaParser.ERROR, vbaParser.EVENT, vbaParser.FALSE, vbaParser.FILECOPY, vbaParser.FRIEND, vbaParser.FOR, vbaParser.FUNCTION, vbaParser.GET, vbaParser.GLOBAL, vbaParser.GOSUB, vbaParser.GOTO, vbaParser.IF, vbaParser.IMP, vbaParser.IMPLEMENTS, vbaParser.IN, vbaParser.INPUT, vbaParser.IS, vbaParser.INTEGER, vbaParser.KILL, vbaParser.LOAD, vbaParser.LOCK, vbaParser.LONG, vbaParser.LOOP, vbaParser.LEN, vbaParser.LET, vbaParser.LIB, vbaParser.LIKE, vbaParser.LSET, vbaParser.ME, vbaParser.MID, vbaParser.MKDIR, vbaParser.MOD, vbaParser.NAME, vbaParser.NEXT, vbaParser.NEW, vbaParser.NOT, vbaParser.NOTHING, vbaParser.NULL, vbaParser.ON, vbaParser.OPEN, vbaParser.OPTIONAL, vbaParser.OR, vbaParser.OUTPUT, vbaParser.PARAMARRAY, vbaParser.PRESERVE, vbaParser.PRINT, vbaParser.PRIVATE, vbaParser.PUBLIC, vbaParser.PUT, vbaParser.RANDOM, vbaParser.RANDOMIZE, vbaParser.RAISEEVENT, vbaParser.READ, vbaParser.REDIM, vbaParser.REM, vbaParser.RESET, vbaParser.RESUME, vbaParser.RETURN, vbaParser.RMDIR, vbaParser.RSET, vbaParser.SAVEPICTURE, vbaParser.SAVESETTING, vbaParser.SEEK, vbaParser.SELECT, vbaParser.SENDKEYS, vbaParser.SET, vbaParser.SETATTR, vbaParser.SHARED, vbaParser.SINGLE, vbaParser.SPC, vbaParser.STATIC, vbaParser.STEP, vbaParser.STOP, vbaParser.STRING, vbaParser.SUB, vbaParser.TAB, vbaParser.TEXT, vbaParser.THEN, vbaParser.TIME, vbaParser.TO, vbaParser.TRUE, vbaParser.TYPE, vbaParser.TYPEOF, vbaParser.UNLOAD, vbaParser.UNLOCK, vbaParser.UNTIL, vbaParser.VARIANT, vbaParser.VERSION, vbaParser.WEND, vbaParser.WHILE, vbaParser.WIDTH, vbaParser.WITH, vbaParser.WITHEVENTS, vbaParser.WRITE, vbaParser.XOR]:
                            self.state = 2528
                            self.ambiguousKeyword()

                        elif token in [vbaParser.IDENTIFIER]:
                            self.state = 2529
                            self.match(vbaParser.IDENTIFIER)

                        else:
                            raise NoViableAltException(self)


                    else:
                        raise NoViableAltException(self)
                    self.state = 2532 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,426,self._ctx)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComparisonOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(vbaParser.LT, 0)

        def LEQ(self):
            return self.getToken(vbaParser.LEQ, 0)

        def GT(self):
            return self.getToken(vbaParser.GT, 0)

        def GEQ(self):
            return self.getToken(vbaParser.GEQ, 0)

        def EQ(self):
            return self.getToken(vbaParser.EQ, 0)

        def NEQ(self):
            return self.getToken(vbaParser.NEQ, 0)

        def IS(self):
            return self.getToken(vbaParser.IS, 0)

        def LIKE(self):
            return self.getToken(vbaParser.LIKE, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)




    def comparisonOperator(self):

        localctx = vbaParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_comparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2536
            _la = self._input.LA(1)
            if not(_la==vbaParser.IS or _la==vbaParser.LIKE or ((((_la - 189)) & ~0x3f) == 0 and ((1 << (_la - 189)) & ((1 << (vbaParser.EQ - 189)) | (1 << (vbaParser.GEQ - 189)) | (1 << (vbaParser.GT - 189)) | (1 << (vbaParser.LEQ - 189)) | (1 << (vbaParser.LT - 189)) | (1 << (vbaParser.NEQ - 189)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComplexTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.AmbiguousIdentifierContext)
            else:
                return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,i)


        def getRuleIndex(self):
            return vbaParser.RULE_complexType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexType" ):
                listener.enterComplexType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexType" ):
                listener.exitComplexType(self)




    def complexType(self):

        localctx = vbaParser.ComplexTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_complexType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2538
            self.ambiguousIdentifier()
            self.state = 2543
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,428,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2539
                    _la = self._input.LA(1)
                    if not(_la==vbaParser.T__3 or _la==vbaParser.T__4):
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()
                    self.state = 2540
                    self.ambiguousIdentifier() 
                self.state = 2545
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,428,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FieldLengthContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MULT(self):
            return self.getToken(vbaParser.MULT, 0)

        def INTEGERLITERAL(self):
            return self.getToken(vbaParser.INTEGERLITERAL, 0)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def WS(self):
            return self.getToken(vbaParser.WS, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_fieldLength

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldLength" ):
                listener.enterFieldLength(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldLength" ):
                listener.exitFieldLength(self)




    def fieldLength(self):

        localctx = vbaParser.FieldLengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_fieldLength)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2546
            self.match(vbaParser.MULT)
            self.state = 2548
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 2547
                self.match(vbaParser.WS)


            self.state = 2552
            token = self._input.LA(1)
            if token in [vbaParser.INTEGERLITERAL]:
                self.state = 2550
                self.match(vbaParser.INTEGERLITERAL)

            elif token in [vbaParser.ACCESS, vbaParser.ADDRESSOF, vbaParser.ALIAS, vbaParser.AND, vbaParser.ATTRIBUTE, vbaParser.APPACTIVATE, vbaParser.APPEND, vbaParser.AS, vbaParser.BEGIN, vbaParser.BEEP, vbaParser.BINARY, vbaParser.BOOLEAN, vbaParser.BYVAL, vbaParser.BYREF, vbaParser.BYTE, vbaParser.CALL, vbaParser.CASE, vbaParser.CHDIR, vbaParser.CHDRIVE, vbaParser.CLASS, vbaParser.CLOSE, vbaParser.COLLECTION, vbaParser.CONST, vbaParser.DATABASE, vbaParser.DATE, vbaParser.DECLARE, vbaParser.DEFBOOL, vbaParser.DEFBYTE, vbaParser.DEFDATE, vbaParser.DEFDBL, vbaParser.DEFDEC, vbaParser.DEFCUR, vbaParser.DEFINT, vbaParser.DEFLNG, vbaParser.DEFOBJ, vbaParser.DEFSNG, vbaParser.DEFSTR, vbaParser.DEFVAR, vbaParser.DELETESETTING, vbaParser.DIM, vbaParser.DO, vbaParser.DOUBLE, vbaParser.EACH, vbaParser.ELSE, vbaParser.ELSEIF, vbaParser.END, vbaParser.ENUM, vbaParser.EQV, vbaParser.ERASE, vbaParser.ERROR, vbaParser.EVENT, vbaParser.FALSE, vbaParser.FILECOPY, vbaParser.FRIEND, vbaParser.FOR, vbaParser.FUNCTION, vbaParser.GET, vbaParser.GLOBAL, vbaParser.GOSUB, vbaParser.GOTO, vbaParser.IF, vbaParser.IMP, vbaParser.IMPLEMENTS, vbaParser.IN, vbaParser.INPUT, vbaParser.IS, vbaParser.INTEGER, vbaParser.KILL, vbaParser.LOAD, vbaParser.LOCK, vbaParser.LONG, vbaParser.LOOP, vbaParser.LEN, vbaParser.LET, vbaParser.LIB, vbaParser.LIKE, vbaParser.LSET, vbaParser.ME, vbaParser.MID, vbaParser.MKDIR, vbaParser.MOD, vbaParser.NAME, vbaParser.NEXT, vbaParser.NEW, vbaParser.NOT, vbaParser.NOTHING, vbaParser.NULL, vbaParser.ON, vbaParser.OPEN, vbaParser.OPTIONAL, vbaParser.OR, vbaParser.OUTPUT, vbaParser.PARAMARRAY, vbaParser.PRESERVE, vbaParser.PRINT, vbaParser.PRIVATE, vbaParser.PUBLIC, vbaParser.PUT, vbaParser.RANDOM, vbaParser.RANDOMIZE, vbaParser.RAISEEVENT, vbaParser.READ, vbaParser.REDIM, vbaParser.REM, vbaParser.RESET, vbaParser.RESUME, vbaParser.RETURN, vbaParser.RMDIR, vbaParser.RSET, vbaParser.SAVEPICTURE, vbaParser.SAVESETTING, vbaParser.SEEK, vbaParser.SELECT, vbaParser.SENDKEYS, vbaParser.SET, vbaParser.SETATTR, vbaParser.SHARED, vbaParser.SINGLE, vbaParser.SPC, vbaParser.STATIC, vbaParser.STEP, vbaParser.STOP, vbaParser.STRING, vbaParser.SUB, vbaParser.TAB, vbaParser.TEXT, vbaParser.THEN, vbaParser.TIME, vbaParser.TO, vbaParser.TRUE, vbaParser.TYPE, vbaParser.TYPEOF, vbaParser.UNLOAD, vbaParser.UNLOCK, vbaParser.UNTIL, vbaParser.VARIANT, vbaParser.VERSION, vbaParser.WEND, vbaParser.WHILE, vbaParser.WIDTH, vbaParser.WITH, vbaParser.WITHEVENTS, vbaParser.WRITE, vbaParser.XOR, vbaParser.IDENTIFIER]:
                self.state = 2551
                self.ambiguousIdentifier()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LetterrangeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def certainIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.CertainIdentifierContext)
            else:
                return self.getTypedRuleContext(vbaParser.CertainIdentifierContext,i)


        def MINUS(self):
            return self.getToken(vbaParser.MINUS, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_letterrange

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetterrange" ):
                listener.enterLetterrange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetterrange" ):
                listener.exitLetterrange(self)




    def letterrange(self):

        localctx = vbaParser.LetterrangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_letterrange)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2554
            self.certainIdentifier()
            self.state = 2563
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,433,self._ctx)
            if la_ == 1:
                self.state = 2556
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 2555
                    self.match(vbaParser.WS)


                self.state = 2558
                self.match(vbaParser.MINUS)
                self.state = 2560
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 2559
                    self.match(vbaParser.WS)


                self.state = 2562
                self.certainIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LineLabelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(vbaParser.AmbiguousIdentifierContext,0)


        def getRuleIndex(self):
            return vbaParser.RULE_lineLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineLabel" ):
                listener.enterLineLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineLabel" ):
                listener.exitLineLabel(self)




    def lineLabel(self):

        localctx = vbaParser.LineLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_lineLabel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2565
            self.ambiguousIdentifier()
            self.state = 2566
            self.match(vbaParser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEXLITERAL(self):
            return self.getToken(vbaParser.HEXLITERAL, 0)

        def OCTLITERAL(self):
            return self.getToken(vbaParser.OCTLITERAL, 0)

        def DATELITERAL(self):
            return self.getToken(vbaParser.DATELITERAL, 0)

        def DOUBLELITERAL(self):
            return self.getToken(vbaParser.DOUBLELITERAL, 0)

        def INTEGERLITERAL(self):
            return self.getToken(vbaParser.INTEGERLITERAL, 0)

        def SHORTLITERAL(self):
            return self.getToken(vbaParser.SHORTLITERAL, 0)

        def STRINGLITERAL(self):
            return self.getToken(vbaParser.STRINGLITERAL, 0)

        def TRUE(self):
            return self.getToken(vbaParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(vbaParser.FALSE, 0)

        def NOTHING(self):
            return self.getToken(vbaParser.NOTHING, 0)

        def NULL(self):
            return self.getToken(vbaParser.NULL, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = vbaParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2568
            _la = self._input.LA(1)
            if not(((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (vbaParser.FALSE - 73)) | (1 << (vbaParser.NOTHING - 73)) | (1 << (vbaParser.NULL - 73)))) != 0) or ((((_la - 171)) & ~0x3f) == 0 and ((1 << (_la - 171)) & ((1 << (vbaParser.TRUE - 171)) | (1 << (vbaParser.STRINGLITERAL - 171)) | (1 << (vbaParser.OCTLITERAL - 171)) | (1 << (vbaParser.HEXLITERAL - 171)) | (1 << (vbaParser.SHORTLITERAL - 171)) | (1 << (vbaParser.INTEGERLITERAL - 171)) | (1 << (vbaParser.DOUBLELITERAL - 171)) | (1 << (vbaParser.DATELITERAL - 171)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def baseType(self):
            return self.getTypedRuleContext(vbaParser.BaseTypeContext,0)


        def complexType(self):
            return self.getTypedRuleContext(vbaParser.ComplexTypeContext,0)


        def LPAREN(self):
            return self.getToken(vbaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(vbaParser.RPAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType" ):
                listener.enterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType" ):
                listener.exitType(self)




    def type(self):

        localctx = vbaParser.TypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2572
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,434,self._ctx)
            if la_ == 1:
                self.state = 2570
                self.baseType()
                pass

            elif la_ == 2:
                self.state = 2571
                self.complexType()
                pass


            self.state = 2582
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,437,self._ctx)
            if la_ == 1:
                self.state = 2575
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 2574
                    self.match(vbaParser.WS)


                self.state = 2577
                self.match(vbaParser.LPAREN)
                self.state = 2579
                _la = self._input.LA(1)
                if _la==vbaParser.WS:
                    self.state = 2578
                    self.match(vbaParser.WS)


                self.state = 2581
                self.match(vbaParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeHintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return vbaParser.RULE_typeHint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeHint" ):
                listener.enterTypeHint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeHint" ):
                listener.exitTypeHint(self)




    def typeHint(self):

        localctx = vbaParser.TypeHintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_typeHint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2584
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.T__2) | (1 << vbaParser.T__4) | (1 << vbaParser.T__5) | (1 << vbaParser.T__6) | (1 << vbaParser.T__7))) != 0) or _la==vbaParser.AMPERSAND):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VisibilityContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIVATE(self):
            return self.getToken(vbaParser.PRIVATE, 0)

        def PUBLIC(self):
            return self.getToken(vbaParser.PUBLIC, 0)

        def FRIEND(self):
            return self.getToken(vbaParser.FRIEND, 0)

        def GLOBAL(self):
            return self.getToken(vbaParser.GLOBAL, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_visibility

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibility" ):
                listener.enterVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibility" ):
                listener.exitVisibility(self)




    def visibility(self):

        localctx = vbaParser.VisibilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_visibility)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2586
            _la = self._input.LA(1)
            if not(((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (vbaParser.FRIEND - 75)) | (1 << (vbaParser.GLOBAL - 75)) | (1 << (vbaParser.PRIVATE - 75)) | (1 << (vbaParser.PUBLIC - 75)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AmbiguousKeywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCESS(self):
            return self.getToken(vbaParser.ACCESS, 0)

        def ADDRESSOF(self):
            return self.getToken(vbaParser.ADDRESSOF, 0)

        def ALIAS(self):
            return self.getToken(vbaParser.ALIAS, 0)

        def AND(self):
            return self.getToken(vbaParser.AND, 0)

        def ATTRIBUTE(self):
            return self.getToken(vbaParser.ATTRIBUTE, 0)

        def APPACTIVATE(self):
            return self.getToken(vbaParser.APPACTIVATE, 0)

        def APPEND(self):
            return self.getToken(vbaParser.APPEND, 0)

        def AS(self):
            return self.getToken(vbaParser.AS, 0)

        def BEEP(self):
            return self.getToken(vbaParser.BEEP, 0)

        def BEGIN(self):
            return self.getToken(vbaParser.BEGIN, 0)

        def BINARY(self):
            return self.getToken(vbaParser.BINARY, 0)

        def BOOLEAN(self):
            return self.getToken(vbaParser.BOOLEAN, 0)

        def BYVAL(self):
            return self.getToken(vbaParser.BYVAL, 0)

        def BYREF(self):
            return self.getToken(vbaParser.BYREF, 0)

        def BYTE(self):
            return self.getToken(vbaParser.BYTE, 0)

        def CALL(self):
            return self.getToken(vbaParser.CALL, 0)

        def CASE(self):
            return self.getToken(vbaParser.CASE, 0)

        def CLASS(self):
            return self.getToken(vbaParser.CLASS, 0)

        def CLOSE(self):
            return self.getToken(vbaParser.CLOSE, 0)

        def CHDIR(self):
            return self.getToken(vbaParser.CHDIR, 0)

        def CHDRIVE(self):
            return self.getToken(vbaParser.CHDRIVE, 0)

        def COLLECTION(self):
            return self.getToken(vbaParser.COLLECTION, 0)

        def CONST(self):
            return self.getToken(vbaParser.CONST, 0)

        def DATABASE(self):
            return self.getToken(vbaParser.DATABASE, 0)

        def DATE(self):
            return self.getToken(vbaParser.DATE, 0)

        def DECLARE(self):
            return self.getToken(vbaParser.DECLARE, 0)

        def DEFBOOL(self):
            return self.getToken(vbaParser.DEFBOOL, 0)

        def DEFBYTE(self):
            return self.getToken(vbaParser.DEFBYTE, 0)

        def DEFCUR(self):
            return self.getToken(vbaParser.DEFCUR, 0)

        def DEFDBL(self):
            return self.getToken(vbaParser.DEFDBL, 0)

        def DEFDATE(self):
            return self.getToken(vbaParser.DEFDATE, 0)

        def DEFDEC(self):
            return self.getToken(vbaParser.DEFDEC, 0)

        def DEFINT(self):
            return self.getToken(vbaParser.DEFINT, 0)

        def DEFLNG(self):
            return self.getToken(vbaParser.DEFLNG, 0)

        def DEFOBJ(self):
            return self.getToken(vbaParser.DEFOBJ, 0)

        def DEFSNG(self):
            return self.getToken(vbaParser.DEFSNG, 0)

        def DEFSTR(self):
            return self.getToken(vbaParser.DEFSTR, 0)

        def DEFVAR(self):
            return self.getToken(vbaParser.DEFVAR, 0)

        def DELETESETTING(self):
            return self.getToken(vbaParser.DELETESETTING, 0)

        def DIM(self):
            return self.getToken(vbaParser.DIM, 0)

        def DO(self):
            return self.getToken(vbaParser.DO, 0)

        def DOUBLE(self):
            return self.getToken(vbaParser.DOUBLE, 0)

        def EACH(self):
            return self.getToken(vbaParser.EACH, 0)

        def ELSE(self):
            return self.getToken(vbaParser.ELSE, 0)

        def ELSEIF(self):
            return self.getToken(vbaParser.ELSEIF, 0)

        def END(self):
            return self.getToken(vbaParser.END, 0)

        def ENUM(self):
            return self.getToken(vbaParser.ENUM, 0)

        def EQV(self):
            return self.getToken(vbaParser.EQV, 0)

        def ERASE(self):
            return self.getToken(vbaParser.ERASE, 0)

        def ERROR(self):
            return self.getToken(vbaParser.ERROR, 0)

        def EVENT(self):
            return self.getToken(vbaParser.EVENT, 0)

        def FALSE(self):
            return self.getToken(vbaParser.FALSE, 0)

        def FILECOPY(self):
            return self.getToken(vbaParser.FILECOPY, 0)

        def FRIEND(self):
            return self.getToken(vbaParser.FRIEND, 0)

        def FOR(self):
            return self.getToken(vbaParser.FOR, 0)

        def FUNCTION(self):
            return self.getToken(vbaParser.FUNCTION, 0)

        def GET(self):
            return self.getToken(vbaParser.GET, 0)

        def GLOBAL(self):
            return self.getToken(vbaParser.GLOBAL, 0)

        def GOSUB(self):
            return self.getToken(vbaParser.GOSUB, 0)

        def GOTO(self):
            return self.getToken(vbaParser.GOTO, 0)

        def IF(self):
            return self.getToken(vbaParser.IF, 0)

        def IMP(self):
            return self.getToken(vbaParser.IMP, 0)

        def IMPLEMENTS(self):
            return self.getToken(vbaParser.IMPLEMENTS, 0)

        def IN(self):
            return self.getToken(vbaParser.IN, 0)

        def INPUT(self):
            return self.getToken(vbaParser.INPUT, 0)

        def IS(self):
            return self.getToken(vbaParser.IS, 0)

        def INTEGER(self):
            return self.getToken(vbaParser.INTEGER, 0)

        def KILL(self):
            return self.getToken(vbaParser.KILL, 0)

        def LOAD(self):
            return self.getToken(vbaParser.LOAD, 0)

        def LOCK(self):
            return self.getToken(vbaParser.LOCK, 0)

        def LONG(self):
            return self.getToken(vbaParser.LONG, 0)

        def LOOP(self):
            return self.getToken(vbaParser.LOOP, 0)

        def LEN(self):
            return self.getToken(vbaParser.LEN, 0)

        def LET(self):
            return self.getToken(vbaParser.LET, 0)

        def LIB(self):
            return self.getToken(vbaParser.LIB, 0)

        def LIKE(self):
            return self.getToken(vbaParser.LIKE, 0)

        def LSET(self):
            return self.getToken(vbaParser.LSET, 0)

        def ME(self):
            return self.getToken(vbaParser.ME, 0)

        def MID(self):
            return self.getToken(vbaParser.MID, 0)

        def MKDIR(self):
            return self.getToken(vbaParser.MKDIR, 0)

        def MOD(self):
            return self.getToken(vbaParser.MOD, 0)

        def NAME(self):
            return self.getToken(vbaParser.NAME, 0)

        def NEXT(self):
            return self.getToken(vbaParser.NEXT, 0)

        def NEW(self):
            return self.getToken(vbaParser.NEW, 0)

        def NOT(self):
            return self.getToken(vbaParser.NOT, 0)

        def NOTHING(self):
            return self.getToken(vbaParser.NOTHING, 0)

        def NULL(self):
            return self.getToken(vbaParser.NULL, 0)

        def ON(self):
            return self.getToken(vbaParser.ON, 0)

        def OPEN(self):
            return self.getToken(vbaParser.OPEN, 0)

        def OPTIONAL(self):
            return self.getToken(vbaParser.OPTIONAL, 0)

        def OR(self):
            return self.getToken(vbaParser.OR, 0)

        def OUTPUT(self):
            return self.getToken(vbaParser.OUTPUT, 0)

        def PARAMARRAY(self):
            return self.getToken(vbaParser.PARAMARRAY, 0)

        def PRESERVE(self):
            return self.getToken(vbaParser.PRESERVE, 0)

        def PRINT(self):
            return self.getToken(vbaParser.PRINT, 0)

        def PRIVATE(self):
            return self.getToken(vbaParser.PRIVATE, 0)

        def PUBLIC(self):
            return self.getToken(vbaParser.PUBLIC, 0)

        def PUT(self):
            return self.getToken(vbaParser.PUT, 0)

        def RANDOM(self):
            return self.getToken(vbaParser.RANDOM, 0)

        def RANDOMIZE(self):
            return self.getToken(vbaParser.RANDOMIZE, 0)

        def RAISEEVENT(self):
            return self.getToken(vbaParser.RAISEEVENT, 0)

        def READ(self):
            return self.getToken(vbaParser.READ, 0)

        def REDIM(self):
            return self.getToken(vbaParser.REDIM, 0)

        def REM(self):
            return self.getToken(vbaParser.REM, 0)

        def RESET(self):
            return self.getToken(vbaParser.RESET, 0)

        def RESUME(self):
            return self.getToken(vbaParser.RESUME, 0)

        def RETURN(self):
            return self.getToken(vbaParser.RETURN, 0)

        def RMDIR(self):
            return self.getToken(vbaParser.RMDIR, 0)

        def RSET(self):
            return self.getToken(vbaParser.RSET, 0)

        def SAVEPICTURE(self):
            return self.getToken(vbaParser.SAVEPICTURE, 0)

        def SAVESETTING(self):
            return self.getToken(vbaParser.SAVESETTING, 0)

        def SEEK(self):
            return self.getToken(vbaParser.SEEK, 0)

        def SELECT(self):
            return self.getToken(vbaParser.SELECT, 0)

        def SENDKEYS(self):
            return self.getToken(vbaParser.SENDKEYS, 0)

        def SET(self):
            return self.getToken(vbaParser.SET, 0)

        def SETATTR(self):
            return self.getToken(vbaParser.SETATTR, 0)

        def SHARED(self):
            return self.getToken(vbaParser.SHARED, 0)

        def SINGLE(self):
            return self.getToken(vbaParser.SINGLE, 0)

        def SPC(self):
            return self.getToken(vbaParser.SPC, 0)

        def STATIC(self):
            return self.getToken(vbaParser.STATIC, 0)

        def STEP(self):
            return self.getToken(vbaParser.STEP, 0)

        def STOP(self):
            return self.getToken(vbaParser.STOP, 0)

        def STRING(self):
            return self.getToken(vbaParser.STRING, 0)

        def SUB(self):
            return self.getToken(vbaParser.SUB, 0)

        def TAB(self):
            return self.getToken(vbaParser.TAB, 0)

        def TEXT(self):
            return self.getToken(vbaParser.TEXT, 0)

        def THEN(self):
            return self.getToken(vbaParser.THEN, 0)

        def TIME(self):
            return self.getToken(vbaParser.TIME, 0)

        def TO(self):
            return self.getToken(vbaParser.TO, 0)

        def TRUE(self):
            return self.getToken(vbaParser.TRUE, 0)

        def TYPE(self):
            return self.getToken(vbaParser.TYPE, 0)

        def TYPEOF(self):
            return self.getToken(vbaParser.TYPEOF, 0)

        def UNLOAD(self):
            return self.getToken(vbaParser.UNLOAD, 0)

        def UNLOCK(self):
            return self.getToken(vbaParser.UNLOCK, 0)

        def UNTIL(self):
            return self.getToken(vbaParser.UNTIL, 0)

        def VARIANT(self):
            return self.getToken(vbaParser.VARIANT, 0)

        def VERSION(self):
            return self.getToken(vbaParser.VERSION, 0)

        def WEND(self):
            return self.getToken(vbaParser.WEND, 0)

        def WHILE(self):
            return self.getToken(vbaParser.WHILE, 0)

        def WIDTH(self):
            return self.getToken(vbaParser.WIDTH, 0)

        def WITH(self):
            return self.getToken(vbaParser.WITH, 0)

        def WITHEVENTS(self):
            return self.getToken(vbaParser.WITHEVENTS, 0)

        def WRITE(self):
            return self.getToken(vbaParser.WRITE, 0)

        def XOR(self):
            return self.getToken(vbaParser.XOR, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_ambiguousKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAmbiguousKeyword" ):
                listener.enterAmbiguousKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAmbiguousKeyword" ):
                listener.exitAmbiguousKeyword(self)




    def ambiguousKeyword(self):

        localctx = vbaParser.AmbiguousKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_ambiguousKeyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2588
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << vbaParser.ACCESS) | (1 << vbaParser.ADDRESSOF) | (1 << vbaParser.ALIAS) | (1 << vbaParser.AND) | (1 << vbaParser.ATTRIBUTE) | (1 << vbaParser.APPACTIVATE) | (1 << vbaParser.APPEND) | (1 << vbaParser.AS) | (1 << vbaParser.BEGIN) | (1 << vbaParser.BEEP) | (1 << vbaParser.BINARY) | (1 << vbaParser.BOOLEAN) | (1 << vbaParser.BYVAL) | (1 << vbaParser.BYREF) | (1 << vbaParser.BYTE) | (1 << vbaParser.CALL) | (1 << vbaParser.CASE) | (1 << vbaParser.CHDIR) | (1 << vbaParser.CHDRIVE) | (1 << vbaParser.CLASS) | (1 << vbaParser.CLOSE) | (1 << vbaParser.COLLECTION) | (1 << vbaParser.CONST) | (1 << vbaParser.DATABASE) | (1 << vbaParser.DATE) | (1 << vbaParser.DECLARE) | (1 << vbaParser.DEFBOOL) | (1 << vbaParser.DEFBYTE) | (1 << vbaParser.DEFDATE) | (1 << vbaParser.DEFDBL) | (1 << vbaParser.DEFDEC) | (1 << vbaParser.DEFCUR) | (1 << vbaParser.DEFINT) | (1 << vbaParser.DEFLNG) | (1 << vbaParser.DEFOBJ) | (1 << vbaParser.DEFSNG) | (1 << vbaParser.DEFSTR) | (1 << vbaParser.DEFVAR) | (1 << vbaParser.DELETESETTING) | (1 << vbaParser.DIM) | (1 << vbaParser.DO) | (1 << vbaParser.DOUBLE) | (1 << vbaParser.EACH) | (1 << vbaParser.ELSE) | (1 << vbaParser.ELSEIF) | (1 << vbaParser.END) | (1 << vbaParser.ENUM))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (vbaParser.EQV - 64)) | (1 << (vbaParser.ERASE - 64)) | (1 << (vbaParser.ERROR - 64)) | (1 << (vbaParser.EVENT - 64)) | (1 << (vbaParser.FALSE - 64)) | (1 << (vbaParser.FILECOPY - 64)) | (1 << (vbaParser.FRIEND - 64)) | (1 << (vbaParser.FOR - 64)) | (1 << (vbaParser.FUNCTION - 64)) | (1 << (vbaParser.GET - 64)) | (1 << (vbaParser.GLOBAL - 64)) | (1 << (vbaParser.GOSUB - 64)) | (1 << (vbaParser.GOTO - 64)) | (1 << (vbaParser.IF - 64)) | (1 << (vbaParser.IMP - 64)) | (1 << (vbaParser.IMPLEMENTS - 64)) | (1 << (vbaParser.IN - 64)) | (1 << (vbaParser.INPUT - 64)) | (1 << (vbaParser.IS - 64)) | (1 << (vbaParser.INTEGER - 64)) | (1 << (vbaParser.KILL - 64)) | (1 << (vbaParser.LOAD - 64)) | (1 << (vbaParser.LOCK - 64)) | (1 << (vbaParser.LONG - 64)) | (1 << (vbaParser.LOOP - 64)) | (1 << (vbaParser.LEN - 64)) | (1 << (vbaParser.LET - 64)) | (1 << (vbaParser.LIB - 64)) | (1 << (vbaParser.LIKE - 64)) | (1 << (vbaParser.LSET - 64)) | (1 << (vbaParser.ME - 64)) | (1 << (vbaParser.MID - 64)) | (1 << (vbaParser.MKDIR - 64)) | (1 << (vbaParser.MOD - 64)) | (1 << (vbaParser.NAME - 64)) | (1 << (vbaParser.NEXT - 64)) | (1 << (vbaParser.NEW - 64)) | (1 << (vbaParser.NOT - 64)) | (1 << (vbaParser.NOTHING - 64)) | (1 << (vbaParser.NULL - 64)) | (1 << (vbaParser.ON - 64)) | (1 << (vbaParser.OPEN - 64)) | (1 << (vbaParser.OPTIONAL - 64)) | (1 << (vbaParser.OR - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (vbaParser.OUTPUT - 128)) | (1 << (vbaParser.PARAMARRAY - 128)) | (1 << (vbaParser.PRESERVE - 128)) | (1 << (vbaParser.PRINT - 128)) | (1 << (vbaParser.PRIVATE - 128)) | (1 << (vbaParser.PUBLIC - 128)) | (1 << (vbaParser.PUT - 128)) | (1 << (vbaParser.RANDOM - 128)) | (1 << (vbaParser.RANDOMIZE - 128)) | (1 << (vbaParser.RAISEEVENT - 128)) | (1 << (vbaParser.READ - 128)) | (1 << (vbaParser.REDIM - 128)) | (1 << (vbaParser.REM - 128)) | (1 << (vbaParser.RESET - 128)) | (1 << (vbaParser.RESUME - 128)) | (1 << (vbaParser.RETURN - 128)) | (1 << (vbaParser.RMDIR - 128)) | (1 << (vbaParser.RSET - 128)) | (1 << (vbaParser.SAVEPICTURE - 128)) | (1 << (vbaParser.SAVESETTING - 128)) | (1 << (vbaParser.SEEK - 128)) | (1 << (vbaParser.SELECT - 128)) | (1 << (vbaParser.SENDKEYS - 128)) | (1 << (vbaParser.SET - 128)) | (1 << (vbaParser.SETATTR - 128)) | (1 << (vbaParser.SHARED - 128)) | (1 << (vbaParser.SINGLE - 128)) | (1 << (vbaParser.SPC - 128)) | (1 << (vbaParser.STATIC - 128)) | (1 << (vbaParser.STEP - 128)) | (1 << (vbaParser.STOP - 128)) | (1 << (vbaParser.STRING - 128)) | (1 << (vbaParser.SUB - 128)) | (1 << (vbaParser.TAB - 128)) | (1 << (vbaParser.TEXT - 128)) | (1 << (vbaParser.THEN - 128)) | (1 << (vbaParser.TIME - 128)) | (1 << (vbaParser.TO - 128)) | (1 << (vbaParser.TRUE - 128)) | (1 << (vbaParser.TYPE - 128)) | (1 << (vbaParser.TYPEOF - 128)) | (1 << (vbaParser.UNLOAD - 128)) | (1 << (vbaParser.UNLOCK - 128)) | (1 << (vbaParser.UNTIL - 128)) | (1 << (vbaParser.VARIANT - 128)) | (1 << (vbaParser.VERSION - 128)) | (1 << (vbaParser.WEND - 128)) | (1 << (vbaParser.WHILE - 128)) | (1 << (vbaParser.WIDTH - 128)) | (1 << (vbaParser.WITH - 128)) | (1 << (vbaParser.WITHEVENTS - 128)) | (1 << (vbaParser.WRITE - 128)) | (1 << (vbaParser.XOR - 128)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RemCommentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMCOMMENT(self):
            return self.getToken(vbaParser.REMCOMMENT, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_remComment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemComment" ):
                listener.enterRemComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemComment" ):
                listener.exitRemComment(self)




    def remComment(self):

        localctx = vbaParser.RemCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_remComment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2590
            self.match(vbaParser.REMCOMMENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CommentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(vbaParser.COMMENT, 0)

        def getRuleIndex(self):
            return vbaParser.RULE_comment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComment" ):
                listener.enterComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComment" ):
                listener.exitComment(self)




    def comment(self):

        localctx = vbaParser.CommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_comment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2592
            self.match(vbaParser.COMMENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EndOfLineContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(vbaParser.NEWLINE, 0)

        def comment(self):
            return self.getTypedRuleContext(vbaParser.CommentContext,0)


        def remComment(self):
            return self.getTypedRuleContext(vbaParser.RemCommentContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_endOfLine

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndOfLine" ):
                listener.enterEndOfLine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndOfLine" ):
                listener.exitEndOfLine(self)




    def endOfLine(self):

        localctx = vbaParser.EndOfLineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_endOfLine)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2595
            _la = self._input.LA(1)
            if _la==vbaParser.WS:
                self.state = 2594
                self.match(vbaParser.WS)


            self.state = 2600
            token = self._input.LA(1)
            if token in [vbaParser.NEWLINE]:
                self.state = 2597
                self.match(vbaParser.NEWLINE)

            elif token in [vbaParser.COMMENT]:
                self.state = 2598
                self.comment()

            elif token in [vbaParser.REMCOMMENT]:
                self.state = 2599
                self.remComment()

            else:
                raise NoViableAltException(self)

            self.state = 2603
            self._errHandler.sync(self);
            la_ = self._interp.adaptivePredict(self._input,440,self._ctx)
            if la_ == 1:
                self.state = 2602
                self.match(vbaParser.WS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EndOfStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def endOfLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(vbaParser.EndOfLineContext)
            else:
                return self.getTypedRuleContext(vbaParser.EndOfLineContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.COLON)
            else:
                return self.getToken(vbaParser.COLON, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(vbaParser.WS)
            else:
                return self.getToken(vbaParser.WS, i)

        def getRuleIndex(self):
            return vbaParser.RULE_endOfStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndOfStatement" ):
                listener.enterEndOfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndOfStatement" ):
                listener.exitEndOfStatement(self)




    def endOfStatement(self):

        localctx = vbaParser.EndOfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_endOfStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2615
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,444,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2613
                    self._errHandler.sync(self);
                    la_ = self._interp.adaptivePredict(self._input,443,self._ctx)
                    if la_ == 1:
                        self.state = 2605
                        self.endOfLine()
                        pass

                    elif la_ == 2:
                        self.state = 2607
                        _la = self._input.LA(1)
                        if _la==vbaParser.WS:
                            self.state = 2606
                            self.match(vbaParser.WS)


                        self.state = 2609
                        self.match(vbaParser.COLON)
                        self.state = 2611
                        self._errHandler.sync(self);
                        la_ = self._interp.adaptivePredict(self._input,442,self._ctx)
                        if la_ == 1:
                            self.state = 2610
                            self.match(vbaParser.WS)


                        pass

             
                self.state = 2617
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,444,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[100] = self.valueStmt_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def valueStmt_sempred(self, localctx:ValueStmtContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 23)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 2)
         




