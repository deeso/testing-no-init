# Generated from VisualBasic6.g4 by ANTLR 4.7.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00df")
        buf.write("\u0b4a\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\3\2\3\2\3\2\3\3\5\3\u013d\n\3\3\3\7\3\u0140\n\3\f\3\16")
        buf.write("\3\u0143\13\3\3\3\3\3\6\3\u0147\n\3\r\3\16\3\u0148\5\3")
        buf.write("\u014b\n\3\3\3\5\3\u014e\n\3\3\3\7\3\u0151\n\3\f\3\16")
        buf.write("\3\u0154\13\3\3\3\5\3\u0157\n\3\3\3\7\3\u015a\n\3\f\3")
        buf.write("\16\3\u015d\13\3\3\3\5\3\u0160\n\3\3\3\7\3\u0163\n\3\f")
        buf.write("\3\16\3\u0166\13\3\3\3\5\3\u0169\n\3\3\3\7\3\u016c\n\3")
        buf.write("\f\3\16\3\u016f\13\3\3\3\5\3\u0172\n\3\3\3\7\3\u0175\n")
        buf.write("\3\f\3\16\3\u0178\13\3\3\3\5\3\u017b\n\3\3\3\7\3\u017e")
        buf.write("\n\3\f\3\16\3\u0181\13\3\3\3\5\3\u0184\n\3\3\4\6\4\u0187")
        buf.write("\n\4\r\4\16\4\u0188\3\5\3\5\5\5\u018d\n\5\3\5\3\5\5\5")
        buf.write("\u0191\n\5\3\5\3\5\3\5\5\5\u0196\n\5\3\5\5\5\u0199\n\5")
        buf.write("\3\5\7\5\u019c\n\5\f\5\16\5\u019f\13\5\3\6\3\6\3\7\3\7")
        buf.write("\3\b\3\b\3\b\3\b\3\b\5\b\u01aa\n\b\3\t\3\t\6\t\u01ae\n")
        buf.write("\t\r\t\16\t\u01af\3\t\6\t\u01b3\n\t\r\t\16\t\u01b4\3\t")
        buf.write("\3\t\6\t\u01b9\n\t\r\t\16\t\u01ba\3\n\3\n\5\n\u01bf\n")
        buf.write("\n\3\n\3\n\5\n\u01c3\n\n\3\n\3\n\3\n\3\13\3\13\6\13\u01ca")
        buf.write("\n\13\r\13\16\13\u01cb\6\13\u01ce\n\13\r\13\16\13\u01cf")
        buf.write("\3\f\3\f\6\f\u01d4\n\f\r\f\16\f\u01d5\6\f\u01d8\n\f\r")
        buf.write("\f\16\f\u01d9\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u01e4")
        buf.write("\n\r\3\16\3\16\6\16\u01e8\n\16\r\16\16\16\u01e9\3\16\7")
        buf.write("\16\u01ed\n\16\f\16\16\16\u01f0\13\16\3\17\3\17\3\17\3")
        buf.write("\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u01fe")
        buf.write("\n\17\3\20\5\20\u0201\n\20\3\20\3\20\3\20\3\20\3\20\3")
        buf.write("\20\5\20\u0209\n\20\3\20\6\20\u020c\n\20\r\20\16\20\u020d")
        buf.write("\3\20\6\20\u0211\n\20\r\20\16\20\u0212\3\20\3\20\7\20")
        buf.write("\u0217\n\20\f\20\16\20\u021a\13\20\3\21\3\21\3\21\5\21")
        buf.write("\u021f\n\21\3\22\5\22\u0222\n\22\3\22\3\22\5\22\u0226")
        buf.write("\n\22\3\22\3\22\5\22\u022a\n\22\3\22\5\22\u022d\n\22\3")
        buf.write("\22\3\22\5\22\u0231\n\22\3\22\6\22\u0234\n\22\r\22\16")
        buf.write("\22\u0235\3\23\3\23\5\23\u023a\n\23\3\23\3\23\3\23\3\23")
        buf.write("\3\23\5\23\u0241\n\23\3\23\3\23\3\23\3\23\3\23\3\23\5")
        buf.write("\23\u0249\n\23\7\23\u024b\n\23\f\23\16\23\u024e\13\23")
        buf.write("\3\24\5\24\u0251\n\24\3\24\3\24\3\24\3\24\3\24\3\24\3")
        buf.write("\24\5\24\u025a\n\24\3\25\5\25\u025d\n\25\3\25\3\25\3\25")
        buf.write("\3\25\3\25\3\25\5\25\u0265\n\25\3\25\3\25\5\25\u0269\n")
        buf.write("\25\3\25\6\25\u026c\n\25\r\25\16\25\u026d\3\25\6\25\u0271")
        buf.write("\n\25\r\25\16\25\u0272\5\25\u0275\n\25\3\25\3\25\6\25")
        buf.write("\u0279\n\25\r\25\16\25\u027a\3\26\3\26\3\27\3\27\3\30")
        buf.write("\3\30\3\31\3\31\3\31\3\31\5\31\u0287\n\31\3\31\3\31\5")
        buf.write("\31\u028b\n\31\3\31\3\31\5\31\u028f\n\31\3\31\3\31\5\31")
        buf.write("\u0293\n\31\3\31\7\31\u0296\n\31\f\31\16\31\u0299\13\31")
        buf.write("\3\32\3\32\6\32\u029d\n\32\r\32\16\32\u029e\3\32\5\32")
        buf.write("\u02a2\n\32\3\32\7\32\u02a5\n\32\f\32\16\32\u02a8\13\32")
        buf.write("\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write("\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write("\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write("\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write("\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write("\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write("\3\33\5\33\u02ed\n\33\3\34\3\34\3\34\3\34\5\34\u02f3\n")
        buf.write("\34\3\34\3\34\5\34\u02f7\n\34\3\34\5\34\u02fa\n\34\3\35")
        buf.write("\3\35\3\36\3\36\3\36\3\36\3\37\3\37\3\37\3\37\3 \3 \3")
        buf.write(" \3 \5 \u030a\n \3 \3 \5 \u030e\n \3 \7 \u0311\n \f \16")
        buf.write(" \u0314\13 \5 \u0316\n \3!\3!\3!\5!\u031b\n!\3!\3!\3!")
        buf.write("\3!\5!\u0321\n!\3!\3!\5!\u0325\n!\3!\7!\u0328\n!\f!\16")
        buf.write("!\u032b\13!\3\"\3\"\5\"\u032f\n\"\3\"\3\"\5\"\u0333\n")
        buf.write("\"\3\"\5\"\u0336\n\"\3\"\3\"\5\"\u033a\n\"\3\"\3\"\3#")
        buf.write("\3#\5#\u0340\n#\3#\3#\5#\u0344\n#\3#\3#\3$\3$\3$\5$\u034b")
        buf.write("\n$\3$\3$\3$\3$\5$\u0351\n$\3$\5$\u0354\n$\3$\3$\3$\5")
        buf.write("$\u0359\n$\3$\3$\3$\3$\3$\3$\3$\3$\5$\u0363\n$\3$\5$\u0366")
        buf.write("\n$\3$\5$\u0369\n$\3$\3$\5$\u036d\n$\3%\3%\3%\3%\5%\u0373")
        buf.write("\n%\3%\3%\5%\u0377\n%\3%\7%\u037a\n%\f%\16%\u037d\13%")
        buf.write("\3&\3&\3&\3&\5&\u0383\n&\3&\3&\5&\u0387\n&\3&\3&\5&\u038b")
        buf.write("\n&\3&\3&\5&\u038f\n&\3&\5&\u0392\n&\3\'\3\'\6\'\u0396")
        buf.write("\n\'\r\'\16\'\u0397\3\'\3\'\6\'\u039c\n\'\r\'\16\'\u039d")
        buf.write("\5\'\u03a0\n\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\6\'\u03a9\n")
        buf.write("\'\r\'\16\'\u03aa\3\'\3\'\6\'\u03af\n\'\r\'\16\'\u03b0")
        buf.write("\5\'\u03b3\n\'\3\'\3\'\3\'\3\'\6\'\u03b9\n\'\r\'\16\'")
        buf.write("\u03ba\3\'\3\'\6\'\u03bf\n\'\r\'\16\'\u03c0\3\'\3\'\3")
        buf.write("\'\3\'\3\'\3\'\5\'\u03c9\n\'\3(\3(\3)\3)\3)\5)\u03d0\n")
        buf.write(")\3)\3)\3)\3)\6)\u03d6\n)\r)\16)\u03d7\3)\7)\u03db\n)")
        buf.write("\f)\16)\u03de\13)\3)\3)\3*\3*\5*\u03e4\n*\3*\3*\5*\u03e8")
        buf.write("\n*\3*\5*\u03eb\n*\3*\6*\u03ee\n*\r*\16*\u03ef\3+\3+\3")
        buf.write("+\3+\5+\u03f6\n+\3+\3+\5+\u03fa\n+\3+\7+\u03fd\n+\f+\16")
        buf.write("+\u0400\13+\3,\3,\3,\3,\3-\3-\3-\5-\u0409\n-\3-\3-\3-")
        buf.write("\3-\5-\u040f\n-\3-\3-\3.\3.\3/\3/\3/\3/\5/\u0419\n/\3")
        buf.write("/\3/\5/\u041d\n/\3/\3/\3\60\3\60\3\60\3\60\3\60\3\60\5")
        buf.write("\60\u0427\n\60\3\60\3\60\3\60\3\60\3\60\6\60\u042e\n\60")
        buf.write("\r\60\16\60\u042f\3\60\3\60\6\60\u0434\n\60\r\60\16\60")
        buf.write("\u0435\5\60\u0438\n\60\3\60\3\60\3\60\5\60\u043d\n\60")
        buf.write("\3\61\3\61\3\61\3\61\5\61\u0443\n\61\3\61\3\61\5\61\u0447")
        buf.write("\n\61\3\61\5\61\u044a\n\61\3\61\3\61\5\61\u044e\n\61\3")
        buf.write("\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\5\61\u0459")
        buf.write("\n\61\3\61\6\61\u045c\n\61\r\61\16\61\u045d\3\61\3\61")
        buf.write("\6\61\u0462\n\61\r\61\16\61\u0463\5\61\u0466\n\61\3\61")
        buf.write("\3\61\3\61\3\61\5\61\u046c\n\61\5\61\u046e\n\61\3\62\3")
        buf.write("\62\3\62\5\62\u0473\n\62\3\62\3\62\5\62\u0477\n\62\3\62")
        buf.write("\3\62\3\62\3\62\5\62\u047d\n\62\3\62\5\62\u0480\n\62\3")
        buf.write("\62\3\62\5\62\u0484\n\62\3\62\6\62\u0487\n\62\r\62\16")
        buf.write("\62\u0488\3\62\3\62\6\62\u048d\n\62\r\62\16\62\u048e\5")
        buf.write("\62\u0491\n\62\3\62\3\62\3\63\3\63\3\63\3\63\5\63\u0499")
        buf.write("\n\63\3\63\3\63\5\63\u049d\n\63\3\63\5\63\u04a0\n\63\3")
        buf.write("\63\5\63\u04a3\n\63\3\63\3\63\5\63\u04a7\n\63\3\63\3\63")
        buf.write("\3\64\3\64\3\64\3\64\3\65\3\65\3\65\3\65\3\66\3\66\3\66")
        buf.write("\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\5\66\u04be\n")
        buf.write("\66\3\66\3\66\7\66\u04c2\n\66\f\66\16\66\u04c5\13\66\3")
        buf.write("\66\5\66\u04c8\n\66\3\66\3\66\5\66\u04cc\n\66\3\67\3\67")
        buf.write("\3\67\3\67\3\67\3\67\6\67\u04d4\n\67\r\67\16\67\u04d5")
        buf.write("\3\67\3\67\6\67\u04da\n\67\r\67\16\67\u04db\5\67\u04de")
        buf.write("\n\67\38\38\39\39\39\39\39\39\69\u04e8\n9\r9\169\u04e9")
        buf.write("\39\39\69\u04ee\n9\r9\169\u04ef\59\u04f2\n9\3:\3:\6:\u04f6")
        buf.write("\n:\r:\16:\u04f7\3:\3:\6:\u04fc\n:\r:\16:\u04fd\5:\u0500")
        buf.write("\n:\3;\3;\3;\3;\3<\3<\3<\3<\5<\u050a\n<\3<\3<\5<\u050e")
        buf.write("\n<\3<\6<\u0511\n<\r<\16<\u0512\3=\3=\3=\3=\3>\3>\5>\u051b")
        buf.write("\n>\3>\3>\5>\u051f\n>\3>\3>\5>\u0523\n>\3>\3>\3?\3?\3")
        buf.write("?\3?\5?\u052b\n?\3?\3?\5?\u052f\n?\3?\3?\3@\3@\3@\3@\3")
        buf.write("A\3A\3A\3A\5A\u053b\nA\3A\3A\5A\u053f\nA\3A\3A\3A\3A\3")
        buf.write("A\5A\u0546\nA\5A\u0548\nA\3B\3B\3B\3B\5B\u054e\nB\3B\3")
        buf.write("B\5B\u0552\nB\3B\3B\3C\3C\7C\u0558\nC\fC\16C\u055b\13")
        buf.write("C\3C\5C\u055e\nC\3C\3C\3D\3D\3D\3D\3D\3D\6D\u0568\nD\r")
        buf.write("D\16D\u0569\3D\3D\6D\u056e\nD\rD\16D\u056f\5D\u0572\n")
        buf.write("D\3E\3E\3E\3E\3E\3E\6E\u057a\nE\rE\16E\u057b\3E\3E\6E")
        buf.write("\u0580\nE\rE\16E\u0581\5E\u0584\nE\3F\3F\6F\u0588\nF\r")
        buf.write("F\16F\u0589\3F\3F\6F\u058e\nF\rF\16F\u058f\5F\u0592\n")
        buf.write("F\3G\3G\5G\u0596\nG\3G\3G\5G\u059a\nG\3G\3G\5G\u059e\n")
        buf.write("G\3G\3G\3H\3H\3H\3H\3I\3I\3I\3I\3I\3I\3I\3I\3J\3J\3J\3")
        buf.write("J\3J\3J\5J\u05b4\nJ\3J\3J\3J\5J\u05b9\nJ\3K\3K\3K\3K\3")
        buf.write("K\3K\3K\3K\5K\u05c3\nK\3K\3K\5K\u05c7\nK\3K\7K\u05ca\n")
        buf.write("K\fK\16K\u05cd\13K\3L\3L\3L\3L\3L\3L\3L\3L\5L\u05d7\n")
        buf.write("L\3L\3L\5L\u05db\nL\3L\7L\u05de\nL\fL\16L\u05e1\13L\3")
        buf.write("M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\5M\u05ee\nM\3M\3M\5M\u05f2")
        buf.write("\nM\3M\3M\3M\3M\3M\3M\3M\5M\u05fb\nM\3M\3M\5M\u05ff\n")
        buf.write("M\3M\5M\u0602\nM\3N\3N\5N\u0606\nN\3N\3N\5N\u060a\nN\3")
        buf.write("N\5N\u060d\nN\7N\u060f\nN\fN\16N\u0612\13N\3N\5N\u0615")
        buf.write("\nN\3N\5N\u0618\nN\3N\3N\5N\u061c\nN\3N\5N\u061f\nN\6")
        buf.write("N\u0621\nN\rN\16N\u0622\5N\u0625\nN\3O\3O\5O\u0629\nO")
        buf.write("\3O\3O\5O\u062d\nO\3O\3O\5O\u0631\nO\3O\3O\5O\u0635\n")
        buf.write("O\3O\5O\u0638\nO\3P\3P\3P\3P\5P\u063e\nP\3P\3P\5P\u0642")
        buf.write("\nP\3P\5P\u0645\nP\3Q\3Q\3Q\5Q\u064a\nQ\3Q\3Q\5Q\u064e")
        buf.write("\nQ\3Q\3Q\3Q\3Q\5Q\u0654\nQ\3Q\5Q\u0657\nQ\3Q\5Q\u065a")
        buf.write("\nQ\3Q\3Q\5Q\u065e\nQ\3Q\6Q\u0661\nQ\rQ\16Q\u0662\3Q\3")
        buf.write("Q\6Q\u0667\nQ\rQ\16Q\u0668\5Q\u066b\nQ\3Q\3Q\3R\3R\3R")
        buf.write("\5R\u0672\nR\3R\3R\5R\u0676\nR\3R\3R\3R\3R\5R\u067c\n")
        buf.write("R\3R\5R\u067f\nR\3R\6R\u0682\nR\rR\16R\u0683\3R\3R\6R")
        buf.write("\u0688\nR\rR\16R\u0689\5R\u068c\nR\3R\3R\3S\3S\3S\5S\u0693")
        buf.write("\nS\3S\3S\5S\u0697\nS\3S\3S\3S\3S\5S\u069d\nS\3S\5S\u06a0")
        buf.write("\nS\3S\6S\u06a3\nS\rS\16S\u06a4\3S\3S\6S\u06a9\nS\rS\16")
        buf.write("S\u06aa\5S\u06ad\nS\3S\3S\3T\3T\3T\3T\5T\u06b5\nT\3T\3")
        buf.write("T\5T\u06b9\nT\3T\5T\u06bc\nT\3T\5T\u06bf\nT\3T\3T\5T\u06c3")
        buf.write("\nT\3T\3T\3U\3U\3U\3U\5U\u06cb\nU\3U\3U\5U\u06cf\nU\3")
        buf.write("U\3U\5U\u06d3\nU\5U\u06d5\nU\3U\5U\u06d8\nU\3V\3V\3V\5")
        buf.write("V\u06dd\nV\3W\3W\3W\3W\5W\u06e3\nW\3W\3W\5W\u06e7\nW\3")
        buf.write("W\3W\5W\u06eb\nW\3W\7W\u06ee\nW\fW\16W\u06f1\13W\3X\3")
        buf.write("X\5X\u06f5\nX\3X\3X\5X\u06f9\nX\3X\3X\5X\u06fd\nX\3X\3")
        buf.write("X\3X\5X\u0702\nX\3Y\3Y\3Z\3Z\3Z\3Z\5Z\u070a\nZ\5Z\u070c")
        buf.write("\nZ\3[\3[\3\\\3\\\3\\\3\\\3]\3]\3]\3]\5]\u0718\n]\3]\3")
        buf.write("]\5]\u071c\n]\3]\3]\3^\3^\3^\3^\5^\u0724\n^\3^\3^\5^\u0728")
        buf.write("\n^\3^\3^\3_\3_\3_\3_\5_\u0730\n_\3_\3_\5_\u0734\n_\3")
        buf.write("_\3_\5_\u0738\n_\3_\3_\5_\u073c\n_\3_\3_\5_\u0740\n_\3")
        buf.write("_\3_\5_\u0744\n_\3_\3_\3`\3`\3`\3`\5`\u074c\n`\3`\3`\5")
        buf.write("`\u0750\n`\3`\3`\3a\3a\3a\3a\3a\3a\6a\u075a\na\ra\16a")
        buf.write("\u075b\3a\7a\u075f\na\fa\16a\u0762\13a\3a\5a\u0765\na")
        buf.write("\3a\3a\3b\3b\3b\3b\5b\u076d\nb\3b\5b\u0770\nb\3b\7b\u0773")
        buf.write("\nb\fb\16b\u0776\13b\3b\6b\u0779\nb\rb\16b\u077a\5b\u077d")
        buf.write("\nb\3b\3b\6b\u0781\nb\rb\16b\u0782\5b\u0785\nb\3c\3c\3")
        buf.write("c\5c\u078a\nc\3c\3c\5c\u078e\nc\3c\7c\u0791\nc\fc\16c")
        buf.write("\u0794\13c\5c\u0796\nc\3d\3d\5d\u079a\nd\3d\3d\5d\u079e")
        buf.write("\nd\3d\3d\3d\3d\3d\3d\3d\3d\3d\5d\u07a9\nd\3e\3e\3e\3")
        buf.write("e\5e\u07af\ne\3e\3e\5e\u07b3\ne\3e\5e\u07b6\ne\3f\3f\3")
        buf.write("f\3f\5f\u07bc\nf\3f\3f\5f\u07c0\nf\3f\3f\3g\3g\3g\3g\5")
        buf.write("g\u07c8\ng\3g\3g\5g\u07cc\ng\3g\3g\3h\3h\3i\3i\3i\5i\u07d5")
        buf.write("\ni\3i\3i\5i\u07d9\ni\3i\3i\3i\3i\5i\u07df\ni\3i\5i\u07e2")
        buf.write("\ni\3i\6i\u07e5\ni\ri\16i\u07e6\3i\3i\6i\u07eb\ni\ri\16")
        buf.write("i\u07ec\5i\u07ef\ni\3i\3i\3j\3j\5j\u07f5\nj\3j\3j\5j\u07f9")
        buf.write("\nj\3j\3j\3k\3k\3k\5k\u0800\nk\3k\3k\3k\3k\6k\u0806\n")
        buf.write("k\rk\16k\u0807\3k\7k\u080b\nk\fk\16k\u080e\13k\3k\3k\3")
        buf.write("l\3l\5l\u0814\nl\3l\3l\5l\u0818\nl\3l\5l\u081b\nl\3l\5")
        buf.write("l\u081e\nl\3l\5l\u0821\nl\3l\3l\5l\u0825\nl\3l\6l\u0828")
        buf.write("\nl\rl\16l\u0829\3m\3m\3m\3m\3m\3m\3m\5m\u0833\nm\3n\3")
        buf.write("n\3n\3n\3o\3o\3o\3o\5o\u083d\no\3o\3o\5o\u0841\no\3o\3")
        buf.write("o\3o\3o\3o\5o\u0848\no\5o\u084a\no\3p\3p\3p\3p\5p\u0850")
        buf.write("\np\3p\3p\5p\u0854\np\3p\3p\5p\u0858\np\3p\7p\u085b\n")
        buf.write("p\fp\16p\u085e\13p\3p\5p\u0861\np\3p\3p\3p\3p\3p\3p\3")
        buf.write("p\3p\3p\3p\3p\5p\u086e\np\3p\3p\5p\u0872\np\3p\3p\3p\3")
        buf.write("p\5p\u0878\np\3p\3p\3p\5p\u087d\np\3p\3p\3p\3p\3p\3p\5")
        buf.write("p\u0885\np\3p\3p\5p\u0889\np\3p\3p\5p\u088d\np\3p\3p\5")
        buf.write("p\u0891\np\3p\3p\5p\u0895\np\3p\3p\5p\u0899\np\3p\3p\3")
        buf.write("p\5p\u089e\np\3p\3p\5p\u08a2\np\3p\3p\3p\5p\u08a7\np\3")
        buf.write("p\3p\5p\u08ab\np\3p\3p\3p\5p\u08b0\np\3p\3p\5p\u08b4\n")
        buf.write("p\3p\3p\3p\5p\u08b9\np\3p\3p\5p\u08bd\np\3p\3p\3p\5p\u08c2")
        buf.write("\np\3p\3p\5p\u08c6\np\3p\3p\3p\5p\u08cb\np\3p\3p\5p\u08cf")
        buf.write("\np\3p\3p\3p\5p\u08d4\np\3p\3p\5p\u08d8\np\3p\3p\3p\5")
        buf.write("p\u08dd\np\3p\3p\5p\u08e1\np\3p\3p\3p\5p\u08e6\np\3p\3")
        buf.write("p\5p\u08ea\np\3p\3p\3p\5p\u08ef\np\3p\3p\5p\u08f3\np\3")
        buf.write("p\3p\3p\5p\u08f8\np\3p\3p\5p\u08fc\np\3p\3p\3p\5p\u0901")
        buf.write("\np\3p\3p\5p\u0905\np\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3")
        buf.write("p\3p\3p\5p\u0914\np\3p\3p\5p\u0918\np\3p\3p\3p\5p\u091d")
        buf.write("\np\3p\3p\5p\u0921\np\3p\3p\3p\5p\u0926\np\3p\3p\5p\u092a")
        buf.write("\np\3p\3p\3p\5p\u092f\np\3p\3p\5p\u0933\np\3p\3p\3p\5")
        buf.write("p\u0938\np\3p\3p\5p\u093c\np\3p\7p\u093f\np\fp\16p\u0942")
        buf.write("\13p\3q\3q\3q\5q\u0947\nq\3q\3q\3q\5q\u094c\nq\3q\3q\3")
        buf.write("r\3r\5r\u0952\nr\3r\3r\5r\u0956\nr\3r\7r\u0959\nr\fr\16")
        buf.write("r\u095c\13r\3s\3s\5s\u0960\ns\3s\5s\u0963\ns\3s\3s\5s")
        buf.write("\u0967\ns\3s\3s\5s\u096b\ns\5s\u096d\ns\3s\3s\5s\u0971")
        buf.write("\ns\5s\u0973\ns\3s\3s\5s\u0977\ns\3t\3t\3t\3t\6t\u097d")
        buf.write("\nt\rt\16t\u097e\3t\7t\u0982\nt\ft\16t\u0985\13t\3t\7")
        buf.write("t\u0988\nt\ft\16t\u098b\13t\3t\3t\3u\3u\3u\3u\5u\u0993")
        buf.write("\nu\3u\3u\5u\u0997\nu\3u\3u\3v\3v\3v\3v\5v\u099f\nv\3")
        buf.write("v\3v\6v\u09a3\nv\rv\16v\u09a4\3v\3v\6v\u09a9\nv\rv\16")
        buf.write("v\u09aa\5v\u09ad\nv\3v\3v\3w\3w\3w\3w\5w\u09b5\nw\3w\3")
        buf.write("w\5w\u09b9\nw\3w\5w\u09bc\nw\3x\3x\5x\u09c0\nx\3y\3y\3")
        buf.write("y\3y\5y\u09c6\ny\3y\5y\u09c9\ny\3y\3y\5y\u09cd\ny\3y\3")
        buf.write("y\5y\u09d1\ny\3y\3y\5y\u09d5\ny\3z\3z\3z\5z\u09da\nz\3")
        buf.write("z\3z\5z\u09de\nz\3z\3z\5z\u09e2\nz\3z\5z\u09e5\nz\3z\3")
        buf.write("z\5z\u09e9\nz\3z\3z\5z\u09ed\nz\3z\3z\5z\u09f1\nz\3{\3")
        buf.write("{\5{\u09f5\n{\3|\3|\3|\5|\u09fa\n|\3}\5}\u09fd\n}\3}\3")
        buf.write("}\3}\5}\u0a02\n}\3}\3}\5}\u0a06\n}\3}\5}\u0a09\n}\3~\3")
        buf.write("~\3~\3~\5~\u0a0f\n~\3\177\3\177\5\177\u0a13\n\177\3\177")
        buf.write("\5\177\u0a16\n\177\3\u0080\3\u0080\3\u0080\5\u0080\u0a1b")
        buf.write("\n\u0080\3\u0080\5\u0080\u0a1e\n\u0080\3\u0080\5\u0080")
        buf.write("\u0a21\n\u0080\3\u0080\3\u0080\5\u0080\u0a25\n\u0080\3")
        buf.write("\u0080\3\u0080\5\u0080\u0a29\n\u0080\5\u0080\u0a2b\n\u0080")
        buf.write("\3\u0080\6\u0080\u0a2e\n\u0080\r\u0080\16\u0080\u0a2f")
        buf.write("\3\u0080\5\u0080\u0a33\n\u0080\3\u0081\3\u0081\5\u0081")
        buf.write("\u0a37\n\u0081\3\u0081\5\u0081\u0a3a\n\u0081\3\u0081\3")
        buf.write("\u0081\5\u0081\u0a3e\n\u0081\3\u0081\3\u0081\5\u0081\u0a42")
        buf.write("\n\u0081\5\u0081\u0a44\n\u0081\3\u0081\3\u0081\3\u0082")
        buf.write("\3\u0082\5\u0082\u0a4a\n\u0082\3\u0082\6\u0082\u0a4d\n")
        buf.write("\u0082\r\u0082\16\u0082\u0a4e\3\u0082\5\u0082\u0a52\n")
        buf.write("\u0082\3\u0083\5\u0083\u0a55\n\u0083\3\u0083\3\u0083\3")
        buf.write("\u0083\5\u0083\u0a5a\n\u0083\3\u0084\3\u0084\3\u0085\5")
        buf.write("\u0085\u0a5f\n\u0085\3\u0085\5\u0085\u0a62\n\u0085\3\u0085")
        buf.write("\3\u0085\5\u0085\u0a66\n\u0085\7\u0085\u0a68\n\u0085\f")
        buf.write("\u0085\16\u0085\u0a6b\13\u0085\3\u0085\3\u0085\5\u0085")
        buf.write("\u0a6f\n\u0085\3\u0085\3\u0085\5\u0085\u0a73\n\u0085\3")
        buf.write("\u0085\5\u0085\u0a76\n\u0085\7\u0085\u0a78\n\u0085\f\u0085")
        buf.write("\16\u0085\u0a7b\13\u0085\3\u0086\3\u0086\5\u0086\u0a7f")
        buf.write("\n\u0086\3\u0086\3\u0086\3\u0087\3\u0087\3\u0087\5\u0087")
        buf.write("\u0a86\n\u0087\3\u0088\3\u0088\5\u0088\u0a8a\n\u0088\3")
        buf.write("\u0088\3\u0088\5\u0088\u0a8e\n\u0088\3\u0088\3\u0088\5")
        buf.write("\u0088\u0a92\n\u0088\3\u0088\7\u0088\u0a95\n\u0088\f\u0088")
        buf.write("\16\u0088\u0a98\13\u0088\5\u0088\u0a9a\n\u0088\3\u0088")
        buf.write("\5\u0088\u0a9d\n\u0088\3\u0088\3\u0088\3\u0089\3\u0089")
        buf.write("\5\u0089\u0aa3\n\u0089\3\u0089\3\u0089\5\u0089\u0aa7\n")
        buf.write("\u0089\3\u0089\3\u0089\5\u0089\u0aab\n\u0089\3\u0089\3")
        buf.write("\u0089\5\u0089\u0aaf\n\u0089\3\u0089\5\u0089\u0ab2\n\u0089")
        buf.write("\3\u0089\3\u0089\5\u0089\u0ab6\n\u0089\3\u0089\5\u0089")
        buf.write("\u0ab9\n\u0089\3\u0089\3\u0089\5\u0089\u0abd\n\u0089\3")
        buf.write("\u0089\5\u0089\u0ac0\n\u0089\3\u0089\5\u0089\u0ac3\n\u0089")
        buf.write("\3\u008a\3\u008a\5\u008a\u0ac7\n\u008a\3\u008a\3\u008a")
        buf.write("\3\u008b\3\u008b\5\u008b\u0acd\n\u008b\3\u008b\3\u008b")
        buf.write("\5\u008b\u0ad1\n\u008b\3\u008b\7\u008b\u0ad4\n\u008b\f")
        buf.write("\u008b\16\u008b\u0ad7\13\u008b\3\u008c\3\u008c\3\u008c")
        buf.write("\3\u008c\3\u008c\5\u008c\u0ade\n\u008c\3\u008c\3\u008c")
        buf.write("\3\u008d\3\u008d\6\u008d\u0ae4\n\u008d\r\u008d\16\u008d")
        buf.write("\u0ae5\3\u008d\3\u008d\3\u008d\6\u008d\u0aeb\n\u008d\r")
        buf.write("\u008d\16\u008d\u0aec\3\u008d\5\u008d\u0af0\n\u008d\3")
        buf.write("\u008e\3\u008e\3\u008e\3\u008e\5\u008e\u0af6\n\u008e\3")
        buf.write("\u008e\3\u008e\3\u008e\5\u008e\u0afb\n\u008e\3\u008f\3")
        buf.write("\u008f\3\u0090\3\u0090\3\u0090\7\u0090\u0b02\n\u0090\f")
        buf.write("\u0090\16\u0090\u0b05\13\u0090\3\u0090\3\u0090\3\u0090")
        buf.write("\6\u0090\u0b0a\n\u0090\r\u0090\16\u0090\u0b0b\5\u0090")
        buf.write("\u0b0e\n\u0090\3\u0091\3\u0091\3\u0092\3\u0092\3\u0092")
        buf.write("\7\u0092\u0b15\n\u0092\f\u0092\16\u0092\u0b18\13\u0092")
        buf.write("\3\u0093\3\u0093\5\u0093\u0b1c\n\u0093\3\u0093\3\u0093")
        buf.write("\5\u0093\u0b20\n\u0093\3\u0094\3\u0094\5\u0094\u0b24\n")
        buf.write("\u0094\3\u0094\3\u0094\5\u0094\u0b28\n\u0094\3\u0094\5")
        buf.write("\u0094\u0b2b\n\u0094\3\u0095\3\u0095\3\u0095\3\u0096\3")
        buf.write("\u0096\3\u0097\3\u0097\3\u0098\3\u0098\3\u0099\3\u0099")
        buf.write("\5\u0099\u0b38\n\u0099\3\u0099\5\u0099\u0b3b\n\u0099\3")
        buf.write("\u0099\3\u0099\5\u0099\u0b3f\n\u0099\3\u0099\5\u0099\u0b42")
        buf.write("\n\u0099\3\u009a\3\u009a\3\u009b\3\u009b\3\u009c\3\u009c")
        buf.write("\3\u009c\2\3\u00de\u009d\2\4\6\b\n\f\16\20\22\24\26\30")
        buf.write("\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`b")
        buf.write("dfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c")
        buf.write("\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e")
        buf.write("\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0")
        buf.write("\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2")
        buf.write("\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4")
        buf.write("\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6")
        buf.write("\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8")
        buf.write("\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a")
        buf.write("\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c")
        buf.write("\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e")
        buf.write("\u0130\u0132\u0134\u0136\2\27\4\2\16\16\u00a1\u00a1\3")
        buf.write("\2\35(\4\2\u00aa\u00aa\u00ae\u00ae\3\2?C\5\2\u00bc\u00bc")
        buf.write("\u00c6\u00c6\u00cb\u00cb\3\2rs\7\2\t\t\16\16QQ{{\u0085")
        buf.write("\u0085\4\2\u0088\u0089\u00b2\u00b2\4\2^`\u0098\u0098\4")
        buf.write("\2\u00b8\u00b8\u00cf\u00cf\4\2\u009a\u009a\u00a0\u00a0")
        buf.write("\4\2\20\21||\3\2\20\21\r\2\17\17\22\22\31\31\33\33,,S")
        buf.write("SWWpp\u0099\u0099\u009e\u009e\u00ab\u00ab\t\2RR\\\\\u00bc")
        buf.write("\u00bc\u00be\u00bf\u00c1\u00c1\u00c4\u00c4\u00c8\u00c8")
        buf.write("\6\2DDno\u00a5\u00a5\u00d2\u00d8\4\2\177\177\u0083\u0083")
        buf.write("\5\2JJ\177\177\u0083\u0083\b\2\u00b4\u00b4\u00b6\u00b6")
        buf.write("\u00ba\u00ba\u00bd\u00bd\u00c0\u00c0\u00c9\u00c9\6\2F")
        buf.write("FJJ\177\177\u0083\u0083\r\2\3\f\16/88:>D\\aafqtuz\177")
        buf.write("\u0083\u0088\u008a\u00b3\2\u0d13\2\u0138\3\2\2\2\4\u013c")
        buf.write("\3\2\2\2\6\u0186\3\2\2\2\b\u018a\3\2\2\2\n\u01a0\3\2\2")
        buf.write("\2\f\u01a2\3\2\2\2\16\u01a4\3\2\2\2\20\u01ab\3\2\2\2\22")
        buf.write("\u01bc\3\2\2\2\24\u01cd\3\2\2\2\26\u01d7\3\2\2\2\30\u01e3")
        buf.write("\3\2\2\2\32\u01e5\3\2\2\2\34\u01fd\3\2\2\2\36\u0200\3")
        buf.write("\2\2\2 \u021e\3\2\2\2\"\u0221\3\2\2\2$\u0239\3\2\2\2&")
        buf.write("\u0250\3\2\2\2(\u025c\3\2\2\2*\u027c\3\2\2\2,\u027e\3")
        buf.write("\2\2\2.\u0280\3\2\2\2\60\u0282\3\2\2\2\62\u029a\3\2\2")
        buf.write("\2\64\u02ec\3\2\2\2\66\u02ee\3\2\2\28\u02fb\3\2\2\2:\u02fd")
        buf.write("\3\2\2\2<\u0301\3\2\2\2>\u0305\3\2\2\2@\u031a\3\2\2\2")
        buf.write("B\u032c\3\2\2\2D\u033d\3\2\2\2F\u034a\3\2\2\2H\u036e\3")
        buf.write("\2\2\2J\u037e\3\2\2\2L\u03c8\3\2\2\2N\u03ca\3\2\2\2P\u03cf")
        buf.write("\3\2\2\2R\u03e1\3\2\2\2T\u03f1\3\2\2\2V\u0401\3\2\2\2")
        buf.write("X\u0408\3\2\2\2Z\u0412\3\2\2\2\\\u0414\3\2\2\2^\u0420")
        buf.write("\3\2\2\2`\u043e\3\2\2\2b\u0472\3\2\2\2d\u0494\3\2\2\2")
        buf.write("f\u04aa\3\2\2\2h\u04ae\3\2\2\2j\u04cb\3\2\2\2l\u04cd\3")
        buf.write("\2\2\2n\u04df\3\2\2\2p\u04e1\3\2\2\2r\u04f3\3\2\2\2t\u0501")
        buf.write("\3\2\2\2v\u0505\3\2\2\2x\u0514\3\2\2\2z\u051a\3\2\2\2")
        buf.write("|\u0526\3\2\2\2~\u0532\3\2\2\2\u0080\u0536\3\2\2\2\u0082")
        buf.write("\u0549\3\2\2\2\u0084\u0555\3\2\2\2\u0086\u0561\3\2\2\2")
        buf.write("\u0088\u0573\3\2\2\2\u008a\u0585\3\2\2\2\u008c\u0593\3")
        buf.write("\2\2\2\u008e\u05a1\3\2\2\2\u0090\u05a5\3\2\2\2\u0092\u05ad")
        buf.write("\3\2\2\2\u0094\u05ba\3\2\2\2\u0096\u05ce\3\2\2\2\u0098")
        buf.write("\u05e2\3\2\2\2\u009a\u0624\3\2\2\2\u009c\u0637\3\2\2\2")
        buf.write("\u009e\u0639\3\2\2\2\u00a0\u0649\3\2\2\2\u00a2\u0671\3")
        buf.write("\2\2\2\u00a4\u0692\3\2\2\2\u00a6\u06b0\3\2\2\2\u00a8\u06c6")
        buf.write("\3\2\2\2\u00aa\u06d9\3\2\2\2\u00ac\u06de\3\2\2\2\u00ae")
        buf.write("\u06f2\3\2\2\2\u00b0\u0703\3\2\2\2\u00b2\u0705\3\2\2\2")
        buf.write("\u00b4\u070d\3\2\2\2\u00b6\u070f\3\2\2\2\u00b8\u0713\3")
        buf.write("\2\2\2\u00ba\u071f\3\2\2\2\u00bc\u072b\3\2\2\2\u00be\u0747")
        buf.write("\3\2\2\2\u00c0\u0753\3\2\2\2\u00c2\u0768\3\2\2\2\u00c4")
        buf.write("\u0795\3\2\2\2\u00c6\u07a8\3\2\2\2\u00c8\u07aa\3\2\2\2")
        buf.write("\u00ca\u07b7\3\2\2\2\u00cc\u07c3\3\2\2\2\u00ce\u07cf\3")
        buf.write("\2\2\2\u00d0\u07d4\3\2\2\2\u00d2\u07f2\3\2\2\2\u00d4\u07ff")
        buf.write("\3\2\2\2\u00d6\u0811\3\2\2\2\u00d8\u082b\3\2\2\2\u00da")
        buf.write("\u0834\3\2\2\2\u00dc\u0838\3\2\2\2\u00de\u0890\3\2\2\2")
        buf.write("\u00e0\u0946\3\2\2\2\u00e2\u094f\3\2\2\2\u00e4\u095d\3")
        buf.write("\2\2\2\u00e6\u0978\3\2\2\2\u00e8\u098e\3\2\2\2\u00ea\u099a")
        buf.write("\3\2\2\2\u00ec\u09b0\3\2\2\2\u00ee\u09bf\3\2\2\2\u00f0")
        buf.write("\u09c1\3\2\2\2\u00f2\u09d6\3\2\2\2\u00f4\u09f4\3\2\2\2")
        buf.write("\u00f6\u09f6\3\2\2\2\u00f8\u09fc\3\2\2\2\u00fa\u0a0e\3")
        buf.write("\2\2\2\u00fc\u0a10\3\2\2\2\u00fe\u0a1a\3\2\2\2\u0100\u0a34")
        buf.write("\3\2\2\2\u0102\u0a49\3\2\2\2\u0104\u0a54\3\2\2\2\u0106")
        buf.write("\u0a5b\3\2\2\2\u0108\u0a69\3\2\2\2\u010a\u0a7e\3\2\2\2")
        buf.write("\u010c\u0a82\3\2\2\2\u010e\u0a87\3\2\2\2\u0110\u0aa2\3")
        buf.write("\2\2\2\u0112\u0ac4\3\2\2\2\u0114\u0aca\3\2\2\2\u0116\u0add")
        buf.write("\3\2\2\2\u0118\u0aef\3\2\2\2\u011a\u0af1\3\2\2\2\u011c")
        buf.write("\u0afc\3\2\2\2\u011e\u0b0d\3\2\2\2\u0120\u0b0f\3\2\2\2")
        buf.write("\u0122\u0b11\3\2\2\2\u0124\u0b19\3\2\2\2\u0126\u0b21\3")
        buf.write("\2\2\2\u0128\u0b2c\3\2\2\2\u012a\u0b2f\3\2\2\2\u012c\u0b31")
        buf.write("\3\2\2\2\u012e\u0b33\3\2\2\2\u0130\u0b37\3\2\2\2\u0132")
        buf.write("\u0b43\3\2\2\2\u0134\u0b45\3\2\2\2\u0136\u0b47\3\2\2\2")
        buf.write("\u0138\u0139\5\4\3\2\u0139\u013a\7\2\2\3\u013a\3\3\2\2")
        buf.write("\2\u013b\u013d\7\u00df\2\2\u013c\u013b\3\2\2\2\u013c\u013d")
        buf.write("\3\2\2\2\u013d\u0141\3\2\2\2\u013e\u0140\7\u00dd\2\2\u013f")
        buf.write("\u013e\3\2\2\2\u0140\u0143\3\2\2\2\u0141\u013f\3\2\2\2")
        buf.write("\u0141\u0142\3\2\2\2\u0142\u014a\3\2\2\2\u0143\u0141\3")
        buf.write("\2\2\2\u0144\u0146\5\16\b\2\u0145\u0147\7\u00dd\2\2\u0146")
        buf.write("\u0145\3\2\2\2\u0147\u0148\3\2\2\2\u0148\u0146\3\2\2\2")
        buf.write("\u0148\u0149\3\2\2\2\u0149\u014b\3\2\2\2\u014a\u0144\3")
        buf.write("\2\2\2\u014a\u014b\3\2\2\2\u014b\u014d\3\2\2\2\u014c\u014e")
        buf.write("\5\6\4\2\u014d\u014c\3\2\2\2\u014d\u014e\3\2\2\2\u014e")
        buf.write("\u0152\3\2\2\2\u014f\u0151\7\u00dd\2\2\u0150\u014f\3\2")
        buf.write("\2\2\u0151\u0154\3\2\2\2\u0152\u0150\3\2\2\2\u0152\u0153")
        buf.write("\3\2\2\2\u0153\u0156\3\2\2\2\u0154\u0152\3\2\2\2\u0155")
        buf.write("\u0157\5\36\20\2\u0156\u0155\3\2\2\2\u0156\u0157\3\2\2")
        buf.write("\2\u0157\u015b\3\2\2\2\u0158\u015a\7\u00dd\2\2\u0159\u0158")
        buf.write("\3\2\2\2\u015a\u015d\3\2\2\2\u015b\u0159\3\2\2\2\u015b")
        buf.write("\u015c\3\2\2\2\u015c\u015f\3\2\2\2\u015d\u015b\3\2\2\2")
        buf.write("\u015e\u0160\5\20\t\2\u015f\u015e\3\2\2\2\u015f\u0160")
        buf.write("\3\2\2\2\u0160\u0164\3\2\2\2\u0161\u0163\7\u00dd\2\2\u0162")
        buf.write("\u0161\3\2\2\2\u0163\u0166\3\2\2\2\u0164\u0162\3\2\2\2")
        buf.write("\u0164\u0165\3\2\2\2\u0165\u0168\3\2\2\2\u0166\u0164\3")
        buf.write("\2\2\2\u0167\u0169\5\24\13\2\u0168\u0167\3\2\2\2\u0168")
        buf.write("\u0169\3\2\2\2\u0169\u016d\3\2\2\2\u016a\u016c\7\u00dd")
        buf.write("\2\2\u016b\u016a\3\2\2\2\u016c\u016f\3\2\2\2\u016d\u016b")
        buf.write("\3\2\2\2\u016d\u016e\3\2\2\2\u016e\u0171\3\2\2\2\u016f")
        buf.write("\u016d\3\2\2\2\u0170\u0172\5\26\f\2\u0171\u0170\3\2\2")
        buf.write("\2\u0171\u0172\3\2\2\2\u0172\u0176\3\2\2\2\u0173\u0175")
        buf.write("\7\u00dd\2\2\u0174\u0173\3\2\2\2\u0175\u0178\3\2\2\2\u0176")
        buf.write("\u0174\3\2\2\2\u0176\u0177\3\2\2\2\u0177\u017a\3\2\2\2")
        buf.write("\u0178\u0176\3\2\2\2\u0179\u017b\5\32\16\2\u017a\u0179")
        buf.write("\3\2\2\2\u017a\u017b\3\2\2\2\u017b\u017f\3\2\2\2\u017c")
        buf.write("\u017e\7\u00dd\2\2\u017d\u017c\3\2\2\2\u017e\u0181\3\2")
        buf.write("\2\2\u017f\u017d\3\2\2\2\u017f\u0180\3\2\2\2\u0180\u0183")
        buf.write("\3\2\2\2\u0181\u017f\3\2\2\2\u0182\u0184\7\u00df\2\2\u0183")
        buf.write("\u0182\3\2\2\2\u0183\u0184\3\2\2\2\u0184\5\3\2\2\2\u0185")
        buf.write("\u0187\5\b\5\2\u0186\u0185\3\2\2\2\u0187\u0188\3\2\2\2")
        buf.write("\u0188\u0186\3\2\2\2\u0188\u0189\3\2\2\2\u0189\7\3\2\2")
        buf.write("\2\u018a\u018c\7p\2\2\u018b\u018d\7\u00df\2\2\u018c\u018b")
        buf.write("\3\2\2\2\u018c\u018d\3\2\2\2\u018d\u018e\3\2\2\2\u018e")
        buf.write("\u0190\7\u00bc\2\2\u018f\u0191\7\u00df\2\2\u0190\u018f")
        buf.write("\3\2\2\2\u0190\u0191\3\2\2\2\u0191\u0192\3\2\2\2\u0192")
        buf.write("\u0198\5\n\6\2\u0193\u0195\7\u00cf\2\2\u0194\u0196\7\u00df")
        buf.write("\2\2\u0195\u0194\3\2\2\2\u0195\u0196\3\2\2\2\u0196\u0197")
        buf.write("\3\2\2\2\u0197\u0199\5\f\7\2\u0198\u0193\3\2\2\2\u0198")
        buf.write("\u0199\3\2\2\2\u0199\u019d\3\2\2\2\u019a\u019c\7\u00dd")
        buf.write("\2\2\u019b\u019a\3\2\2\2\u019c\u019f\3\2\2\2\u019d\u019b")
        buf.write("\3\2\2\2\u019d\u019e\3\2\2\2\u019e\t\3\2\2\2\u019f\u019d")
        buf.write("\3\2\2\2\u01a0\u01a1\7\u00d2\2\2\u01a1\13\3\2\2\2\u01a2")
        buf.write("\u01a3\7\u00d2\2\2\u01a3\r\3\2\2\2\u01a4\u01a5\7\u00ac")
        buf.write("\2\2\u01a5\u01a6\7\u00df\2\2\u01a6\u01a9\7\u00d6\2\2\u01a7")
        buf.write("\u01a8\7\u00df\2\2\u01a8\u01aa\7\27\2\2\u01a9\u01a7\3")
        buf.write("\2\2\2\u01a9\u01aa\3\2\2\2\u01aa\17\3\2\2\2\u01ab\u01ad")
        buf.write("\7\f\2\2\u01ac\u01ae\7\u00dd\2\2\u01ad\u01ac\3\2\2\2\u01ae")
        buf.write("\u01af\3\2\2\2\u01af\u01ad\3\2\2\2\u01af\u01b0\3\2\2\2")
        buf.write("\u01b0\u01b2\3\2\2\2\u01b1\u01b3\5\22\n\2\u01b2\u01b1")
        buf.write("\3\2\2\2\u01b3\u01b4\3\2\2\2\u01b4\u01b2\3\2\2\2\u01b4")
        buf.write("\u01b5\3\2\2\2\u01b5\u01b6\3\2\2\2\u01b6\u01b8\78\2\2")
        buf.write("\u01b7\u01b9\7\u00dd\2\2\u01b8\u01b7\3\2\2\2\u01b9\u01ba")
        buf.write("\3\2\2\2\u01ba\u01b8\3\2\2\2\u01ba\u01bb\3\2\2\2\u01bb")
        buf.write("\21\3\2\2\2\u01bc\u01be\5\u0118\u008d\2\u01bd\u01bf\7")
        buf.write("\u00df\2\2\u01be\u01bd\3\2\2\2\u01be\u01bf\3\2\2\2\u01bf")
        buf.write("\u01c0\3\2\2\2\u01c0\u01c2\7\u00bc\2\2\u01c1\u01c3\7\u00df")
        buf.write("\2\2\u01c2\u01c1\3\2\2\2\u01c2\u01c3\3\2\2\2\u01c3\u01c4")
        buf.write("\3\2\2\2\u01c4\u01c5\5\u012a\u0096\2\u01c5\u01c6\7\u00dd")
        buf.write("\2\2\u01c6\23\3\2\2\2\u01c7\u01c9\5\60\31\2\u01c8\u01ca")
        buf.write("\7\u00dd\2\2\u01c9\u01c8\3\2\2\2\u01ca\u01cb\3\2\2\2\u01cb")
        buf.write("\u01c9\3\2\2\2\u01cb\u01cc\3\2\2\2\u01cc\u01ce\3\2\2\2")
        buf.write("\u01cd\u01c7\3\2\2\2\u01ce\u01cf\3\2\2\2\u01cf\u01cd\3")
        buf.write("\2\2\2\u01cf\u01d0\3\2\2\2\u01d0\25\3\2\2\2\u01d1\u01d3")
        buf.write("\5\30\r\2\u01d2\u01d4\7\u00dd\2\2\u01d3\u01d2\3\2\2\2")
        buf.write("\u01d4\u01d5\3\2\2\2\u01d5\u01d3\3\2\2\2\u01d5\u01d6\3")
        buf.write("\2\2\2\u01d6\u01d8\3\2\2\2\u01d7\u01d1\3\2\2\2\u01d8\u01d9")
        buf.write("\3\2\2\2\u01d9\u01d7\3\2\2\2\u01d9\u01da\3\2\2\2\u01da")
        buf.write("\27\3\2\2\2\u01db\u01dc\7v\2\2\u01dc\u01dd\7\u00df\2\2")
        buf.write("\u01dd\u01e4\7\u00d5\2\2\u01de\u01df\7x\2\2\u01df\u01e0")
        buf.write("\7\u00df\2\2\u01e0\u01e4\t\2\2\2\u01e1\u01e4\7w\2\2\u01e2")
        buf.write("\u01e4\7y\2\2\u01e3\u01db\3\2\2\2\u01e3\u01de\3\2\2\2")
        buf.write("\u01e3\u01e1\3\2\2\2\u01e3\u01e2\3\2\2\2\u01e4\31\3\2")
        buf.write("\2\2\u01e5\u01ee\5\34\17\2\u01e6\u01e8\7\u00dd\2\2\u01e7")
        buf.write("\u01e6\3\2\2\2\u01e8\u01e9\3\2\2\2\u01e9\u01e7\3\2\2\2")
        buf.write("\u01e9\u01ea\3\2\2\2\u01ea\u01eb\3\2\2\2\u01eb\u01ed\5")
        buf.write("\34\17\2\u01ec\u01e7\3\2\2\2\u01ed\u01f0\3\2\2\2\u01ee")
        buf.write("\u01ec\3\2\2\2\u01ee\u01ef\3\2\2\2\u01ef\33\3\2\2\2\u01f0")
        buf.write("\u01ee\3\2\2\2\u01f1\u01fe\5.\30\2\u01f2\u01fe\5\30\r")
        buf.write("\2\u01f3\u01fe\5F$\2\u01f4\u01fe\5P)\2\u01f5\u01fe\5X")
        buf.write("-\2\u01f6\u01fe\5b\62\2\u01f7\u01fe\5\u0084C\2\u01f8\u01fe")
        buf.write("\5\u00a0Q\2\u01f9\u01fe\5\u00a2R\2\u01fa\u01fe\5\u00a4")
        buf.write("S\2\u01fb\u01fe\5\u00d0i\2\u01fc\u01fe\5\u00d4k\2\u01fd")
        buf.write("\u01f1\3\2\2\2\u01fd\u01f2\3\2\2\2\u01fd\u01f3\3\2\2\2")
        buf.write("\u01fd\u01f4\3\2\2\2\u01fd\u01f5\3\2\2\2\u01fd\u01f6\3")
        buf.write("\2\2\2\u01fd\u01f7\3\2\2\2\u01fd\u01f8\3\2\2\2\u01fd\u01f9")
        buf.write("\3\2\2\2\u01fd\u01fa\3\2\2\2\u01fd\u01fb\3\2\2\2\u01fd")
        buf.write("\u01fc\3\2\2\2\u01fe\35\3\2\2\2\u01ff\u0201\7\u00df\2")
        buf.write("\2\u0200\u01ff\3\2\2\2\u0200\u0201\3\2\2\2\u0201\u0202")
        buf.write("\3\2\2\2\u0202\u0203\7\f\2\2\u0203\u0204\7\u00df\2\2\u0204")
        buf.write("\u0205\5*\26\2\u0205\u0206\7\u00df\2\2\u0206\u0208\5,")
        buf.write("\27\2\u0207\u0209\7\u00df\2\2\u0208\u0207\3\2\2\2\u0208")
        buf.write("\u0209\3\2\2\2\u0209\u020b\3\2\2\2\u020a\u020c\7\u00dd")
        buf.write("\2\2\u020b\u020a\3\2\2\2\u020c\u020d\3\2\2\2\u020d\u020b")
        buf.write("\3\2\2\2\u020d\u020e\3\2\2\2\u020e\u0210\3\2\2\2\u020f")
        buf.write("\u0211\5 \21\2\u0210\u020f\3\2\2\2\u0211\u0212\3\2\2\2")
        buf.write("\u0212\u0210\3\2\2\2\u0212\u0213\3\2\2\2\u0213\u0214\3")
        buf.write("\2\2\2\u0214\u0218\78\2\2\u0215\u0217\7\u00dd\2\2\u0216")
        buf.write("\u0215\3\2\2\2\u0217\u021a\3\2\2\2\u0218\u0216\3\2\2\2")
        buf.write("\u0218\u0219\3\2\2\2\u0219\37\3\2\2\2\u021a\u0218\3\2")
        buf.write("\2\2\u021b\u021f\5\"\22\2\u021c\u021f\5(\25\2\u021d\u021f")
        buf.write("\5\36\20\2\u021e\u021b\3\2\2\2\u021e\u021c\3\2\2\2\u021e")
        buf.write("\u021d\3\2\2\2\u021f!\3\2\2\2\u0220\u0222\7\u00df\2\2")
        buf.write("\u0221\u0220\3\2\2\2\u0221\u0222\3\2\2\2\u0222\u0223\3")
        buf.write("\2\2\2\u0223\u0225\5\u00fa~\2\u0224\u0226\7\u00df\2\2")
        buf.write("\u0225\u0224\3\2\2\2\u0225\u0226\3\2\2\2\u0226\u0227\3")
        buf.write("\2\2\2\u0227\u0229\7\u00bc\2\2\u0228\u022a\7\u00df\2\2")
        buf.write("\u0229\u0228\3\2\2\2\u0229\u022a\3\2\2\2\u022a\u022c\3")
        buf.write("\2\2\2\u022b\u022d\7\u00ba\2\2\u022c\u022b\3\2\2\2\u022c")
        buf.write("\u022d\3\2\2\2\u022d\u022e\3\2\2\2\u022e\u0230\5&\24\2")
        buf.write("\u022f\u0231\7\u00d9\2\2\u0230\u022f\3\2\2\2\u0230\u0231")
        buf.write("\3\2\2\2\u0231\u0233\3\2\2\2\u0232\u0234\7\u00dd\2\2\u0233")
        buf.write("\u0232\3\2\2\2\u0234\u0235\3\2\2\2\u0235\u0233\3\2\2\2")
        buf.write("\u0235\u0236\3\2\2\2\u0236#\3\2\2\2\u0237\u0238\7p\2\2")
        buf.write("\u0238\u023a\7\u00bb\2\2\u0239\u0237\3\2\2\2\u0239\u023a")
        buf.write("\3\2\2\2\u023a\u023b\3\2\2\2\u023b\u0240\5\u0118\u008d")
        buf.write("\2\u023c\u023d\7\u00c3\2\2\u023d\u023e\5\u012a\u0096\2")
        buf.write("\u023e\u023f\7\u00ce\2\2\u023f\u0241\3\2\2\2\u0240\u023c")
        buf.write("\3\2\2\2\u0240\u0241\3\2\2\2\u0241\u024c\3\2\2\2\u0242")
        buf.write("\u0243\7\u00bb\2\2\u0243\u0248\5\u0118\u008d\2\u0244\u0245")
        buf.write("\7\u00c3\2\2\u0245\u0246\5\u012a\u0096\2\u0246\u0247\7")
        buf.write("\u00ce\2\2\u0247\u0249\3\2\2\2\u0248\u0244\3\2\2\2\u0248")
        buf.write("\u0249\3\2\2\2\u0249\u024b\3\2\2\2\u024a\u0242\3\2\2\2")
        buf.write("\u024b\u024e\3\2\2\2\u024c\u024a\3\2\2\2\u024c\u024d\3")
        buf.write("\2\2\2\u024d%\3\2\2\2\u024e\u024c\3\2\2\2\u024f\u0251")
        buf.write("\7\u00ba\2\2\u0250\u024f\3\2\2\2\u0250\u0251\3\2\2\2\u0251")
        buf.write("\u0259\3\2\2\2\u0252\u025a\5\u012a\u0096\2\u0253\u0254")
        buf.write("\7\u00c2\2\2\u0254\u0255\5\u0118\u008d\2\u0255\u0256\7")
        buf.write("\u00cd\2\2\u0256\u025a\3\2\2\2\u0257\u0258\7\u00cc\2\2")
        buf.write("\u0258\u025a\5\u0118\u008d\2\u0259\u0252\3\2\2\2\u0259")
        buf.write("\u0253\3\2\2\2\u0259\u0257\3\2\2\2\u025a\'\3\2\2\2\u025b")
        buf.write("\u025d\7\u00df\2\2\u025c\u025b\3\2\2\2\u025c\u025d\3\2")
        buf.write("\2\2\u025d\u025e\3\2\2\2\u025e\u025f\7\r\2\2\u025f\u0260")
        buf.write("\7\u00df\2\2\u0260\u0264\5\u0118\u008d\2\u0261\u0262\7")
        buf.write("\u00c3\2\2\u0262\u0263\7\u00d5\2\2\u0263\u0265\7\u00ce")
        buf.write("\2\2\u0264\u0261\3\2\2\2\u0264\u0265\3\2\2\2\u0265\u0268")
        buf.write("\3\2\2\2\u0266\u0267\7\u00df\2\2\u0267\u0269\7\u00da\2")
        buf.write("\2\u0268\u0266\3\2\2\2\u0268\u0269\3\2\2\2\u0269\u026b")
        buf.write("\3\2\2\2\u026a\u026c\7\u00dd\2\2\u026b\u026a\3\2\2\2\u026c")
        buf.write("\u026d\3\2\2\2\u026d\u026b\3\2\2\2\u026d\u026e\3\2\2\2")
        buf.write("\u026e\u0274\3\2\2\2\u026f\u0271\5 \21\2\u0270\u026f\3")
        buf.write("\2\2\2\u0271\u0272\3\2\2\2\u0272\u0270\3\2\2\2\u0272\u0273")
        buf.write("\3\2\2\2\u0273\u0275\3\2\2\2\u0274\u0270\3\2\2\2\u0274")
        buf.write("\u0275\3\2\2\2\u0275\u0276\3\2\2\2\u0276\u0278\79\2\2")
        buf.write("\u0277\u0279\7\u00dd\2\2\u0278\u0277\3\2\2\2\u0279\u027a")
        buf.write("\3\2\2\2\u027a\u0278\3\2\2\2\u027a\u027b\3\2\2\2\u027b")
        buf.write(")\3\2\2\2\u027c\u027d\5\u0122\u0092\2\u027d+\3\2\2\2\u027e")
        buf.write("\u027f\5\u0118\u008d\2\u027f-\3\2\2\2\u0280\u0281\5\62")
        buf.write("\32\2\u0281/\3\2\2\2\u0282\u0283\7\7\2\2\u0283\u0284\7")
        buf.write("\u00df\2\2\u0284\u0286\5\u00fa~\2\u0285\u0287\7\u00df")
        buf.write("\2\2\u0286\u0285\3\2\2\2\u0286\u0287\3\2\2\2\u0287\u0288")
        buf.write("\3\2\2\2\u0288\u028a\7\u00bc\2\2\u0289\u028b\7\u00df\2")
        buf.write("\2\u028a\u0289\3\2\2\2\u028a\u028b\3\2\2\2\u028b\u028c")
        buf.write("\3\2\2\2\u028c\u0297\5\u012a\u0096\2\u028d\u028f\7\u00df")
        buf.write("\2\2\u028e\u028d\3\2\2\2\u028e\u028f\3\2\2\2\u028f\u0290")
        buf.write("\3\2\2\2\u0290\u0292\7\u00b8\2\2\u0291\u0293\7\u00df\2")
        buf.write("\2\u0292\u0291\3\2\2\2\u0292\u0293\3\2\2\2\u0293\u0294")
        buf.write("\3\2\2\2\u0294\u0296\5\u012a\u0096\2\u0295\u028e\3\2\2")
        buf.write("\2\u0296\u0299\3\2\2\2\u0297\u0295\3\2\2\2\u0297\u0298")
        buf.write("\3\2\2\2\u0298\61\3\2\2\2\u0299\u0297\3\2\2\2\u029a\u02a6")
        buf.write("\5\64\33\2\u029b\u029d\7\u00dd\2\2\u029c\u029b\3\2\2\2")
        buf.write("\u029d\u029e\3\2\2\2\u029e\u029c\3\2\2\2\u029e\u029f\3")
        buf.write("\2\2\2\u029f\u02a1\3\2\2\2\u02a0\u02a2\7\u00df\2\2\u02a1")
        buf.write("\u02a0\3\2\2\2\u02a1\u02a2\3\2\2\2\u02a2\u02a3\3\2\2\2")
        buf.write("\u02a3\u02a5\5\64\33\2\u02a4\u029c\3\2\2\2\u02a5\u02a8")
        buf.write("\3\2\2\2\u02a6\u02a4\3\2\2\2\u02a6\u02a7\3\2\2\2\u02a7")
        buf.write("\63\3\2\2\2\u02a8\u02a6\3\2\2\2\u02a9\u02ed\5\66\34\2")
        buf.write("\u02aa\u02ed\5\60\31\2\u02ab\u02ed\58\35\2\u02ac\u02ed")
        buf.write("\5:\36\2\u02ad\u02ed\5<\37\2\u02ae\u02ed\5> \2\u02af\u02ed")
        buf.write("\5@!\2\u02b0\u02ed\5D#\2\u02b1\u02ed\5J&\2\u02b2\u02ed")
        buf.write("\5H%\2\u02b3\u02ed\5L\'\2\u02b4\u02ed\5N(\2\u02b5\u02ed")
        buf.write("\5T+\2\u02b6\u02ed\5V,\2\u02b7\u02ed\5Z.\2\u02b8\u02ed")
        buf.write("\5\u00eex\2\u02b9\u02ed\5\\/\2\u02ba\u02ed\5^\60\2\u02bb")
        buf.write("\u02ed\5`\61\2\u02bc\u02ed\5d\63\2\u02bd\u02ed\5f\64\2")
        buf.write("\u02be\u02ed\5h\65\2\u02bf\u02ed\5j\66\2\u02c0\u02ed\5")
        buf.write("t;\2\u02c1\u02ed\5v<\2\u02c2\u02ed\5x=\2\u02c3\u02ed\5")
        buf.write("z>\2\u02c4\u02ed\5|?\2\u02c5\u02ed\5\u0128\u0095\2\u02c6")
        buf.write("\u02ed\5~@\2\u02c7\u02ed\5\u0080A\2\u02c8\u02ed\5\u0082")
        buf.write("B\2\u02c9\u02ed\5\u0084C\2\u02ca\u02ed\5\u008cG\2\u02cb")
        buf.write("\u02ed\5\u008eH\2\u02cc\u02ed\5\u0090I\2\u02cd\u02ed\5")
        buf.write("\u0092J\2\u02ce\u02ed\5\u0094K\2\u02cf\u02ed\5\u0096L")
        buf.write("\2\u02d0\u02ed\5\u0098M\2\u02d1\u02ed\5\u009eP\2\u02d2")
        buf.write("\u02ed\5\u00a6T\2\u02d3\u02ed\5\u00a8U\2\u02d4\u02ed\5")
        buf.write("\u00aaV\2\u02d5\u02ed\5\u00acW\2\u02d6\u02ed\5\u00b0Y")
        buf.write("\2\u02d7\u02ed\5\u00b2Z\2\u02d8\u02ed\5\u00b4[\2\u02d9")
        buf.write("\u02ed\5\u00b6\\\2\u02da\u02ed\5\u00b8]\2\u02db\u02ed")
        buf.write("\5\u00ba^\2\u02dc\u02ed\5\u00bc_\2\u02dd\u02ed\5\u00be")
        buf.write("`\2\u02de\u02ed\5\u00c0a\2\u02df\u02ed\5\u00c8e\2\u02e0")
        buf.write("\u02ed\5\u00caf\2\u02e1\u02ed\5\u00ccg\2\u02e2\u02ed\5")
        buf.write("\u00ceh\2\u02e3\u02ed\5\u00d2j\2\u02e4\u02ed\5\u00dan")
        buf.write("\2\u02e5\u02ed\5\u00dco\2\u02e6\u02ed\5\u00e0q\2\u02e7")
        buf.write("\u02ed\5\u00e6t\2\u02e8\u02ed\5\u00e8u\2\u02e9\u02ed\5")
        buf.write("\u00eav\2\u02ea\u02ed\5\u00ecw\2\u02eb\u02ed\5\u00f4{")
        buf.write("\2\u02ec\u02a9\3\2\2\2\u02ec\u02aa\3\2\2\2\u02ec\u02ab")
        buf.write("\3\2\2\2\u02ec\u02ac\3\2\2\2\u02ec\u02ad\3\2\2\2\u02ec")
        buf.write("\u02ae\3\2\2\2\u02ec\u02af\3\2\2\2\u02ec\u02b0\3\2\2\2")
        buf.write("\u02ec\u02b1\3\2\2\2\u02ec\u02b2\3\2\2\2\u02ec\u02b3\3")
        buf.write("\2\2\2\u02ec\u02b4\3\2\2\2\u02ec\u02b5\3\2\2\2\u02ec\u02b6")
        buf.write("\3\2\2\2\u02ec\u02b7\3\2\2\2\u02ec\u02b8\3\2\2\2\u02ec")
        buf.write("\u02b9\3\2\2\2\u02ec\u02ba\3\2\2\2\u02ec\u02bb\3\2\2\2")
        buf.write("\u02ec\u02bc\3\2\2\2\u02ec\u02bd\3\2\2\2\u02ec\u02be\3")
        buf.write("\2\2\2\u02ec\u02bf\3\2\2\2\u02ec\u02c0\3\2\2\2\u02ec\u02c1")
        buf.write("\3\2\2\2\u02ec\u02c2\3\2\2\2\u02ec\u02c3\3\2\2\2\u02ec")
        buf.write("\u02c4\3\2\2\2\u02ec\u02c5\3\2\2\2\u02ec\u02c6\3\2\2\2")
        buf.write("\u02ec\u02c7\3\2\2\2\u02ec\u02c8\3\2\2\2\u02ec\u02c9\3")
        buf.write("\2\2\2\u02ec\u02ca\3\2\2\2\u02ec\u02cb\3\2\2\2\u02ec\u02cc")
        buf.write("\3\2\2\2\u02ec\u02cd\3\2\2\2\u02ec\u02ce\3\2\2\2\u02ec")
        buf.write("\u02cf\3\2\2\2\u02ec\u02d0\3\2\2\2\u02ec\u02d1\3\2\2\2")
        buf.write("\u02ec\u02d2\3\2\2\2\u02ec\u02d3\3\2\2\2\u02ec\u02d4\3")
        buf.write("\2\2\2\u02ec\u02d5\3\2\2\2\u02ec\u02d6\3\2\2\2\u02ec\u02d7")
        buf.write("\3\2\2\2\u02ec\u02d8\3\2\2\2\u02ec\u02d9\3\2\2\2\u02ec")
        buf.write("\u02da\3\2\2\2\u02ec\u02db\3\2\2\2\u02ec\u02dc\3\2\2\2")
        buf.write("\u02ec\u02dd\3\2\2\2\u02ec\u02de\3\2\2\2\u02ec\u02df\3")
        buf.write("\2\2\2\u02ec\u02e0\3\2\2\2\u02ec\u02e1\3\2\2\2\u02ec\u02e2")
        buf.write("\3\2\2\2\u02ec\u02e3\3\2\2\2\u02ec\u02e4\3\2\2\2\u02ec")
        buf.write("\u02e5\3\2\2\2\u02ec\u02e6\3\2\2\2\u02ec\u02e7\3\2\2\2")
        buf.write("\u02ec\u02e8\3\2\2\2\u02ec\u02e9\3\2\2\2\u02ec\u02ea\3")
        buf.write("\2\2\2\u02ec\u02eb\3\2\2\2\u02ed\65\3\2\2\2\u02ee\u02ef")
        buf.write("\7\b\2\2\u02ef\u02f0\7\u00df\2\2\u02f0\u02f9\5\u00dep")
        buf.write("\2\u02f1\u02f3\7\u00df\2\2\u02f2\u02f1\3\2\2\2\u02f2\u02f3")
        buf.write("\3\2\2\2\u02f3\u02f4\3\2\2\2\u02f4\u02f6\7\u00b8\2\2\u02f5")
        buf.write("\u02f7\7\u00df\2\2\u02f6\u02f5\3\2\2\2\u02f6\u02f7\3\2")
        buf.write("\2\2\u02f7\u02f8\3\2\2\2\u02f8\u02fa\5\u00dep\2\u02f9")
        buf.write("\u02f2\3\2\2\2\u02f9\u02fa\3\2\2\2\u02fa\67\3\2\2\2\u02fb")
        buf.write("\u02fc\7\13\2\2\u02fc9\3\2\2\2\u02fd\u02fe\7\25\2\2\u02fe")
        buf.write("\u02ff\7\u00df\2\2\u02ff\u0300\5\u00dep\2\u0300;\3\2\2")
        buf.write("\2\u0301\u0302\7\26\2\2\u0302\u0303\7\u00df\2\2\u0303")
        buf.write("\u0304\5\u00dep\2\u0304=\3\2\2\2\u0305\u0315\7\30\2\2")
        buf.write("\u0306\u0307\7\u00df\2\2\u0307\u0312\5\u00dep\2\u0308")
        buf.write("\u030a\7\u00df\2\2\u0309\u0308\3\2\2\2\u0309\u030a\3\2")
        buf.write("\2\2\u030a\u030b\3\2\2\2\u030b\u030d\7\u00b8\2\2\u030c")
        buf.write("\u030e\7\u00df\2\2\u030d\u030c\3\2\2\2\u030d\u030e\3\2")
        buf.write("\2\2\u030e\u030f\3\2\2\2\u030f\u0311\5\u00dep\2\u0310")
        buf.write("\u0309\3\2\2\2\u0311\u0314\3\2\2\2\u0312\u0310\3\2\2\2")
        buf.write("\u0312\u0313\3\2\2\2\u0313\u0316\3\2\2\2\u0314\u0312\3")
        buf.write("\2\2\2\u0315\u0306\3\2\2\2\u0315\u0316\3\2\2\2\u0316?")
        buf.write("\3\2\2\2\u0317\u0318\5\u012e\u0098\2\u0318\u0319\7\u00df")
        buf.write("\2\2\u0319\u031b\3\2\2\2\u031a\u0317\3\2\2\2\u031a\u031b")
        buf.write("\3\2\2\2\u031b\u031c\3\2\2\2\u031c\u031d\7\32\2\2\u031d")
        buf.write("\u031e\7\u00df\2\2\u031e\u0329\5B\"\2\u031f\u0321\7\u00df")
        buf.write("\2\2\u0320\u031f\3\2\2\2\u0320\u0321\3\2\2\2\u0321\u0322")
        buf.write("\3\2\2\2\u0322\u0324\7\u00b8\2\2\u0323\u0325\7\u00df\2")
        buf.write("\2\u0324\u0323\3\2\2\2\u0324\u0325\3\2\2\2\u0325\u0326")
        buf.write("\3\2\2\2\u0326\u0328\5B\"\2\u0327\u0320\3\2\2\2\u0328")
        buf.write("\u032b\3\2\2\2\u0329\u0327\3\2\2\2\u0329\u032a\3\2\2\2")
        buf.write("\u032aA\3\2\2\2\u032b\u0329\3\2\2\2\u032c\u032e\5\u0118")
        buf.write("\u008d\2\u032d\u032f\5\u0132\u009a\2\u032e\u032d\3\2\2")
        buf.write("\2\u032e\u032f\3\2\2\2\u032f\u0332\3\2\2\2\u0330\u0331")
        buf.write("\7\u00df\2\2\u0331\u0333\5\u011a\u008e\2\u0332\u0330\3")
        buf.write("\2\2\2\u0332\u0333\3\2\2\2\u0333\u0335\3\2\2\2\u0334\u0336")
        buf.write("\7\u00df\2\2\u0335\u0334\3\2\2\2\u0335\u0336\3\2\2\2\u0336")
        buf.write("\u0337\3\2\2\2\u0337\u0339\7\u00bc\2\2\u0338\u033a\7\u00df")
        buf.write("\2\2\u0339\u0338\3\2\2\2\u0339\u033a\3\2\2\2\u033a\u033b")
        buf.write("\3\2\2\2\u033b\u033c\5\u00dep\2\u033cC\3\2\2\2\u033d\u033f")
        buf.write("\7\33\2\2\u033e\u0340\7\u00df\2\2\u033f\u033e\3\2\2\2")
        buf.write("\u033f\u0340\3\2\2\2\u0340\u0341\3\2\2\2\u0341\u0343\7")
        buf.write("\u00bc\2\2\u0342\u0344\7\u00df\2\2\u0343\u0342\3\2\2\2")
        buf.write("\u0343\u0344\3\2\2\2\u0344\u0345\3\2\2\2\u0345\u0346\5")
        buf.write("\u00dep\2\u0346E\3\2\2\2\u0347\u0348\5\u0134\u009b\2\u0348")
        buf.write("\u0349\7\u00df\2\2\u0349\u034b\3\2\2\2\u034a\u0347\3\2")
        buf.write("\2\2\u034a\u034b\3\2\2\2\u034b\u034c\3\2\2\2\u034c\u034d")
        buf.write("\7\34\2\2\u034d\u0353\7\u00df\2\2\u034e\u0350\7H\2\2\u034f")
        buf.write("\u0351\5\u0132\u009a\2\u0350\u034f\3\2\2\2\u0350\u0351")
        buf.write("\3\2\2\2\u0351\u0354\3\2\2\2\u0352\u0354\7\u009f\2\2\u0353")
        buf.write("\u034e\3\2\2\2\u0353\u0352\3\2\2\2\u0354\u0355\3\2\2\2")
        buf.write("\u0355\u0356\7\u00df\2\2\u0356\u0358\5\u0118\u008d\2\u0357")
        buf.write("\u0359\5\u0132\u009a\2\u0358\u0357\3\2\2\2\u0358\u0359")
        buf.write("\3\2\2\2\u0359\u035a\3\2\2\2\u035a\u035b\7\u00df\2\2\u035b")
        buf.write("\u035c\7[\2\2\u035c\u035d\7\u00df\2\2\u035d\u0362\7\u00d2")
        buf.write("\2\2\u035e\u035f\7\u00df\2\2\u035f\u0360\7\5\2\2\u0360")
        buf.write("\u0361\7\u00df\2\2\u0361\u0363\7\u00d2\2\2\u0362\u035e")
        buf.write("\3\2\2\2\u0362\u0363\3\2\2\2\u0363\u0368\3\2\2\2\u0364")
        buf.write("\u0366\7\u00df\2\2\u0365\u0364\3\2\2\2\u0365\u0366\3\2")
        buf.write("\2\2\u0366\u0367\3\2\2\2\u0367\u0369\5\u010e\u0088\2\u0368")
        buf.write("\u0365\3\2\2\2\u0368\u0369\3\2\2\2\u0369\u036c\3\2\2\2")
        buf.write("\u036a\u036b\7\u00df\2\2\u036b\u036d\5\u011a\u008e\2\u036c")
        buf.write("\u036a\3\2\2\2\u036c\u036d\3\2\2\2\u036dG\3\2\2\2\u036e")
        buf.write("\u036f\t\3\2\2\u036f\u0370\7\u00df\2\2\u0370\u037b\5\u0126")
        buf.write("\u0094\2\u0371\u0373\7\u00df\2\2\u0372\u0371\3\2\2\2\u0372")
        buf.write("\u0373\3\2\2\2\u0373\u0374\3\2\2\2\u0374\u0376\7\u00b8")
        buf.write("\2\2\u0375\u0377\7\u00df\2\2\u0376\u0375\3\2\2\2\u0376")
        buf.write("\u0377\3\2\2\2\u0377\u0378\3\2\2\2\u0378\u037a\5\u0126")
        buf.write("\u0094\2\u0379\u0372\3\2\2\2\u037a\u037d\3\2\2\2\u037b")
        buf.write("\u0379\3\2\2\2\u037b\u037c\3\2\2\2\u037cI\3\2\2\2\u037d")
        buf.write("\u037b\3\2\2\2\u037e\u037f\7)\2\2\u037f\u0380\7\u00df")
        buf.write("\2\2\u0380\u0382\5\u00dep\2\u0381\u0383\7\u00df\2\2\u0382")
        buf.write("\u0381\3\2\2\2\u0382\u0383\3\2\2\2\u0383\u0384\3\2\2\2")
        buf.write("\u0384\u0386\7\u00b8\2\2\u0385\u0387\7\u00df\2\2\u0386")
        buf.write("\u0385\3\2\2\2\u0386\u0387\3\2\2\2\u0387\u0388\3\2\2\2")
        buf.write("\u0388\u0391\5\u00dep\2\u0389\u038b\7\u00df\2\2\u038a")
        buf.write("\u0389\3\2\2\2\u038a\u038b\3\2\2\2\u038b\u038c\3\2\2\2")
        buf.write("\u038c\u038e\7\u00b8\2\2\u038d\u038f\7\u00df\2\2\u038e")
        buf.write("\u038d\3\2\2\2\u038e\u038f\3\2\2\2\u038f\u0390\3\2\2\2")
        buf.write("\u0390\u0392\5\u00dep\2\u0391\u038a\3\2\2\2\u0391\u0392")
        buf.write("\3\2\2\2\u0392K\3\2\2\2\u0393\u0395\7+\2\2\u0394\u0396")
        buf.write("\7\u00dd\2\2\u0395\u0394\3\2\2\2\u0396\u0397\3\2\2\2\u0397")
        buf.write("\u0395\3\2\2\2\u0397\u0398\3\2\2\2\u0398\u039f\3\2\2\2")
        buf.write("\u0399\u039b\5\62\32\2\u039a\u039c\7\u00dd\2\2\u039b\u039a")
        buf.write("\3\2\2\2\u039c\u039d\3\2\2\2\u039d\u039b\3\2\2\2\u039d")
        buf.write("\u039e\3\2\2\2\u039e\u03a0\3\2\2\2\u039f\u0399\3\2\2\2")
        buf.write("\u039f\u03a0\3\2\2\2\u03a0\u03a1\3\2\2\2\u03a1\u03c9\7")
        buf.write("X\2\2\u03a2\u03a3\7+\2\2\u03a3\u03a4\7\u00df\2\2\u03a4")
        buf.write("\u03a5\t\4\2\2\u03a5\u03a6\7\u00df\2\2\u03a6\u03a8\5\u00de")
        buf.write("p\2\u03a7\u03a9\7\u00dd\2\2\u03a8\u03a7\3\2\2\2\u03a9")
        buf.write("\u03aa\3\2\2\2\u03aa\u03a8\3\2\2\2\u03aa\u03ab\3\2\2\2")
        buf.write("\u03ab\u03b2\3\2\2\2\u03ac\u03ae\5\62\32\2\u03ad\u03af")
        buf.write("\7\u00dd\2\2\u03ae\u03ad\3\2\2\2\u03af\u03b0\3\2\2\2\u03b0")
        buf.write("\u03ae\3\2\2\2\u03b0\u03b1\3\2\2\2\u03b1\u03b3\3\2\2\2")
        buf.write("\u03b2\u03ac\3\2\2\2\u03b2\u03b3\3\2\2\2\u03b3\u03b4\3")
        buf.write("\2\2\2\u03b4\u03b5\7X\2\2\u03b5\u03c9\3\2\2\2\u03b6\u03b8")
        buf.write("\7+\2\2\u03b7\u03b9\7\u00dd\2\2\u03b8\u03b7\3\2\2\2\u03b9")
        buf.write("\u03ba\3\2\2\2\u03ba\u03b8\3\2\2\2\u03ba\u03bb\3\2\2\2")
        buf.write("\u03bb\u03bc\3\2\2\2\u03bc\u03be\5\62\32\2\u03bd\u03bf")
        buf.write("\7\u00dd\2\2\u03be\u03bd\3\2\2\2\u03bf\u03c0\3\2\2\2\u03c0")
        buf.write("\u03be\3\2\2\2\u03c0\u03c1\3\2\2\2\u03c1\u03c2\3\2\2\2")
        buf.write("\u03c2\u03c3\7X\2\2\u03c3\u03c4\7\u00df\2\2\u03c4\u03c5")
        buf.write("\t\4\2\2\u03c5\u03c6\7\u00df\2\2\u03c6\u03c7\5\u00dep")
        buf.write("\2\u03c7\u03c9\3\2\2\2\u03c8\u0393\3\2\2\2\u03c8\u03a2")
        buf.write("\3\2\2\2\u03c8\u03b6\3\2\2\2\u03c9M\3\2\2\2\u03ca\u03cb")
        buf.write("\78\2\2\u03cbO\3\2\2\2\u03cc\u03cd\5\u012c\u0097\2\u03cd")
        buf.write("\u03ce\7\u00df\2\2\u03ce\u03d0\3\2\2\2\u03cf\u03cc\3\2")
        buf.write("\2\2\u03cf\u03d0\3\2\2\2\u03d0\u03d1\3\2\2\2\u03d1\u03d2")
        buf.write("\7:\2\2\u03d2\u03d3\7\u00df\2\2\u03d3\u03d5\5\u0118\u008d")
        buf.write("\2\u03d4\u03d6\7\u00dd\2\2\u03d5\u03d4\3\2\2\2\u03d6\u03d7")
        buf.write("\3\2\2\2\u03d7\u03d5\3\2\2\2\u03d7\u03d8\3\2\2\2\u03d8")
        buf.write("\u03dc\3\2\2\2\u03d9\u03db\5R*\2\u03da\u03d9\3\2\2\2\u03db")
        buf.write("\u03de\3\2\2\2\u03dc\u03da\3\2\2\2\u03dc\u03dd\3\2\2\2")
        buf.write("\u03dd\u03df\3\2\2\2\u03de\u03dc\3\2\2\2\u03df\u03e0\7")
        buf.write("\60\2\2\u03e0Q\3\2\2\2\u03e1\u03ea\5\u0118\u008d\2\u03e2")
        buf.write("\u03e4\7\u00df\2\2\u03e3\u03e2\3\2\2\2\u03e3\u03e4\3\2")
        buf.write("\2\2\u03e4\u03e5\3\2\2\2\u03e5\u03e7\7\u00bc\2\2\u03e6")
        buf.write("\u03e8\7\u00df\2\2\u03e7\u03e6\3\2\2\2\u03e7\u03e8\3\2")
        buf.write("\2\2\u03e8\u03e9\3\2\2\2\u03e9\u03eb\5\u00dep\2\u03ea")
        buf.write("\u03e3\3\2\2\2\u03ea\u03eb\3\2\2\2\u03eb\u03ed\3\2\2\2")
        buf.write("\u03ec\u03ee\7\u00dd\2\2\u03ed\u03ec\3\2\2\2\u03ee\u03ef")
        buf.write("\3\2\2\2\u03ef\u03ed\3\2\2\2\u03ef\u03f0\3\2\2\2\u03f0")
        buf.write("S\3\2\2\2\u03f1\u03f2\7<\2\2\u03f2\u03f3\7\u00df\2\2\u03f3")
        buf.write("\u03fe\5\u00dep\2\u03f4\u03f6\7\u00df\2\2\u03f5\u03f4")
        buf.write("\3\2\2\2\u03f5\u03f6\3\2\2\2\u03f6\u03f7\3\2\2\2\u03f7")
        buf.write("\u03f9\7\u00b8\2\2\u03f8\u03fa\7\u00df\2\2\u03f9\u03f8")
        buf.write("\3\2\2\2\u03f9\u03fa\3\2\2\2\u03fa\u03fb\3\2\2\2\u03fb")
        buf.write("\u03fd\5\u00dep\2\u03fc\u03f5\3\2\2\2\u03fd\u0400\3\2")
        buf.write("\2\2\u03fe\u03fc\3\2\2\2\u03fe\u03ff\3\2\2\2\u03ffU\3")
        buf.write("\2\2\2\u0400\u03fe\3\2\2\2\u0401\u0402\7=\2\2\u0402\u0403")
        buf.write("\7\u00df\2\2\u0403\u0404\5\u00dep\2\u0404W\3\2\2\2\u0405")
        buf.write("\u0406\5\u0134\u009b\2\u0406\u0407\7\u00df\2\2\u0407\u0409")
        buf.write("\3\2\2\2\u0408\u0405\3\2\2\2\u0408\u0409\3\2\2\2\u0409")
        buf.write("\u040a\3\2\2\2\u040a\u040b\7>\2\2\u040b\u040c\7\u00df")
        buf.write("\2\2\u040c\u040e\5\u0118\u008d\2\u040d\u040f\7\u00df\2")
        buf.write("\2\u040e\u040d\3\2\2\2\u040e\u040f\3\2\2\2\u040f\u0410")
        buf.write("\3\2\2\2\u0410\u0411\5\u010e\u0088\2\u0411Y\3\2\2\2\u0412")
        buf.write("\u0413\t\5\2\2\u0413[\3\2\2\2\u0414\u0415\7E\2\2\u0415")
        buf.write("\u0416\7\u00df\2\2\u0416\u0418\5\u00dep\2\u0417\u0419")
        buf.write("\7\u00df\2\2\u0418\u0417\3\2\2\2\u0418\u0419\3\2\2\2\u0419")
        buf.write("\u041a\3\2\2\2\u041a\u041c\7\u00b8\2\2\u041b\u041d\7\u00df")
        buf.write("\2\2\u041c\u041b\3\2\2\2\u041c\u041d\3\2\2\2\u041d\u041e")
        buf.write("\3\2\2\2\u041e\u041f\5\u00dep\2\u041f]\3\2\2\2\u0420\u0421")
        buf.write("\7G\2\2\u0421\u0422\7\u00df\2\2\u0422\u0423\7-\2\2\u0423")
        buf.write("\u0424\7\u00df\2\2\u0424\u0426\5\u0118\u008d\2\u0425\u0427")
        buf.write("\5\u0132\u009a\2\u0426\u0425\3\2\2\2\u0426\u0427\3\2\2")
        buf.write("\2\u0427\u0428\3\2\2\2\u0428\u0429\7\u00df\2\2\u0429\u042a")
        buf.write("\7P\2\2\u042a\u042b\7\u00df\2\2\u042b\u042d\5\u00dep\2")
        buf.write("\u042c\u042e\7\u00dd\2\2\u042d\u042c\3\2\2\2\u042e\u042f")
        buf.write("\3\2\2\2\u042f\u042d\3\2\2\2\u042f\u0430\3\2\2\2\u0430")
        buf.write("\u0437\3\2\2\2\u0431\u0433\5\62\32\2\u0432\u0434\7\u00dd")
        buf.write("\2\2\u0433\u0432\3\2\2\2\u0434\u0435\3\2\2\2\u0435\u0433")
        buf.write("\3\2\2\2\u0435\u0436\3\2\2\2\u0436\u0438\3\2\2\2\u0437")
        buf.write("\u0431\3\2\2\2\u0437\u0438\3\2\2\2\u0438\u0439\3\2\2\2")
        buf.write("\u0439\u043c\7k\2\2\u043a\u043b\7\u00df\2\2\u043b\u043d")
        buf.write("\5\u0118\u008d\2\u043c\u043a\3\2\2\2\u043c\u043d\3\2\2")
        buf.write("\2\u043d_\3\2\2\2\u043e\u043f\7G\2\2\u043f\u0440\7\u00df")
        buf.write("\2\2\u0440\u0442\5\u00fc\177\2\u0441\u0443\5\u0132\u009a")
        buf.write("\2\u0442\u0441\3\2\2\2\u0442\u0443\3\2\2\2\u0443\u0446")
        buf.write("\3\2\2\2\u0444\u0445\7\u00df\2\2\u0445\u0447\5\u011a\u008e")
        buf.write("\2\u0446\u0444\3\2\2\2\u0446\u0447\3\2\2\2\u0447\u0449")
        buf.write("\3\2\2\2\u0448\u044a\7\u00df\2\2\u0449\u0448\3\2\2\2\u0449")
        buf.write("\u044a\3\2\2\2\u044a\u044b\3\2\2\2\u044b\u044d\7\u00bc")
        buf.write("\2\2\u044c\u044e\7\u00df\2\2\u044d\u044c\3\2\2\2\u044d")
        buf.write("\u044e\3\2\2\2\u044e\u044f\3\2\2\2\u044f\u0450\5\u00de")
        buf.write("p\2\u0450\u0451\7\u00df\2\2\u0451\u0452\7\u00a4\2\2\u0452")
        buf.write("\u0453\7\u00df\2\2\u0453\u0458\5\u00dep\2\u0454\u0455")
        buf.write("\7\u00df\2\2\u0455\u0456\7\u009c\2\2\u0456\u0457\7\u00df")
        buf.write("\2\2\u0457\u0459\5\u00dep\2\u0458\u0454\3\2\2\2\u0458")
        buf.write("\u0459\3\2\2\2\u0459\u045b\3\2\2\2\u045a\u045c\7\u00dd")
        buf.write("\2\2\u045b\u045a\3\2\2\2\u045c\u045d\3\2\2\2\u045d\u045b")
        buf.write("\3\2\2\2\u045d\u045e\3\2\2\2\u045e\u0465\3\2\2\2\u045f")
        buf.write("\u0461\5\62\32\2\u0460\u0462\7\u00dd\2\2\u0461\u0460\3")
        buf.write("\2\2\2\u0462\u0463\3\2\2\2\u0463\u0461\3\2\2\2\u0463\u0464")
        buf.write("\3\2\2\2\u0464\u0466\3\2\2\2\u0465\u045f\3\2\2\2\u0465")
        buf.write("\u0466\3\2\2\2\u0466\u0467\3\2\2\2\u0467\u046d\7k\2\2")
        buf.write("\u0468\u0469\7\u00df\2\2\u0469\u046b\5\u0118\u008d\2\u046a")
        buf.write("\u046c\5\u0132\u009a\2\u046b\u046a\3\2\2\2\u046b\u046c")
        buf.write("\3\2\2\2\u046c\u046e\3\2\2\2\u046d\u0468\3\2\2\2\u046d")
        buf.write("\u046e\3\2\2\2\u046ea\3\2\2\2\u046f\u0470\5\u0134\u009b")
        buf.write("\2\u0470\u0471\7\u00df\2\2\u0471\u0473\3\2\2\2\u0472\u046f")
        buf.write("\3\2\2\2\u0472\u0473\3\2\2\2\u0473\u0476\3\2\2\2\u0474")
        buf.write("\u0475\7\u009b\2\2\u0475\u0477\7\u00df\2\2\u0476\u0474")
        buf.write("\3\2\2\2\u0476\u0477\3\2\2\2\u0477\u0478\3\2\2\2\u0478")
        buf.write("\u0479\7H\2\2\u0479\u047a\7\u00df\2\2\u047a\u047f\5\u0118")
        buf.write("\u008d\2\u047b\u047d\7\u00df\2\2\u047c\u047b\3\2\2\2\u047c")
        buf.write("\u047d\3\2\2\2\u047d\u047e\3\2\2\2\u047e\u0480\5\u010e")
        buf.write("\u0088\2\u047f\u047c\3\2\2\2\u047f\u0480\3\2\2\2\u0480")
        buf.write("\u0483\3\2\2\2\u0481\u0482\7\u00df\2\2\u0482\u0484\5\u011a")
        buf.write("\u008e\2\u0483\u0481\3\2\2\2\u0483\u0484\3\2\2\2\u0484")
        buf.write("\u0486\3\2\2\2\u0485\u0487\7\u00dd\2\2\u0486\u0485\3\2")
        buf.write("\2\2\u0487\u0488\3\2\2\2\u0488\u0486\3\2\2\2\u0488\u0489")
        buf.write("\3\2\2\2\u0489\u0490\3\2\2\2\u048a\u048c\5\62\32\2\u048b")
        buf.write("\u048d\7\u00dd\2\2\u048c\u048b\3\2\2\2\u048d\u048e\3\2")
        buf.write("\2\2\u048e\u048c\3\2\2\2\u048e\u048f\3\2\2\2\u048f\u0491")
        buf.write("\3\2\2\2\u0490\u048a\3\2\2\2\u0490\u0491\3\2\2\2\u0491")
        buf.write("\u0492\3\2\2\2\u0492\u0493\7\61\2\2\u0493c\3\2\2\2\u0494")
        buf.write("\u0495\7I\2\2\u0495\u0496\7\u00df\2\2\u0496\u0498\5\u00de")
        buf.write("p\2\u0497\u0499\7\u00df\2\2\u0498\u0497\3\2\2\2\u0498")
        buf.write("\u0499\3\2\2\2\u0499\u049a\3\2\2\2\u049a\u049c\7\u00b8")
        buf.write("\2\2\u049b\u049d\7\u00df\2\2\u049c\u049b\3\2\2\2\u049c")
        buf.write("\u049d\3\2\2\2\u049d\u049f\3\2\2\2\u049e\u04a0\5\u00de")
        buf.write("p\2\u049f\u049e\3\2\2\2\u049f\u04a0\3\2\2\2\u04a0\u04a2")
        buf.write("\3\2\2\2\u04a1\u04a3\7\u00df\2\2\u04a2\u04a1\3\2\2\2\u04a2")
        buf.write("\u04a3\3\2\2\2\u04a3\u04a4\3\2\2\2\u04a4\u04a6\7\u00b8")
        buf.write("\2\2\u04a5\u04a7\7\u00df\2\2\u04a6\u04a5\3\2\2\2\u04a6")
        buf.write("\u04a7\3\2\2\2\u04a7\u04a8\3\2\2\2\u04a8\u04a9\5\u00de")
        buf.write("p\2\u04a9e\3\2\2\2\u04aa\u04ab\7K\2\2\u04ab\u04ac\7\u00df")
        buf.write("\2\2\u04ac\u04ad\5\u00dep\2\u04adg\3\2\2\2\u04ae\u04af")
        buf.write("\7L\2\2\u04af\u04b0\7\u00df\2\2\u04b0\u04b1\5\u00dep\2")
        buf.write("\u04b1i\3\2\2\2\u04b2\u04b3\7M\2\2\u04b3\u04b4\7\u00df")
        buf.write("\2\2\u04b4\u04b5\5n8\2\u04b5\u04b6\7\u00df\2\2\u04b6\u04b7")
        buf.write("\7\u00a2\2\2\u04b7\u04b8\7\u00df\2\2\u04b8\u04bd\5\64")
        buf.write("\33\2\u04b9\u04ba\7\u00df\2\2\u04ba\u04bb\7.\2\2\u04bb")
        buf.write("\u04bc\7\u00df\2\2\u04bc\u04be\5\64\33\2\u04bd\u04b9\3")
        buf.write("\2\2\2\u04bd\u04be\3\2\2\2\u04be\u04cc\3\2\2\2\u04bf\u04c3")
        buf.write("\5l\67\2\u04c0\u04c2\5p9\2\u04c1\u04c0\3\2\2\2\u04c2\u04c5")
        buf.write("\3\2\2\2\u04c3\u04c1\3\2\2\2\u04c3\u04c4\3\2\2\2\u04c4")
        buf.write("\u04c7\3\2\2\2\u04c5\u04c3\3\2\2\2\u04c6\u04c8\5r:\2\u04c7")
        buf.write("\u04c6\3\2\2\2\u04c7\u04c8\3\2\2\2\u04c8\u04c9\3\2\2\2")
        buf.write("\u04c9\u04ca\7\62\2\2\u04ca\u04cc\3\2\2\2\u04cb\u04b2")
        buf.write("\3\2\2\2\u04cb\u04bf\3\2\2\2\u04cck\3\2\2\2\u04cd\u04ce")
        buf.write("\7M\2\2\u04ce\u04cf\7\u00df\2\2\u04cf\u04d0\5n8\2\u04d0")
        buf.write("\u04d1\7\u00df\2\2\u04d1\u04d3\7\u00a2\2\2\u04d2\u04d4")
        buf.write("\7\u00dd\2\2\u04d3\u04d2\3\2\2\2\u04d4\u04d5\3\2\2\2\u04d5")
        buf.write("\u04d3\3\2\2\2\u04d5\u04d6\3\2\2\2\u04d6\u04dd\3\2\2\2")
        buf.write("\u04d7\u04d9\5\62\32\2\u04d8\u04da\7\u00dd\2\2\u04d9\u04d8")
        buf.write("\3\2\2\2\u04da\u04db\3\2\2\2\u04db\u04d9\3\2\2\2\u04db")
        buf.write("\u04dc\3\2\2\2\u04dc\u04de\3\2\2\2\u04dd\u04d7\3\2\2\2")
        buf.write("\u04dd\u04de\3\2\2\2\u04dem\3\2\2\2\u04df\u04e0\5\u00de")
        buf.write("p\2\u04e0o\3\2\2\2\u04e1\u04e2\7/\2\2\u04e2\u04e3\7\u00df")
        buf.write("\2\2\u04e3\u04e4\5n8\2\u04e4\u04e5\7\u00df\2\2\u04e5\u04e7")
        buf.write("\7\u00a2\2\2\u04e6\u04e8\7\u00dd\2\2\u04e7\u04e6\3\2\2")
        buf.write("\2\u04e8\u04e9\3\2\2\2\u04e9\u04e7\3\2\2\2\u04e9\u04ea")
        buf.write("\3\2\2\2\u04ea\u04f1\3\2\2\2\u04eb\u04ed\5\62\32\2\u04ec")
        buf.write("\u04ee\7\u00dd\2\2\u04ed\u04ec\3\2\2\2\u04ee\u04ef\3\2")
        buf.write("\2\2\u04ef\u04ed\3\2\2\2\u04ef\u04f0\3\2\2\2\u04f0\u04f2")
        buf.write("\3\2\2\2\u04f1\u04eb\3\2\2\2\u04f1\u04f2\3\2\2\2\u04f2")
        buf.write("q\3\2\2\2\u04f3\u04f5\7.\2\2\u04f4\u04f6\7\u00dd\2\2\u04f5")
        buf.write("\u04f4\3\2\2\2\u04f6\u04f7\3\2\2\2\u04f7\u04f5\3\2\2\2")
        buf.write("\u04f7\u04f8\3\2\2\2\u04f8\u04ff\3\2\2\2\u04f9\u04fb\5")
        buf.write("\62\32\2\u04fa\u04fc\7\u00dd\2\2\u04fb\u04fa\3\2\2\2\u04fc")
        buf.write("\u04fd\3\2\2\2\u04fd\u04fb\3\2\2\2\u04fd\u04fe\3\2\2\2")
        buf.write("\u04fe\u0500\3\2\2\2\u04ff\u04f9\3\2\2\2\u04ff\u0500\3")
        buf.write("\2\2\2\u0500s\3\2\2\2\u0501\u0502\7O\2\2\u0502\u0503\7")
        buf.write("\u00df\2\2\u0503\u0504\5\u0118\u008d\2\u0504u\3\2\2\2")
        buf.write("\u0505\u0506\7Q\2\2\u0506\u0507\7\u00df\2\2\u0507\u0510")
        buf.write("\5\u00dep\2\u0508\u050a\7\u00df\2\2\u0509\u0508\3\2\2")
        buf.write("\2\u0509\u050a\3\2\2\2\u050a\u050b\3\2\2\2\u050b\u050d")
        buf.write("\7\u00b8\2\2\u050c\u050e\7\u00df\2\2\u050d\u050c\3\2\2")
        buf.write("\2\u050d\u050e\3\2\2\2\u050e\u050f\3\2\2\2\u050f\u0511")
        buf.write("\5\u00dep\2\u0510\u0509\3\2\2\2\u0511\u0512\3\2\2\2\u0512")
        buf.write("\u0510\3\2\2\2\u0512\u0513\3\2\2\2\u0513w\3\2\2\2\u0514")
        buf.write("\u0515\7T\2\2\u0515\u0516\7\u00df\2\2\u0516\u0517\5\u00de")
        buf.write("p\2\u0517y\3\2\2\2\u0518\u0519\7Z\2\2\u0519\u051b\7\u00df")
        buf.write("\2\2\u051a\u0518\3\2\2\2\u051a\u051b\3\2\2\2\u051b\u051c")
        buf.write("\3\2\2\2\u051c\u051e\5\u00fa~\2\u051d\u051f\7\u00df\2")
        buf.write("\2\u051e\u051d\3\2\2\2\u051e\u051f\3\2\2\2\u051f\u0520")
        buf.write("\3\2\2\2\u0520\u0522\t\6\2\2\u0521\u0523\7\u00df\2\2\u0522")
        buf.write("\u0521\3\2\2\2\u0522\u0523\3\2\2\2\u0523\u0524\3\2\2\2")
        buf.write("\u0524\u0525\5\u00dep\2\u0525{\3\2\2\2\u0526\u0527\7]")
        buf.write("\2\2\u0527\u0528\7\u00df\2\2\u0528\u052a\5\u00dep\2\u0529")
        buf.write("\u052b\7\u00df\2\2\u052a\u0529\3\2\2\2\u052a\u052b\3\2")
        buf.write("\2\2\u052b\u052c\3\2\2\2\u052c\u052e\7\u00b8\2\2\u052d")
        buf.write("\u052f\7\u00df\2\2\u052e\u052d\3\2\2\2\u052e\u052f\3\2")
        buf.write("\2\2\u052f\u0530\3\2\2\2\u0530\u0531\5\u00dep\2\u0531")
        buf.write("}\3\2\2\2\u0532\u0533\7U\2\2\u0533\u0534\7\u00df\2\2\u0534")
        buf.write("\u0535\5\u00dep\2\u0535\177\3\2\2\2\u0536\u0537\7V\2\2")
        buf.write("\u0537\u0538\7\u00df\2\2\u0538\u0547\5\u00dep\2\u0539")
        buf.write("\u053b\7\u00df\2\2\u053a\u0539\3\2\2\2\u053a\u053b\3\2")
        buf.write("\2\2\u053b\u053c\3\2\2\2\u053c\u053e\7\u00b8\2\2\u053d")
        buf.write("\u053f\7\u00df\2\2\u053e\u053d\3\2\2\2\u053e\u053f\3\2")
        buf.write("\2\2\u053f\u0540\3\2\2\2\u0540\u0545\5\u00dep\2\u0541")
        buf.write("\u0542\7\u00df\2\2\u0542\u0543\7\u00a4\2\2\u0543\u0544")
        buf.write("\7\u00df\2\2\u0544\u0546\5\u00dep\2\u0545\u0541\3\2\2")
        buf.write("\2\u0545\u0546\3\2\2\2\u0546\u0548\3\2\2\2\u0547\u053a")
        buf.write("\3\2\2\2\u0547\u0548\3\2\2\2\u0548\u0081\3\2\2\2\u0549")
        buf.write("\u054a\7a\2\2\u054a\u054b\7\u00df\2\2\u054b\u054d\5\u00fa")
        buf.write("~\2\u054c\u054e\7\u00df\2\2\u054d\u054c\3\2\2\2\u054d")
        buf.write("\u054e\3\2\2\2\u054e\u054f\3\2\2\2\u054f\u0551\7\u00bc")
        buf.write("\2\2\u0550\u0552\7\u00df\2\2\u0551\u0550\3\2\2\2\u0551")
        buf.write("\u0552\3\2\2\2\u0552\u0553\3\2\2\2\u0553\u0554\5\u00de")
        buf.write("p\2\u0554\u0083\3\2\2\2\u0555\u0559\5\u0086D\2\u0556\u0558")
        buf.write("\5\u0088E\2\u0557\u0556\3\2\2\2\u0558\u055b\3\2\2\2\u0559")
        buf.write("\u0557\3\2\2\2\u0559\u055a\3\2\2\2\u055a\u055d\3\2\2\2")
        buf.write("\u055b\u0559\3\2\2\2\u055c\u055e\5\u008aF\2\u055d\u055c")
        buf.write("\3\2\2\2\u055d\u055e\3\2\2\2\u055e\u055f\3\2\2\2\u055f")
        buf.write("\u0560\7e\2\2\u0560\u0085\3\2\2\2\u0561\u0562\7b\2\2\u0562")
        buf.write("\u0563\7\u00df\2\2\u0563\u0564\5n8\2\u0564\u0565\7\u00df")
        buf.write("\2\2\u0565\u0567\7\u00a2\2\2\u0566\u0568\7\u00dd\2\2\u0567")
        buf.write("\u0566\3\2\2\2\u0568\u0569\3\2\2\2\u0569\u0567\3\2\2\2")
        buf.write("\u0569\u056a\3\2\2\2\u056a\u0571\3\2\2\2\u056b\u056d\5")
        buf.write("\32\16\2\u056c\u056e\7\u00dd\2\2\u056d\u056c\3\2\2\2\u056e")
        buf.write("\u056f\3\2\2\2\u056f\u056d\3\2\2\2\u056f\u0570\3\2\2\2")
        buf.write("\u0570\u0572\3\2\2\2\u0571\u056b\3\2\2\2\u0571\u0572\3")
        buf.write("\2\2\2\u0572\u0087\3\2\2\2\u0573\u0574\7c\2\2\u0574\u0575")
        buf.write("\7\u00df\2\2\u0575\u0576\5n8\2\u0576\u0577\7\u00df\2\2")
        buf.write("\u0577\u0579\7\u00a2\2\2\u0578\u057a\7\u00dd\2\2\u0579")
        buf.write("\u0578\3\2\2\2\u057a\u057b\3\2\2\2\u057b\u0579\3\2\2\2")
        buf.write("\u057b\u057c\3\2\2\2\u057c\u0583\3\2\2\2\u057d\u057f\5")
        buf.write("\32\16\2\u057e\u0580\7\u00dd\2\2\u057f\u057e\3\2\2\2\u0580")
        buf.write("\u0581\3\2\2\2\u0581\u057f\3\2\2\2\u0581\u0582\3\2\2\2")
        buf.write("\u0582\u0584\3\2\2\2\u0583\u057d\3\2\2\2\u0583\u0584\3")
        buf.write("\2\2\2\u0584\u0089\3\2\2\2\u0585\u0587\7d\2\2\u0586\u0588")
        buf.write("\7\u00dd\2\2\u0587\u0586\3\2\2\2\u0588\u0589\3\2\2\2\u0589")
        buf.write("\u0587\3\2\2\2\u0589\u058a\3\2\2\2\u058a\u0591\3\2\2\2")
        buf.write("\u058b\u058d\5\32\16\2\u058c\u058e\7\u00dd\2\2\u058d\u058c")
        buf.write("\3\2\2\2\u058e\u058f\3\2\2\2\u058f\u058d\3\2\2\2\u058f")
        buf.write("\u0590\3\2\2\2\u0590\u0592\3\2\2\2\u0591\u058b\3\2\2\2")
        buf.write("\u0591\u0592\3\2\2\2\u0592\u008b\3\2\2\2\u0593\u0595\7")
        buf.write("g\2\2\u0594\u0596\7\u00df\2\2\u0595\u0594\3\2\2\2\u0595")
        buf.write("\u0596\3\2\2\2\u0596\u0597\3\2\2\2\u0597\u0599\7\u00c3")
        buf.write("\2\2\u0598\u059a\7\u00df\2\2\u0599\u0598\3\2\2\2\u0599")
        buf.write("\u059a\3\2\2\2\u059a\u059b\3\2\2\2\u059b\u059d\5\u0108")
        buf.write("\u0085\2\u059c\u059e\7\u00df\2\2\u059d\u059c\3\2\2\2\u059d")
        buf.write("\u059e\3\2\2\2\u059e\u059f\3\2\2\2\u059f\u05a0\7\u00ce")
        buf.write("\2\2\u05a0\u008d\3\2\2\2\u05a1\u05a2\7h\2\2\u05a2\u05a3")
        buf.write("\7\u00df\2\2\u05a3\u05a4\5\u00dep\2\u05a4\u008f\3\2\2")
        buf.write("\2\u05a5\u05a6\7j\2\2\u05a6\u05a7\7\u00df\2\2\u05a7\u05a8")
        buf.write("\5\u00dep\2\u05a8\u05a9\7\u00df\2\2\u05a9\u05aa\7\n\2")
        buf.write("\2\u05aa\u05ab\7\u00df\2\2\u05ab\u05ac\5\u00dep\2\u05ac")
        buf.write("\u0091\3\2\2\2\u05ad\u05ae\t\7\2\2\u05ae\u05b8\7\u00df")
        buf.write("\2\2\u05af\u05b0\7L\2\2\u05b0\u05b1\7\u00df\2\2\u05b1")
        buf.write("\u05b3\5\u00dep\2\u05b2\u05b4\7\u00b7\2\2\u05b3\u05b2")
        buf.write("\3\2\2\2\u05b3\u05b4\3\2\2\2\u05b4\u05b9\3\2\2\2\u05b5")
        buf.write("\u05b6\7\u008d\2\2\u05b6\u05b7\7\u00df\2\2\u05b7\u05b9")
        buf.write("\7k\2\2\u05b8\u05af\3\2\2\2\u05b8\u05b5\3\2\2\2\u05b9")
        buf.write("\u0093\3\2\2\2\u05ba\u05bb\7q\2\2\u05bb\u05bc\7\u00df")
        buf.write("\2\2\u05bc\u05bd\5\u00dep\2\u05bd\u05be\7\u00df\2\2\u05be")
        buf.write("\u05bf\7L\2\2\u05bf\u05c0\7\u00df\2\2\u05c0\u05cb\5\u00de")
        buf.write("p\2\u05c1\u05c3\7\u00df\2\2\u05c2\u05c1\3\2\2\2\u05c2")
        buf.write("\u05c3\3\2\2\2\u05c3\u05c4\3\2\2\2\u05c4\u05c6\7\u00b8")
        buf.write("\2\2\u05c5\u05c7\7\u00df\2\2\u05c6\u05c5\3\2\2\2\u05c6")
        buf.write("\u05c7\3\2\2\2\u05c7\u05c8\3\2\2\2\u05c8\u05ca\5\u00de")
        buf.write("p\2\u05c9\u05c2\3\2\2\2\u05ca\u05cd\3\2\2\2\u05cb\u05c9")
        buf.write("\3\2\2\2\u05cb\u05cc\3\2\2\2\u05cc\u0095\3\2\2\2\u05cd")
        buf.write("\u05cb\3\2\2\2\u05ce\u05cf\7q\2\2\u05cf\u05d0\7\u00df")
        buf.write("\2\2\u05d0\u05d1\5\u00dep\2\u05d1\u05d2\7\u00df\2\2\u05d2")
        buf.write("\u05d3\7K\2\2\u05d3\u05d4\7\u00df\2\2\u05d4\u05df\5\u00de")
        buf.write("p\2\u05d5\u05d7\7\u00df\2\2\u05d6\u05d5\3\2\2\2\u05d6")
        buf.write("\u05d7\3\2\2\2\u05d7\u05d8\3\2\2\2\u05d8\u05da\7\u00b8")
        buf.write("\2\2\u05d9\u05db\7\u00df\2\2\u05da\u05d9\3\2\2\2\u05da")
        buf.write("\u05db\3\2\2\2\u05db\u05dc\3\2\2\2\u05dc\u05de\5\u00de")
        buf.write("p\2\u05dd\u05d6\3\2\2\2\u05de\u05e1\3\2\2\2\u05df\u05dd")
        buf.write("\3\2\2\2\u05df\u05e0\3\2\2\2\u05e0\u0097\3\2\2\2\u05e1")
        buf.write("\u05df\3\2\2\2\u05e2\u05e3\7t\2\2\u05e3\u05e4\7\u00df")
        buf.write("\2\2\u05e4\u05e5\5\u00dep\2\u05e5\u05e6\7\u00df\2\2\u05e6")
        buf.write("\u05e7\7G\2\2\u05e7\u05e8\7\u00df\2\2\u05e8\u05ed\t\b")
        buf.write("\2\2\u05e9\u05ea\7\u00df\2\2\u05ea\u05eb\7\3\2\2\u05eb")
        buf.write("\u05ec\7\u00df\2\2\u05ec\u05ee\t\t\2\2\u05ed\u05e9\3\2")
        buf.write("\2\2\u05ed\u05ee\3\2\2\2\u05ee\u05f1\3\2\2\2\u05ef\u05f0")
        buf.write("\7\u00df\2\2\u05f0\u05f2\t\n\2\2\u05f1\u05ef\3\2\2\2\u05f1")
        buf.write("\u05f2\3\2\2\2\u05f2\u05f3\3\2\2\2\u05f3\u05f4\7\u00df")
        buf.write("\2\2\u05f4\u05f5\7\n\2\2\u05f5\u05f6\7\u00df\2\2\u05f6")
        buf.write("\u0601\5\u00dep\2\u05f7\u05f8\7\u00df\2\2\u05f8\u05fa")
        buf.write("\7Y\2\2\u05f9\u05fb\7\u00df\2\2\u05fa\u05f9\3\2\2\2\u05fa")
        buf.write("\u05fb\3\2\2\2\u05fb\u05fc\3\2\2\2\u05fc\u05fe\7\u00bc")
        buf.write("\2\2\u05fd\u05ff\7\u00df\2\2\u05fe\u05fd\3\2\2\2\u05fe")
        buf.write("\u05ff\3\2\2\2\u05ff\u0600\3\2\2\2\u0600\u0602\5\u00de")
        buf.write("p\2\u0601\u05f7\3\2\2\2\u0601\u0602\3\2\2\2\u0602\u0099")
        buf.write("\3\2\2\2\u0603\u0610\5\u009cO\2\u0604\u0606\7\u00df\2")
        buf.write("\2\u0605\u0604\3\2\2\2\u0605\u0606\3\2\2\2\u0606\u0607")
        buf.write("\3\2\2\2\u0607\u0609\t\13\2\2\u0608\u060a\7\u00df\2\2")
        buf.write("\u0609\u0608\3\2\2\2\u0609\u060a\3\2\2\2\u060a\u060c\3")
        buf.write("\2\2\2\u060b\u060d\5\u009cO\2\u060c\u060b\3\2\2\2\u060c")
        buf.write("\u060d\3\2\2\2\u060d\u060f\3\2\2\2\u060e\u0605\3\2\2\2")
        buf.write("\u060f\u0612\3\2\2\2\u0610\u060e\3\2\2\2\u0610\u0611\3")
        buf.write("\2\2\2\u0611\u0625\3\2\2\2\u0612\u0610\3\2\2\2\u0613\u0615")
        buf.write("\5\u009cO\2\u0614\u0613\3\2\2\2\u0614\u0615\3\2\2\2\u0615")
        buf.write("\u0620\3\2\2\2\u0616\u0618\7\u00df\2\2\u0617\u0616\3\2")
        buf.write("\2\2\u0617\u0618\3\2\2\2\u0618\u0619\3\2\2\2\u0619\u061b")
        buf.write("\t\13\2\2\u061a\u061c\7\u00df\2\2\u061b\u061a\3\2\2\2")
        buf.write("\u061b\u061c\3\2\2\2\u061c\u061e\3\2\2\2\u061d\u061f\5")
        buf.write("\u009cO\2\u061e\u061d\3\2\2\2\u061e\u061f\3\2\2\2\u061f")
        buf.write("\u0621\3\2\2\2\u0620\u0617\3\2\2\2\u0621\u0622\3\2\2\2")
        buf.write("\u0622\u0620\3\2\2\2\u0622\u0623\3\2\2\2\u0623\u0625\3")
        buf.write("\2\2\2\u0624\u0603\3\2\2\2\u0624\u0614\3\2\2\2\u0625\u009b")
        buf.write("\3\2\2\2\u0626\u0634\t\f\2\2\u0627\u0629\7\u00df\2\2\u0628")
        buf.write("\u0627\3\2\2\2\u0628\u0629\3\2\2\2\u0629\u062a\3\2\2\2")
        buf.write("\u062a\u062c\7\u00c3\2\2\u062b\u062d\7\u00df\2\2\u062c")
        buf.write("\u062b\3\2\2\2\u062c\u062d\3\2\2\2\u062d\u062e\3\2\2\2")
        buf.write("\u062e\u0630\5\u0108\u0085\2\u062f\u0631\7\u00df\2\2\u0630")
        buf.write("\u062f\3\2\2\2\u0630\u0631\3\2\2\2\u0631\u0632\3\2\2\2")
        buf.write("\u0632\u0633\7\u00ce\2\2\u0633\u0635\3\2\2\2\u0634\u0628")
        buf.write("\3\2\2\2\u0634\u0635\3\2\2\2\u0635\u0638\3\2\2\2\u0636")
        buf.write("\u0638\5\u00dep\2\u0637\u0626\3\2\2\2\u0637\u0636\3\2")
        buf.write("\2\2\u0638\u009d\3\2\2\2\u0639\u063a\7~\2\2\u063a\u063b")
        buf.write("\7\u00df\2\2\u063b\u063d\5\u00dep\2\u063c\u063e\7\u00df")
        buf.write("\2\2\u063d\u063c\3\2\2\2\u063d\u063e\3\2\2\2\u063e\u063f")
        buf.write("\3\2\2\2\u063f\u0644\7\u00b8\2\2\u0640\u0642\7\u00df\2")
        buf.write("\2\u0641\u0640\3\2\2\2\u0641\u0642\3\2\2\2\u0642\u0643")
        buf.write("\3\2\2\2\u0643\u0645\5\u009aN\2\u0644\u0641\3\2\2\2\u0644")
        buf.write("\u0645\3\2\2\2\u0645\u009f\3\2\2\2\u0646\u0647\5\u0134")
        buf.write("\u009b\2\u0647\u0648\7\u00df\2\2\u0648\u064a\3\2\2\2\u0649")
        buf.write("\u0646\3\2\2\2\u0649\u064a\3\2\2\2\u064a\u064d\3\2\2\2")
        buf.write("\u064b\u064c\7\u009b\2\2\u064c\u064e\7\u00df\2\2\u064d")
        buf.write("\u064b\3\2\2\2\u064d\u064e\3\2\2\2\u064e\u064f\3\2\2\2")
        buf.write("\u064f\u0650\7\u0080\2\2\u0650\u0651\7\u00df\2\2\u0651")
        buf.write("\u0653\5\u0118\u008d\2\u0652\u0654\5\u0132\u009a\2\u0653")
        buf.write("\u0652\3\2\2\2\u0653\u0654\3\2\2\2\u0654\u0659\3\2\2\2")
        buf.write("\u0655\u0657\7\u00df\2\2\u0656\u0655\3\2\2\2\u0656\u0657")
        buf.write("\3\2\2\2\u0657\u0658\3\2\2\2\u0658\u065a\5\u010e\u0088")
        buf.write("\2\u0659\u0656\3\2\2\2\u0659\u065a\3\2\2\2\u065a\u065d")
        buf.write("\3\2\2\2\u065b\u065c\7\u00df\2\2\u065c\u065e\5\u011a\u008e")
        buf.write("\2\u065d\u065b\3\2\2\2\u065d\u065e\3\2\2\2\u065e\u0660")
        buf.write("\3\2\2\2\u065f\u0661\7\u00dd\2\2\u0660\u065f\3\2\2\2\u0661")
        buf.write("\u0662\3\2\2\2\u0662\u0660\3\2\2\2\u0662\u0663\3\2\2\2")
        buf.write("\u0663\u066a\3\2\2\2\u0664\u0666\5\62\32\2\u0665\u0667")
        buf.write("\7\u00dd\2\2\u0666\u0665\3\2\2\2\u0667\u0668\3\2\2\2\u0668")
        buf.write("\u0666\3\2\2\2\u0668\u0669\3\2\2\2\u0669\u066b\3\2\2\2")
        buf.write("\u066a\u0664\3\2\2\2\u066a\u066b\3\2\2\2\u066b\u066c\3")
        buf.write("\2\2\2\u066c\u066d\7\63\2\2\u066d\u00a1\3\2\2\2\u066e")
        buf.write("\u066f\5\u0134\u009b\2\u066f\u0670\7\u00df\2\2\u0670\u0672")
        buf.write("\3\2\2\2\u0671\u066e\3\2\2\2\u0671\u0672\3\2\2\2\u0672")
        buf.write("\u0675\3\2\2\2\u0673\u0674\7\u009b\2\2\u0674\u0676\7\u00df")
        buf.write("\2\2\u0675\u0673\3\2\2\2\u0675\u0676\3\2\2\2\u0676\u0677")
        buf.write("\3\2\2\2\u0677\u0678\7\u0082\2\2\u0678\u0679\7\u00df\2")
        buf.write("\2\u0679\u067e\5\u0118\u008d\2\u067a\u067c\7\u00df\2\2")
        buf.write("\u067b\u067a\3\2\2\2\u067b\u067c\3\2\2\2\u067c\u067d\3")
        buf.write("\2\2\2\u067d\u067f\5\u010e\u0088\2\u067e\u067b\3\2\2\2")
        buf.write("\u067e\u067f\3\2\2\2\u067f\u0681\3\2\2\2\u0680\u0682\7")
        buf.write("\u00dd\2\2\u0681\u0680\3\2\2\2\u0682\u0683\3\2\2\2\u0683")
        buf.write("\u0681\3\2\2\2\u0683\u0684\3\2\2\2\u0684\u068b\3\2\2\2")
        buf.write("\u0685\u0687\5\62\32\2\u0686\u0688\7\u00dd\2\2\u0687\u0686")
        buf.write("\3\2\2\2\u0688\u0689\3\2\2\2\u0689\u0687\3\2\2\2\u0689")
        buf.write("\u068a\3\2\2\2\u068a\u068c\3\2\2\2\u068b\u0685\3\2\2\2")
        buf.write("\u068b\u068c\3\2\2\2\u068c\u068d\3\2\2\2\u068d\u068e\7")
        buf.write("\63\2\2\u068e\u00a3\3\2\2\2\u068f\u0690\5\u0134\u009b")
        buf.write("\2\u0690\u0691\7\u00df\2\2\u0691\u0693\3\2\2\2\u0692\u068f")
        buf.write("\3\2\2\2\u0692\u0693\3\2\2\2\u0693\u0696\3\2\2\2\u0694")
        buf.write("\u0695\7\u009b\2\2\u0695\u0697\7\u00df\2\2\u0696\u0694")
        buf.write("\3\2\2\2\u0696\u0697\3\2\2\2\u0697\u0698\3\2\2\2\u0698")
        buf.write("\u0699\7\u0081\2\2\u0699\u069a\7\u00df\2\2\u069a\u069f")
        buf.write("\5\u0118\u008d\2\u069b\u069d\7\u00df\2\2\u069c\u069b\3")
        buf.write("\2\2\2\u069c\u069d\3\2\2\2\u069d\u069e\3\2\2\2\u069e\u06a0")
        buf.write("\5\u010e\u0088\2\u069f\u069c\3\2\2\2\u069f\u06a0\3\2\2")
        buf.write("\2\u06a0\u06a2\3\2\2\2\u06a1\u06a3\7\u00dd\2\2\u06a2\u06a1")
        buf.write("\3\2\2\2\u06a3\u06a4\3\2\2\2\u06a4\u06a2\3\2\2\2\u06a4")
        buf.write("\u06a5\3\2\2\2\u06a5\u06ac\3\2\2\2\u06a6\u06a8\5\62\32")
        buf.write("\2\u06a7\u06a9\7\u00dd\2\2\u06a8\u06a7\3\2\2\2\u06a9\u06aa")
        buf.write("\3\2\2\2\u06aa\u06a8\3\2\2\2\u06aa\u06ab\3\2\2\2\u06ab")
        buf.write("\u06ad\3\2\2\2\u06ac\u06a6\3\2\2\2\u06ac\u06ad\3\2\2\2")
        buf.write("\u06ad\u06ae\3\2\2\2\u06ae\u06af\7\63\2\2\u06af\u00a5")
        buf.write("\3\2\2\2\u06b0\u06b1\7\u0084\2\2\u06b1\u06b2\7\u00df\2")
        buf.write("\2\u06b2\u06b4\5\u00dep\2\u06b3\u06b5\7\u00df\2\2\u06b4")
        buf.write("\u06b3\3\2\2\2\u06b4\u06b5\3\2\2\2\u06b5\u06b6\3\2\2\2")
        buf.write("\u06b6\u06b8\7\u00b8\2\2\u06b7\u06b9\7\u00df\2\2\u06b8")
        buf.write("\u06b7\3\2\2\2\u06b8\u06b9\3\2\2\2\u06b9\u06bb\3\2\2\2")
        buf.write("\u06ba\u06bc\5\u00dep\2\u06bb\u06ba\3\2\2\2\u06bb\u06bc")
        buf.write("\3\2\2\2\u06bc\u06be\3\2\2\2\u06bd\u06bf\7\u00df\2\2\u06be")
        buf.write("\u06bd\3\2\2\2\u06be\u06bf\3\2\2\2\u06bf\u06c0\3\2\2\2")
        buf.write("\u06c0\u06c2\7\u00b8\2\2\u06c1\u06c3\7\u00df\2\2\u06c2")
        buf.write("\u06c1\3\2\2\2\u06c2\u06c3\3\2\2\2\u06c3\u06c4\3\2\2\2")
        buf.write("\u06c4\u06c5\5\u00dep\2\u06c5\u00a7\3\2\2\2\u06c6\u06c7")
        buf.write("\7\u0087\2\2\u06c7\u06c8\7\u00df\2\2\u06c8\u06d7\5\u0118")
        buf.write("\u008d\2\u06c9\u06cb\7\u00df\2\2\u06ca\u06c9\3\2\2\2\u06ca")
        buf.write("\u06cb\3\2\2\2\u06cb\u06cc\3\2\2\2\u06cc\u06ce\7\u00c3")
        buf.write("\2\2\u06cd\u06cf\7\u00df\2\2\u06ce\u06cd\3\2\2\2\u06ce")
        buf.write("\u06cf\3\2\2\2\u06cf\u06d4\3\2\2\2\u06d0\u06d2\5\u0108")
        buf.write("\u0085\2\u06d1\u06d3\7\u00df\2\2\u06d2\u06d1\3\2\2\2\u06d2")
        buf.write("\u06d3\3\2\2\2\u06d3\u06d5\3\2\2\2\u06d4\u06d0\3\2\2\2")
        buf.write("\u06d4\u06d5\3\2\2\2\u06d5\u06d6\3\2\2\2\u06d6\u06d8\7")
        buf.write("\u00ce\2\2\u06d7\u06ca\3\2\2\2\u06d7\u06d8\3\2\2\2\u06d8")
        buf.write("\u00a9\3\2\2\2\u06d9\u06dc\7\u0086\2\2\u06da\u06db\7\u00df")
        buf.write("\2\2\u06db\u06dd\5\u00dep\2\u06dc\u06da\3\2\2\2\u06dc")
        buf.write("\u06dd\3\2\2\2\u06dd\u00ab\3\2\2\2\u06de\u06df\7\u008a")
        buf.write("\2\2\u06df\u06e2\7\u00df\2\2\u06e0\u06e1\7}\2\2\u06e1")
        buf.write("\u06e3\7\u00df\2\2\u06e2\u06e0\3\2\2\2\u06e2\u06e3\3\2")
        buf.write("\2\2\u06e3\u06e4\3\2\2\2\u06e4\u06ef\5\u00aeX\2\u06e5")
        buf.write("\u06e7\7\u00df\2\2\u06e6\u06e5\3\2\2\2\u06e6\u06e7\3\2")
        buf.write("\2\2\u06e7\u06e8\3\2\2\2\u06e8\u06ea\7\u00b8\2\2\u06e9")
        buf.write("\u06eb\7\u00df\2\2\u06ea\u06e9\3\2\2\2\u06ea\u06eb\3\2")
        buf.write("\2\2\u06eb\u06ec\3\2\2\2\u06ec\u06ee\5\u00aeX\2\u06ed")
        buf.write("\u06e6\3\2\2\2\u06ee\u06f1\3\2\2\2\u06ef\u06ed\3\2\2\2")
        buf.write("\u06ef\u06f0\3\2\2\2\u06f0\u00ad\3\2\2\2\u06f1\u06ef\3")
        buf.write("\2\2\2\u06f2\u06f4\5\u00fa~\2\u06f3\u06f5\7\u00df\2\2")
        buf.write("\u06f4\u06f3\3\2\2\2\u06f4\u06f5\3\2\2\2\u06f5\u06f6\3")
        buf.write("\2\2\2\u06f6\u06f8\7\u00c3\2\2\u06f7\u06f9\7\u00df\2\2")
        buf.write("\u06f8\u06f7\3\2\2\2\u06f8\u06f9\3\2\2\2\u06f9\u06fa\3")
        buf.write("\2\2\2\u06fa\u06fc\5\u0114\u008b\2\u06fb\u06fd\7\u00df")
        buf.write("\2\2\u06fc\u06fb\3\2\2\2\u06fc\u06fd\3\2\2\2\u06fd\u06fe")
        buf.write("\3\2\2\2\u06fe\u0701\7\u00ce\2\2\u06ff\u0700\7\u00df\2")
        buf.write("\2\u0700\u0702\5\u011a\u008e\2\u0701\u06ff\3\2\2\2\u0701")
        buf.write("\u0702\3\2\2\2\u0702\u00af\3\2\2\2\u0703\u0704\7\u008c")
        buf.write("\2\2\u0704\u00b1\3\2\2\2\u0705\u070b\7\u008d\2\2\u0706")
        buf.write("\u0709\7\u00df\2\2\u0707\u070a\7k\2\2\u0708\u070a\5\u0118")
        buf.write("\u008d\2\u0709\u0707\3\2\2\2\u0709\u0708\3\2\2\2\u070a")
        buf.write("\u070c\3\2\2\2\u070b\u0706\3\2\2\2\u070b\u070c\3\2\2\2")
        buf.write("\u070c\u00b3\3\2\2\2\u070d\u070e\7\u008e\2\2\u070e\u00b5")
        buf.write("\3\2\2\2\u070f\u0710\7\u008f\2\2\u0710\u0711\7\u00df\2")
        buf.write("\2\u0711\u0712\5\u00dep\2\u0712\u00b7\3\2\2\2\u0713\u0714")
        buf.write("\7\u0090\2\2\u0714\u0715\7\u00df\2\2\u0715\u0717\5\u00fa")
        buf.write("~\2\u0716\u0718\7\u00df\2\2\u0717\u0716\3\2\2\2\u0717")
        buf.write("\u0718\3\2\2\2\u0718\u0719\3\2\2\2\u0719\u071b\7\u00bc")
        buf.write("\2\2\u071a\u071c\7\u00df\2\2\u071b\u071a\3\2\2\2\u071b")
        buf.write("\u071c\3\2\2\2\u071c\u071d\3\2\2\2\u071d\u071e\5\u00de")
        buf.write("p\2\u071e\u00b9\3\2\2\2\u071f\u0720\7\u0091\2\2\u0720")
        buf.write("\u0721\7\u00df\2\2\u0721\u0723\5\u00dep\2\u0722\u0724")
        buf.write("\7\u00df\2\2\u0723\u0722\3\2\2\2\u0723\u0724\3\2\2\2\u0724")
        buf.write("\u0725\3\2\2\2\u0725\u0727\7\u00b8\2\2\u0726\u0728\7\u00df")
        buf.write("\2\2\u0727\u0726\3\2\2\2\u0727\u0728\3\2\2\2\u0728\u0729")
        buf.write("\3\2\2\2\u0729\u072a\5\u00dep\2\u072a\u00bb\3\2\2\2\u072b")
        buf.write("\u072c\7\u0092\2\2\u072c\u072d\7\u00df\2\2\u072d\u072f")
        buf.write("\5\u00dep\2\u072e\u0730\7\u00df\2\2\u072f\u072e\3\2\2")
        buf.write("\2\u072f\u0730\3\2\2\2\u0730\u0731\3\2\2\2\u0731\u0733")
        buf.write("\7\u00b8\2\2\u0732\u0734\7\u00df\2\2\u0733\u0732\3\2\2")
        buf.write("\2\u0733\u0734\3\2\2\2\u0734\u0735\3\2\2\2\u0735\u0737")
        buf.write("\5\u00dep\2\u0736\u0738\7\u00df\2\2\u0737\u0736\3\2\2")
        buf.write("\2\u0737\u0738\3\2\2\2\u0738\u0739\3\2\2\2\u0739\u073b")
        buf.write("\7\u00b8\2\2\u073a\u073c\7\u00df\2\2\u073b\u073a\3\2\2")
        buf.write("\2\u073b\u073c\3\2\2\2\u073c\u073d\3\2\2\2\u073d\u073f")
        buf.write("\5\u00dep\2\u073e\u0740\7\u00df\2\2\u073f\u073e\3\2\2")
        buf.write("\2\u073f\u0740\3\2\2\2\u0740\u0741\3\2\2\2\u0741\u0743")
        buf.write("\7\u00b8\2\2\u0742\u0744\7\u00df\2\2\u0743\u0742\3\2\2")
        buf.write("\2\u0743\u0744\3\2\2\2\u0744\u0745\3\2\2\2\u0745\u0746")
        buf.write("\5\u00dep\2\u0746\u00bd\3\2\2\2\u0747\u0748\7\u0093\2")
        buf.write("\2\u0748\u0749\7\u00df\2\2\u0749\u074b\5\u00dep\2\u074a")
        buf.write("\u074c\7\u00df\2\2\u074b\u074a\3\2\2\2\u074b\u074c\3\2")
        buf.write("\2\2\u074c\u074d\3\2\2\2\u074d\u074f\7\u00b8\2\2\u074e")
        buf.write("\u0750\7\u00df\2\2\u074f\u074e\3\2\2\2\u074f\u0750\3\2")
        buf.write("\2\2\u0750\u0751\3\2\2\2\u0751\u0752\5\u00dep\2\u0752")
        buf.write("\u00bf\3\2\2\2\u0753\u0754\7\u0094\2\2\u0754\u0755\7\u00df")
        buf.write("\2\2\u0755\u0756\7\24\2\2\u0756\u0757\7\u00df\2\2\u0757")
        buf.write("\u0759\5\u00dep\2\u0758\u075a\7\u00dd\2\2\u0759\u0758")
        buf.write("\3\2\2\2\u075a\u075b\3\2\2\2\u075b\u0759\3\2\2\2\u075b")
        buf.write("\u075c\3\2\2\2\u075c\u0760\3\2\2\2\u075d\u075f\5\u00c2")
        buf.write("b\2\u075e\u075d\3\2\2\2\u075f\u0762\3\2\2\2\u0760\u075e")
        buf.write("\3\2\2\2\u0760\u0761\3\2\2\2\u0761\u0764\3\2\2\2\u0762")
        buf.write("\u0760\3\2\2\2\u0763\u0765\7\u00df\2\2\u0764\u0763\3\2")
        buf.write("\2\2\u0764\u0765\3\2\2\2\u0765\u0766\3\2\2\2\u0766\u0767")
        buf.write("\7\64\2\2\u0767\u00c1\3\2\2\2\u0768\u0769\7\24\2\2\u0769")
        buf.write("\u076a\7\u00df\2\2\u076a\u076c\5\u00c4c\2\u076b\u076d")
        buf.write("\7\u00df\2\2\u076c\u076b\3\2\2\2\u076c\u076d\3\2\2\2\u076d")
        buf.write("\u077c\3\2\2\2\u076e\u0770\7\u00b7\2\2\u076f\u076e\3\2")
        buf.write("\2\2\u076f\u0770\3\2\2\2\u0770\u0774\3\2\2\2\u0771\u0773")
        buf.write("\7\u00dd\2\2\u0772\u0771\3\2\2\2\u0773\u0776\3\2\2\2\u0774")
        buf.write("\u0772\3\2\2\2\u0774\u0775\3\2\2\2\u0775\u077d\3\2\2\2")
        buf.write("\u0776\u0774\3\2\2\2\u0777\u0779\7\u00dd\2\2\u0778\u0777")
        buf.write("\3\2\2\2\u0779\u077a\3\2\2\2\u077a\u0778\3\2\2\2\u077a")
        buf.write("\u077b\3\2\2\2\u077b\u077d\3\2\2\2\u077c\u076f\3\2\2\2")
        buf.write("\u077c\u0778\3\2\2\2\u077d\u0784\3\2\2\2\u077e\u0780\5")
        buf.write("\62\32\2\u077f\u0781\7\u00dd\2\2\u0780\u077f\3\2\2\2\u0781")
        buf.write("\u0782\3\2\2\2\u0782\u0780\3\2\2\2\u0782\u0783\3\2\2\2")
        buf.write("\u0783\u0785\3\2\2\2\u0784\u077e\3\2\2\2\u0784\u0785\3")
        buf.write("\2\2\2\u0785\u00c3\3\2\2\2\u0786\u0796\7.\2\2\u0787\u0792")
        buf.write("\5\u00c6d\2\u0788\u078a\7\u00df\2\2\u0789\u0788\3\2\2")
        buf.write("\2\u0789\u078a\3\2\2\2\u078a\u078b\3\2\2\2\u078b\u078d")
        buf.write("\7\u00b8\2\2\u078c\u078e\7\u00df\2\2\u078d\u078c\3\2\2")
        buf.write("\2\u078d\u078e\3\2\2\2\u078e\u078f\3\2\2\2\u078f\u0791")
        buf.write("\5\u00c6d\2\u0790\u0789\3\2\2\2\u0791\u0794\3\2\2\2\u0792")
        buf.write("\u0790\3\2\2\2\u0792\u0793\3\2\2\2\u0793\u0796\3\2\2\2")
        buf.write("\u0794\u0792\3\2\2\2\u0795\u0786\3\2\2\2\u0795\u0787\3")
        buf.write("\2\2\2\u0796\u00c5\3\2\2\2\u0797\u0799\7R\2\2\u0798\u079a")
        buf.write("\7\u00df\2\2\u0799\u0798\3\2\2\2\u0799\u079a\3\2\2\2\u079a")
        buf.write("\u079b\3\2\2\2\u079b\u079d\5\u0120\u0091\2\u079c\u079e")
        buf.write("\7\u00df\2\2\u079d\u079c\3\2\2\2\u079d\u079e\3\2\2\2\u079e")
        buf.write("\u079f\3\2\2\2\u079f\u07a0\5\u00dep\2\u07a0\u07a9\3\2")
        buf.write("\2\2\u07a1\u07a9\5\u00dep\2\u07a2\u07a3\5\u00dep\2\u07a3")
        buf.write("\u07a4\7\u00df\2\2\u07a4\u07a5\7\u00a4\2\2\u07a5\u07a6")
        buf.write("\7\u00df\2\2\u07a6\u07a7\5\u00dep\2\u07a7\u07a9\3\2\2")
        buf.write("\2\u07a8\u0797\3\2\2\2\u07a8\u07a1\3\2\2\2\u07a8\u07a2")
        buf.write("\3\2\2\2\u07a9\u00c7\3\2\2\2\u07aa\u07ab\7\u0095\2\2\u07ab")
        buf.write("\u07ac\7\u00df\2\2\u07ac\u07b5\5\u00dep\2\u07ad\u07af")
        buf.write("\7\u00df\2\2\u07ae\u07ad\3\2\2\2\u07ae\u07af\3\2\2\2\u07af")
        buf.write("\u07b0\3\2\2\2\u07b0\u07b2\7\u00b8\2\2\u07b1\u07b3\7\u00df")
        buf.write("\2\2\u07b2\u07b1\3\2\2\2\u07b2\u07b3\3\2\2\2\u07b3\u07b4")
        buf.write("\3\2\2\2\u07b4\u07b6\5\u00dep\2\u07b5\u07ae\3\2\2\2\u07b5")
        buf.write("\u07b6\3\2\2\2\u07b6\u00c9\3\2\2\2\u07b7\u07b8\7\u0097")
        buf.write("\2\2\u07b8\u07b9\7\u00df\2\2\u07b9\u07bb\5\u00dep\2\u07ba")
        buf.write("\u07bc\7\u00df\2\2\u07bb\u07ba\3\2\2\2\u07bb\u07bc\3\2")
        buf.write("\2\2\u07bc\u07bd\3\2\2\2\u07bd\u07bf\7\u00b8\2\2\u07be")
        buf.write("\u07c0\7\u00df\2\2\u07bf\u07be\3\2\2\2\u07bf\u07c0\3\2")
        buf.write("\2\2\u07c0\u07c1\3\2\2\2\u07c1\u07c2\5\u00dep\2\u07c2")
        buf.write("\u00cb\3\2\2\2\u07c3\u07c4\7\u0096\2\2\u07c4\u07c5\7\u00df")
        buf.write("\2\2\u07c5\u07c7\5\u00fa~\2\u07c6\u07c8\7\u00df\2\2\u07c7")
        buf.write("\u07c6\3\2\2\2\u07c7\u07c8\3\2\2\2\u07c8\u07c9\3\2\2\2")
        buf.write("\u07c9\u07cb\7\u00bc\2\2\u07ca\u07cc\7\u00df\2\2\u07cb")
        buf.write("\u07ca\3\2\2\2\u07cb\u07cc\3\2\2\2\u07cc\u07cd\3\2\2\2")
        buf.write("\u07cd\u07ce\5\u00dep\2\u07ce\u00cd\3\2\2\2\u07cf\u07d0")
        buf.write("\7\u009d\2\2\u07d0\u00cf\3\2\2\2\u07d1\u07d2\5\u0134\u009b")
        buf.write("\2\u07d2\u07d3\7\u00df\2\2\u07d3\u07d5\3\2\2\2\u07d4\u07d1")
        buf.write("\3\2\2\2\u07d4\u07d5\3\2\2\2\u07d5\u07d8\3\2\2\2\u07d6")
        buf.write("\u07d7\7\u009b\2\2\u07d7\u07d9\7\u00df\2\2\u07d8\u07d6")
        buf.write("\3\2\2\2\u07d8\u07d9\3\2\2\2\u07d9\u07da\3\2\2\2\u07da")
        buf.write("\u07db\7\u009f\2\2\u07db\u07dc\7\u00df\2\2\u07dc\u07e1")
        buf.write("\5\u0118\u008d\2\u07dd\u07df\7\u00df\2\2\u07de\u07dd\3")
        buf.write("\2\2\2\u07de\u07df\3\2\2\2\u07df\u07e0\3\2\2\2\u07e0\u07e2")
        buf.write("\5\u010e\u0088\2\u07e1\u07de\3\2\2\2\u07e1\u07e2\3\2\2")
        buf.write("\2\u07e2\u07e4\3\2\2\2\u07e3\u07e5\7\u00dd\2\2\u07e4\u07e3")
        buf.write("\3\2\2\2\u07e5\u07e6\3\2\2\2\u07e6\u07e4\3\2\2\2\u07e6")
        buf.write("\u07e7\3\2\2\2\u07e7\u07ee\3\2\2\2\u07e8\u07ea\5\62\32")
        buf.write("\2\u07e9\u07eb\7\u00dd\2\2\u07ea\u07e9\3\2\2\2\u07eb\u07ec")
        buf.write("\3\2\2\2\u07ec\u07ea\3\2\2\2\u07ec\u07ed\3\2\2\2\u07ed")
        buf.write("\u07ef\3\2\2\2\u07ee\u07e8\3\2\2\2\u07ee\u07ef\3\2\2\2")
        buf.write("\u07ef\u07f0\3\2\2\2\u07f0\u07f1\7\65\2\2\u07f1\u00d1")
        buf.write("\3\2\2\2\u07f2\u07f4\7\u00a3\2\2\u07f3\u07f5\7\u00df\2")
        buf.write("\2\u07f4\u07f3\3\2\2\2\u07f4\u07f5\3\2\2\2\u07f5\u07f6")
        buf.write("\3\2\2\2\u07f6\u07f8\7\u00bc\2\2\u07f7\u07f9\7\u00df\2")
        buf.write("\2\u07f8\u07f7\3\2\2\2\u07f8\u07f9\3\2\2\2\u07f9\u07fa")
        buf.write("\3\2\2\2\u07fa\u07fb\5\u00dep\2\u07fb\u00d3\3\2\2\2\u07fc")
        buf.write("\u07fd\5\u0134\u009b\2\u07fd\u07fe\7\u00df\2\2\u07fe\u0800")
        buf.write("\3\2\2\2\u07ff\u07fc\3\2\2\2\u07ff\u0800\3\2\2\2\u0800")
        buf.write("\u0801\3\2\2\2\u0801\u0802\7\u00a6\2\2\u0802\u0803\7\u00df")
        buf.write("\2\2\u0803\u0805\5\u0118\u008d\2\u0804\u0806\7\u00dd\2")
        buf.write("\2\u0805\u0804\3\2\2\2\u0806\u0807\3\2\2\2\u0807\u0805")
        buf.write("\3\2\2\2\u0807\u0808\3\2\2\2\u0808\u080c\3\2\2\2\u0809")
        buf.write("\u080b\5\u00d6l\2\u080a\u0809\3\2\2\2\u080b\u080e\3\2")
        buf.write("\2\2\u080c\u080a\3\2\2\2\u080c\u080d\3\2\2\2\u080d\u080f")
        buf.write("\3\2\2\2\u080e\u080c\3\2\2\2\u080f\u0810\7\66\2\2\u0810")
        buf.write("\u00d5\3\2\2\2\u0811\u0820\5\u0118\u008d\2\u0812\u0814")
        buf.write("\7\u00df\2\2\u0813\u0812\3\2\2\2\u0813\u0814\3\2\2\2\u0814")
        buf.write("\u0815\3\2\2\2\u0815\u081a\7\u00c3\2\2\u0816\u0818\7\u00df")
        buf.write("\2\2\u0817\u0816\3\2\2\2\u0817\u0818\3\2\2\2\u0818\u0819")
        buf.write("\3\2\2\2\u0819\u081b\5\u0114\u008b\2\u081a\u0817\3\2\2")
        buf.write("\2\u081a\u081b\3\2\2\2\u081b\u081d\3\2\2\2\u081c\u081e")
        buf.write("\7\u00df\2\2\u081d\u081c\3\2\2\2\u081d\u081e\3\2\2\2\u081e")
        buf.write("\u081f\3\2\2\2\u081f\u0821\7\u00ce\2\2\u0820\u0813\3\2")
        buf.write("\2\2\u0820\u0821\3\2\2\2\u0821\u0824\3\2\2\2\u0822\u0823")
        buf.write("\7\u00df\2\2\u0823\u0825\5\u011a\u008e\2\u0824\u0822\3")
        buf.write("\2\2\2\u0824\u0825\3\2\2\2\u0825\u0827\3\2\2\2\u0826\u0828")
        buf.write("\7\u00dd\2\2\u0827\u0826\3\2\2\2\u0828\u0829\3\2\2\2\u0829")
        buf.write("\u0827\3\2\2\2\u0829\u082a\3\2\2\2\u082a\u00d7\3\2\2\2")
        buf.write("\u082b\u082c\7\u00a7\2\2\u082c\u082d\7\u00df\2\2\u082d")
        buf.write("\u0832\5\u00dep\2\u082e\u082f\7\u00df\2\2\u082f\u0830")
        buf.write("\7R\2\2\u0830\u0831\7\u00df\2\2\u0831\u0833\5\u0130\u0099")
        buf.write("\2\u0832\u082e\3\2\2\2\u0832\u0833\3\2\2\2\u0833\u00d9")
        buf.write("\3\2\2\2\u0834\u0835\7\u00a8\2\2\u0835\u0836\7\u00df\2")
        buf.write("\2\u0836\u0837\5\u00dep\2\u0837\u00db\3\2\2\2\u0838\u0839")
        buf.write("\7\u00a9\2\2\u0839\u083a\7\u00df\2\2\u083a\u0849\5\u00de")
        buf.write("p\2\u083b\u083d\7\u00df\2\2\u083c\u083b\3\2\2\2\u083c")
        buf.write("\u083d\3\2\2\2\u083d\u083e\3\2\2\2\u083e\u0840\7\u00b8")
        buf.write("\2\2\u083f\u0841\7\u00df\2\2\u0840\u083f\3\2\2\2\u0840")
        buf.write("\u0841\3\2\2\2\u0841\u0842\3\2\2\2\u0842\u0847\5\u00de")
        buf.write("p\2\u0843\u0844\7\u00df\2\2\u0844\u0845\7\u00a4\2\2\u0845")
        buf.write("\u0846\7\u00df\2\2\u0846\u0848\5\u00dep\2\u0847\u0843")
        buf.write("\3\2\2\2\u0847\u0848\3\2\2\2\u0848\u084a\3\2\2\2\u0849")
        buf.write("\u083c\3\2\2\2\u0849\u084a\3\2\2\2\u084a\u00dd\3\2\2\2")
        buf.write("\u084b\u084c\bp\1\2\u084c\u0891\5\u012a\u0096\2\u084d")
        buf.write("\u084f\7\u00c3\2\2\u084e\u0850\7\u00df\2\2\u084f\u084e")
        buf.write("\3\2\2\2\u084f\u0850\3\2\2\2\u0850\u0851\3\2\2\2\u0851")
        buf.write("\u085c\5\u00dep\2\u0852\u0854\7\u00df\2\2\u0853\u0852")
        buf.write("\3\2\2\2\u0853\u0854\3\2\2\2\u0854\u0855\3\2\2\2\u0855")
        buf.write("\u0857\7\u00b8\2\2\u0856\u0858\7\u00df\2\2\u0857\u0856")
        buf.write("\3\2\2\2\u0857\u0858\3\2\2\2\u0858\u0859\3\2\2\2\u0859")
        buf.write("\u085b\5\u00dep\2\u085a\u0853\3\2\2\2\u085b\u085e\3\2")
        buf.write("\2\2\u085c\u085a\3\2\2\2\u085c\u085d\3\2\2\2\u085d\u0860")
        buf.write("\3\2\2\2\u085e\u085c\3\2\2\2\u085f\u0861\7\u00df\2\2\u0860")
        buf.write("\u085f\3\2\2\2\u0860\u0861\3\2\2\2\u0861\u0862\3\2\2\2")
        buf.write("\u0862\u0863\7\u00ce\2\2\u0863\u0891\3\2\2\2\u0864\u0865")
        buf.write("\7l\2\2\u0865\u0866\7\u00df\2\2\u0866\u0891\5\u00dep\37")
        buf.write("\u0867\u0891\5\u00d8m\2\u0868\u0869\7\4\2\2\u0869\u086a")
        buf.write("\7\u00df\2\2\u086a\u0891\5\u00dep\35\u086b\u086d\5\u00fa")
        buf.write("~\2\u086c\u086e\7\u00df\2\2\u086d\u086c\3\2\2\2\u086d")
        buf.write("\u086e\3\2\2\2\u086e\u086f\3\2\2\2\u086f\u0871\7\u00b5")
        buf.write("\2\2\u0870\u0872\7\u00df\2\2\u0871\u0870\3\2\2\2\u0871")
        buf.write("\u0872\3\2\2\2\u0872\u0873\3\2\2\2\u0873\u0874\5\u00de")
        buf.write("p\34\u0874\u0891\3\2\2\2\u0875\u0877\7\u00c5\2\2\u0876")
        buf.write("\u0878\7\u00df\2\2\u0877\u0876\3\2\2\2\u0877\u0878\3\2")
        buf.write("\2\2\u0878\u0879\3\2\2\2\u0879\u0891\5\u00dep\32\u087a")
        buf.write("\u087c\7\u00ca\2\2\u087b\u087d\7\u00df\2\2\u087c\u087b")
        buf.write("\3\2\2\2\u087c\u087d\3\2\2\2\u087d\u087e\3\2\2\2\u087e")
        buf.write("\u0891\5\u00dep\31\u087f\u088c\7m\2\2\u0880\u0881\7\u00df")
        buf.write("\2\2\u0881\u088d\5\u00dep\2\u0882\u0884\7\u00c3\2\2\u0883")
        buf.write("\u0885\7\u00df\2\2\u0884\u0883\3\2\2\2\u0884\u0885\3\2")
        buf.write("\2\2\u0885\u0886\3\2\2\2\u0886\u0888\5\u00dep\2\u0887")
        buf.write("\u0889\7\u00df\2\2\u0888\u0887\3\2\2\2\u0888\u0889\3\2")
        buf.write("\2\2\u0889\u088a\3\2\2\2\u088a\u088b\7\u00ce\2\2\u088b")
        buf.write("\u088d\3\2\2\2\u088c\u0880\3\2\2\2\u088c\u0882\3\2\2\2")
        buf.write("\u088d\u0891\3\2\2\2\u088e\u0891\5\u00fa~\2\u088f\u0891")
        buf.write("\5\u008cG\2\u0890\u084b\3\2\2\2\u0890\u084d\3\2\2\2\u0890")
        buf.write("\u0864\3\2\2\2\u0890\u0867\3\2\2\2\u0890\u0868\3\2\2\2")
        buf.write("\u0890\u086b\3\2\2\2\u0890\u0875\3\2\2\2\u0890\u087a\3")
        buf.write("\2\2\2\u0890\u087f\3\2\2\2\u0890\u088e\3\2\2\2\u0890\u088f")
        buf.write("\3\2\2\2\u0891\u0940\3\2\2\2\u0892\u0894\f\33\2\2\u0893")
        buf.write("\u0895\7\u00df\2\2\u0894\u0893\3\2\2\2\u0894\u0895\3\2")
        buf.write("\2\2\u0895\u0896\3\2\2\2\u0896\u0898\7\u00cc\2\2\u0897")
        buf.write("\u0899\7\u00df\2\2\u0898\u0897\3\2\2\2\u0898\u0899\3\2")
        buf.write("\2\2\u0899\u089a\3\2\2\2\u089a\u093f\5\u00dep\34\u089b")
        buf.write("\u089d\f\30\2\2\u089c\u089e\7\u00df\2\2\u089d\u089c\3")
        buf.write("\2\2\2\u089d\u089e\3\2\2\2\u089e\u089f\3\2\2\2\u089f\u08a1")
        buf.write("\7\u00b9\2\2\u08a0\u08a2\7\u00df\2\2\u08a1\u08a0\3\2\2")
        buf.write("\2\u08a1\u08a2\3\2\2\2\u08a2\u08a3\3\2\2\2\u08a3\u093f")
        buf.write("\5\u00dep\31\u08a4\u08a6\f\27\2\2\u08a5\u08a7\7\u00df")
        buf.write("\2\2\u08a6\u08a5\3\2\2\2\u08a6\u08a7\3\2\2\2\u08a7\u08a8")
        buf.write("\3\2\2\2\u08a8\u08aa\7\u00c7\2\2\u08a9\u08ab\7\u00df\2")
        buf.write("\2\u08aa\u08a9\3\2\2\2\u08aa\u08ab\3\2\2\2\u08ab\u08ac")
        buf.write("\3\2\2\2\u08ac\u093f\5\u00dep\30\u08ad\u08af\f\26\2\2")
        buf.write("\u08ae\u08b0\7\u00df\2\2\u08af\u08ae\3\2\2\2\u08af\u08b0")
        buf.write("\3\2\2\2\u08b0\u08b1\3\2\2\2\u08b1\u08b3\7i\2\2\u08b2")
        buf.write("\u08b4\7\u00df\2\2\u08b3\u08b2\3\2\2\2\u08b3\u08b4\3\2")
        buf.write("\2\2\u08b4\u08b5\3\2\2\2\u08b5\u093f\5\u00dep\27\u08b6")
        buf.write("\u08b8\f\25\2\2\u08b7\u08b9\7\u00df\2\2\u08b8\u08b7\3")
        buf.write("\2\2\2\u08b8\u08b9\3\2\2\2\u08b9\u08ba\3\2\2\2\u08ba\u08bc")
        buf.write("\7\u00ca\2\2\u08bb\u08bd\7\u00df\2\2\u08bc\u08bb\3\2\2")
        buf.write("\2\u08bc\u08bd\3\2\2\2\u08bd\u08be\3\2\2\2\u08be\u093f")
        buf.write("\5\u00dep\26\u08bf\u08c1\f\24\2\2\u08c0\u08c2\7\u00df")
        buf.write("\2\2\u08c1\u08c0\3\2\2\2\u08c1\u08c2\3\2\2\2\u08c2\u08c3")
        buf.write("\3\2\2\2\u08c3\u08c5\7\u00c5\2\2\u08c4\u08c6\7\u00df\2")
        buf.write("\2\u08c5\u08c4\3\2\2\2\u08c5\u08c6\3\2\2\2\u08c6\u08c7")
        buf.write("\3\2\2\2\u08c7\u093f\5\u00dep\25\u08c8\u08ca\f\23\2\2")
        buf.write("\u08c9\u08cb\7\u00df\2\2\u08ca\u08c9\3\2\2\2\u08ca\u08cb")
        buf.write("\3\2\2\2\u08cb\u08cc\3\2\2\2\u08cc\u08ce\7\u00b4\2\2\u08cd")
        buf.write("\u08cf\7\u00df\2\2\u08ce\u08cd\3\2\2\2\u08ce\u08cf\3\2")
        buf.write("\2\2\u08cf\u08d0\3\2\2\2\u08d0\u093f\5\u00dep\24\u08d1")
        buf.write("\u08d3\f\22\2\2\u08d2\u08d4\7\u00df\2\2\u08d3\u08d2\3")
        buf.write("\2\2\2\u08d3\u08d4\3\2\2\2\u08d4\u08d5\3\2\2\2\u08d5\u08d7")
        buf.write("\7\u00bc\2\2\u08d6\u08d8\7\u00df\2\2\u08d7\u08d6\3\2\2")
        buf.write("\2\u08d7\u08d8\3\2\2\2\u08d8\u08d9\3\2\2\2\u08d9\u093f")
        buf.write("\5\u00dep\23\u08da\u08dc\f\21\2\2\u08db\u08dd\7\u00df")
        buf.write("\2\2\u08dc\u08db\3\2\2\2\u08dc\u08dd\3\2\2\2\u08dd\u08de")
        buf.write("\3\2\2\2\u08de\u08e0\7\u00c8\2\2\u08df\u08e1\7\u00df\2")
        buf.write("\2\u08e0\u08df\3\2\2\2\u08e0\u08e1\3\2\2\2\u08e1\u08e2")
        buf.write("\3\2\2\2\u08e2\u093f\5\u00dep\22\u08e3\u08e5\f\20\2\2")
        buf.write("\u08e4\u08e6\7\u00df\2\2\u08e5\u08e4\3\2\2\2\u08e5\u08e6")
        buf.write("\3\2\2\2\u08e6\u08e7\3\2\2\2\u08e7\u08e9\7\u00c4\2\2\u08e8")
        buf.write("\u08ea\7\u00df\2\2\u08e9\u08e8\3\2\2\2\u08e9\u08ea\3\2")
        buf.write("\2\2\u08ea\u08eb\3\2\2\2\u08eb\u093f\5\u00dep\21\u08ec")
        buf.write("\u08ee\f\17\2\2\u08ed\u08ef\7\u00df\2\2\u08ee\u08ed\3")
        buf.write("\2\2\2\u08ee\u08ef\3\2\2\2\u08ef\u08f0\3\2\2\2\u08f0\u08f2")
        buf.write("\7\u00bf\2\2\u08f1\u08f3\7\u00df\2\2\u08f2\u08f1\3\2\2")
        buf.write("\2\u08f2\u08f3\3\2\2\2\u08f3\u08f4\3\2\2\2\u08f4\u093f")
        buf.write("\5\u00dep\20\u08f5\u08f7\f\16\2\2\u08f6\u08f8\7\u00df")
        buf.write("\2\2\u08f7\u08f6\3\2\2\2\u08f7\u08f8\3\2\2\2\u08f8\u08f9")
        buf.write("\3\2\2\2\u08f9\u08fb\7\u00c1\2\2\u08fa\u08fc\7\u00df\2")
        buf.write("\2\u08fb\u08fa\3\2\2\2\u08fb\u08fc\3\2\2\2\u08fc\u08fd")
        buf.write("\3\2\2\2\u08fd\u093f\5\u00dep\17\u08fe\u0900\f\r\2\2\u08ff")
        buf.write("\u0901\7\u00df\2\2\u0900\u08ff\3\2\2\2\u0900\u0901\3\2")
        buf.write("\2\2\u0901\u0902\3\2\2\2\u0902\u0904\7\u00be\2\2\u0903")
        buf.write("\u0905\7\u00df\2\2\u0904\u0903\3\2\2\2\u0904\u0905\3\2")
        buf.write("\2\2\u0905\u0906\3\2\2\2\u0906\u093f\5\u00dep\16\u0907")
        buf.write("\u0908\f\f\2\2\u0908\u0909\7\u00df\2\2\u0909\u090a\7\\")
        buf.write("\2\2\u090a\u090b\7\u00df\2\2\u090b\u093f\5\u00dep\r\u090c")
        buf.write("\u090d\f\13\2\2\u090d\u090e\7\u00df\2\2\u090e\u090f\7")
        buf.write("R\2\2\u090f\u0910\7\u00df\2\2\u0910\u093f\5\u00dep\f\u0911")
        buf.write("\u0913\f\t\2\2\u0912\u0914\7\u00df\2\2\u0913\u0912\3\2")
        buf.write("\2\2\u0913\u0914\3\2\2\2\u0914\u0915\3\2\2\2\u0915\u0917")
        buf.write("\7\6\2\2\u0916\u0918\7\u00df\2\2\u0917\u0916\3\2\2\2\u0917")
        buf.write("\u0918\3\2\2\2\u0918\u0919\3\2\2\2\u0919\u093f\5\u00de")
        buf.write("p\n\u091a\u091c\f\b\2\2\u091b\u091d\7\u00df\2\2\u091c")
        buf.write("\u091b\3\2\2\2\u091c\u091d\3\2\2\2\u091d\u091e\3\2\2\2")
        buf.write("\u091e\u0920\7z\2\2\u091f\u0921\7\u00df\2\2\u0920\u091f")
        buf.write("\3\2\2\2\u0920\u0921\3\2\2\2\u0921\u0922\3\2\2\2\u0922")
        buf.write("\u093f\5\u00dep\t\u0923\u0925\f\7\2\2\u0924\u0926\7\u00df")
        buf.write("\2\2\u0925\u0924\3\2\2\2\u0925\u0926\3\2\2\2\u0926\u0927")
        buf.write("\3\2\2\2\u0927\u0929\7\u00b3\2\2\u0928\u092a\7\u00df\2")
        buf.write("\2\u0929\u0928\3\2\2\2\u0929\u092a\3\2\2\2\u092a\u092b")
        buf.write("\3\2\2\2\u092b\u093f\5\u00dep\b\u092c\u092e\f\6\2\2\u092d")
        buf.write("\u092f\7\u00df\2\2\u092e\u092d\3\2\2\2\u092e\u092f\3\2")
        buf.write("\2\2\u092f\u0930\3\2\2\2\u0930\u0932\7;\2\2\u0931\u0933")
        buf.write("\7\u00df\2\2\u0932\u0931\3\2\2\2\u0932\u0933\3\2\2\2\u0933")
        buf.write("\u0934\3\2\2\2\u0934\u093f\5\u00dep\7\u0935\u0937\f\5")
        buf.write("\2\2\u0936\u0938\7\u00df\2\2\u0937\u0936\3\2\2\2\u0937")
        buf.write("\u0938\3\2\2\2\u0938\u0939\3\2\2\2\u0939\u093b\7N\2\2")
        buf.write("\u093a\u093c\7\u00df\2\2\u093b\u093a\3\2\2\2\u093b\u093c")
        buf.write("\3\2\2\2\u093c\u093d\3\2\2\2\u093d\u093f\5\u00dep\6\u093e")
        buf.write("\u0892\3\2\2\2\u093e\u089b\3\2\2\2\u093e\u08a4\3\2\2\2")
        buf.write("\u093e\u08ad\3\2\2\2\u093e\u08b6\3\2\2\2\u093e\u08bf\3")
        buf.write("\2\2\2\u093e\u08c8\3\2\2\2\u093e\u08d1\3\2\2\2\u093e\u08da")
        buf.write("\3\2\2\2\u093e\u08e3\3\2\2\2\u093e\u08ec\3\2\2\2\u093e")
        buf.write("\u08f5\3\2\2\2\u093e\u08fe\3\2\2\2\u093e\u0907\3\2\2\2")
        buf.write("\u093e\u090c\3\2\2\2\u093e\u0911\3\2\2\2\u093e\u091a\3")
        buf.write("\2\2\2\u093e\u0923\3\2\2\2\u093e\u092c\3\2\2\2\u093e\u0935")
        buf.write("\3\2\2\2\u093f\u0942\3\2\2\2\u0940\u093e\3\2\2\2\u0940")
        buf.write("\u0941\3\2\2\2\u0941\u00df\3\2\2\2\u0942\u0940\3\2\2\2")
        buf.write("\u0943\u0947\7*\2\2\u0944\u0947\7\u009b\2\2\u0945\u0947")
        buf.write("\5\u0134\u009b\2\u0946\u0943\3\2\2\2\u0946\u0944\3\2\2")
        buf.write("\2\u0946\u0945\3\2\2\2\u0947\u0948\3\2\2\2\u0948\u094b")
        buf.write("\7\u00df\2\2\u0949\u094a\7\u00b1\2\2\u094a\u094c\7\u00df")
        buf.write("\2\2\u094b\u0949\3\2\2\2\u094b\u094c\3\2\2\2\u094c\u094d")
        buf.write("\3\2\2\2\u094d\u094e\5\u00e2r\2\u094e\u00e1\3\2\2\2\u094f")
        buf.write("\u095a\5\u00e4s\2\u0950\u0952\7\u00df\2\2\u0951\u0950")
        buf.write("\3\2\2\2\u0951\u0952\3\2\2\2\u0952\u0953\3\2\2\2\u0953")
        buf.write("\u0955\7\u00b8\2\2\u0954\u0956\7\u00df\2\2\u0955\u0954")
        buf.write("\3\2\2\2\u0955\u0956\3\2\2\2\u0956\u0957\3\2\2\2\u0957")
        buf.write("\u0959\5\u00e4s\2\u0958\u0951\3\2\2\2\u0959\u095c\3\2")
        buf.write("\2\2\u095a\u0958\3\2\2\2\u095a\u095b\3\2\2\2\u095b\u00e3")
        buf.write("\3\2\2\2\u095c\u095a\3\2\2\2\u095d\u095f\5\u0118\u008d")
        buf.write("\2\u095e\u0960\5\u0132\u009a\2\u095f\u095e\3\2\2\2\u095f")
        buf.write("\u0960\3\2\2\2\u0960\u0972\3\2\2\2\u0961\u0963\7\u00df")
        buf.write("\2\2\u0962\u0961\3\2\2\2\u0962\u0963\3\2\2\2\u0963\u0964")
        buf.write("\3\2\2\2\u0964\u0966\7\u00c3\2\2\u0965\u0967\7\u00df\2")
        buf.write("\2\u0966\u0965\3\2\2\2\u0966\u0967\3\2\2\2\u0967\u096c")
        buf.write("\3\2\2\2\u0968\u096a\5\u0114\u008b\2\u0969\u096b\7\u00df")
        buf.write("\2\2\u096a\u0969\3\2\2\2\u096a\u096b\3\2\2\2\u096b\u096d")
        buf.write("\3\2\2\2\u096c\u0968\3\2\2\2\u096c\u096d\3\2\2\2\u096d")
        buf.write("\u096e\3\2\2\2\u096e\u0970\7\u00ce\2\2\u096f\u0971\7\u00df")
        buf.write("\2\2\u0970\u096f\3\2\2\2\u0970\u0971\3\2\2\2\u0971\u0973")
        buf.write("\3\2\2\2\u0972\u0962\3\2\2\2\u0972\u0973\3\2\2\2\u0973")
        buf.write("\u0976\3\2\2\2\u0974\u0975\7\u00df\2\2\u0975\u0977\5\u011a")
        buf.write("\u008e\2\u0976\u0974\3\2\2\2\u0976\u0977\3\2\2\2\u0977")
        buf.write("\u00e5\3\2\2\2\u0978\u0979\7\u00ae\2\2\u0979\u097a\7\u00df")
        buf.write("\2\2\u097a\u097c\5\u00dep\2\u097b\u097d\7\u00dd\2\2\u097c")
        buf.write("\u097b\3\2\2\2\u097d\u097e\3\2\2\2\u097e\u097c\3\2\2\2")
        buf.write("\u097e\u097f\3\2\2\2\u097f\u0983\3\2\2\2\u0980\u0982\5")
        buf.write("\62\32\2\u0981\u0980\3\2\2\2\u0982\u0985\3\2\2\2\u0983")
        buf.write("\u0981\3\2\2\2\u0983\u0984\3\2\2\2\u0984\u0989\3\2\2\2")
        buf.write("\u0985\u0983\3\2\2\2\u0986\u0988\7\u00dd\2\2\u0987\u0986")
        buf.write("\3\2\2\2\u0988\u098b\3\2\2\2\u0989\u0987\3\2\2\2\u0989")
        buf.write("\u098a\3\2\2\2\u098a\u098c\3\2\2\2\u098b\u0989\3\2\2\2")
        buf.write("\u098c\u098d\7\u00ad\2\2\u098d\u00e7\3\2\2\2\u098e\u098f")
        buf.write("\7\u00af\2\2\u098f\u0990\7\u00df\2\2\u0990\u0992\5\u00de")
        buf.write("p\2\u0991\u0993\7\u00df\2\2\u0992\u0991\3\2\2\2\u0992")
        buf.write("\u0993\3\2\2\2\u0993\u0994\3\2\2\2\u0994\u0996\7\u00b8")
        buf.write("\2\2\u0995\u0997\7\u00df\2\2\u0996\u0995\3\2\2\2\u0996")
        buf.write("\u0997\3\2\2\2\u0997\u0998\3\2\2\2\u0998\u0999\5\u00de")
        buf.write("p\2\u0999\u00e9\3\2\2\2\u099a\u099b\7\u00b0\2\2\u099b")
        buf.write("\u099e\7\u00df\2\2\u099c\u099d\7l\2\2\u099d\u099f\7\u00df")
        buf.write("\2\2\u099e\u099c\3\2\2\2\u099e\u099f\3\2\2\2\u099f\u09a0")
        buf.write("\3\2\2\2\u09a0\u09a2\5\u00fa~\2\u09a1\u09a3\7\u00dd\2")
        buf.write("\2\u09a2\u09a1\3\2\2\2\u09a3\u09a4\3\2\2\2\u09a4\u09a2")
        buf.write("\3\2\2\2\u09a4\u09a5\3\2\2\2\u09a5\u09ac\3\2\2\2\u09a6")
        buf.write("\u09a8\5\62\32\2\u09a7\u09a9\7\u00dd\2\2\u09a8\u09a7\3")
        buf.write("\2\2\2\u09a9\u09aa\3\2\2\2\u09aa\u09a8\3\2\2\2\u09aa\u09ab")
        buf.write("\3\2\2\2\u09ab\u09ad\3\2\2\2\u09ac\u09a6\3\2\2\2\u09ac")
        buf.write("\u09ad\3\2\2\2\u09ad\u09ae\3\2\2\2\u09ae\u09af\7\67\2")
        buf.write("\2\u09af\u00eb\3\2\2\2\u09b0\u09b1\7\u00b2\2\2\u09b1\u09b2")
        buf.write("\7\u00df\2\2\u09b2\u09b4\5\u00dep\2\u09b3\u09b5\7\u00df")
        buf.write("\2\2\u09b4\u09b3\3\2\2\2\u09b4\u09b5\3\2\2\2\u09b5\u09b6")
        buf.write("\3\2\2\2\u09b6\u09bb\7\u00b8\2\2\u09b7\u09b9\7\u00df\2")
        buf.write("\2\u09b8\u09b7\3\2\2\2\u09b8\u09b9\3\2\2\2\u09b9\u09ba")
        buf.write("\3\2\2\2\u09ba\u09bc\5\u009aN\2\u09bb\u09b8\3\2\2\2\u09bb")
        buf.write("\u09bc\3\2\2\2\u09bc\u00ed\3\2\2\2\u09bd\u09c0\5\u00f0")
        buf.write("y\2\u09be\u09c0\5\u00f2z\2\u09bf\u09bd\3\2\2\2\u09bf\u09be")
        buf.write("\3\2\2\2\u09c0\u00ef\3\2\2\2\u09c1\u09c2\7\23\2\2\u09c2")
        buf.write("\u09c3\7\u00df\2\2\u09c3\u09c5\5\u0118\u008d\2\u09c4\u09c6")
        buf.write("\5\u0132\u009a\2\u09c5\u09c4\3\2\2\2\u09c5\u09c6\3\2\2")
        buf.write("\2\u09c6\u09d4\3\2\2\2\u09c7\u09c9\7\u00df\2\2\u09c8\u09c7")
        buf.write("\3\2\2\2\u09c8\u09c9\3\2\2\2\u09c9\u09ca\3\2\2\2\u09ca")
        buf.write("\u09cc\7\u00c3\2\2\u09cb\u09cd\7\u00df\2\2\u09cc\u09cb")
        buf.write("\3\2\2\2\u09cc\u09cd\3\2\2\2\u09cd\u09ce\3\2\2\2\u09ce")
        buf.write("\u09d0\5\u0108\u0085\2\u09cf\u09d1\7\u00df\2\2\u09d0\u09cf")
        buf.write("\3\2\2\2\u09d0\u09d1\3\2\2\2\u09d1\u09d2\3\2\2\2\u09d2")
        buf.write("\u09d3\7\u00ce\2\2\u09d3\u09d5\3\2\2\2\u09d4\u09c8\3\2")
        buf.write("\2\2\u09d4\u09d5\3\2\2\2\u09d5\u00f1\3\2\2\2\u09d6\u09d7")
        buf.write("\7\23\2\2\u09d7\u09d9\7\u00df\2\2\u09d8\u09da\5\u00fa")
        buf.write("~\2\u09d9\u09d8\3\2\2\2\u09d9\u09da\3\2\2\2\u09da\u09db")
        buf.write("\3\2\2\2\u09db\u09dd\7\u00bb\2\2\u09dc\u09de\7\u00df\2")
        buf.write("\2\u09dd\u09dc\3\2\2\2\u09dd\u09de\3\2\2\2\u09de\u09df")
        buf.write("\3\2\2\2\u09df\u09e1\5\u0118\u008d\2\u09e0\u09e2\5\u0132")
        buf.write("\u009a\2\u09e1\u09e0\3\2\2\2\u09e1\u09e2\3\2\2\2\u09e2")
        buf.write("\u09f0\3\2\2\2\u09e3\u09e5\7\u00df\2\2\u09e4\u09e3\3\2")
        buf.write("\2\2\u09e4\u09e5\3\2\2\2\u09e5\u09e6\3\2\2\2\u09e6\u09e8")
        buf.write("\7\u00c3\2\2\u09e7\u09e9\7\u00df\2\2\u09e8\u09e7\3\2\2")
        buf.write("\2\u09e8\u09e9\3\2\2\2\u09e9\u09ea\3\2\2\2\u09ea\u09ec")
        buf.write("\5\u0108\u0085\2\u09eb\u09ed\7\u00df\2\2\u09ec\u09eb\3")
        buf.write("\2\2\2\u09ec\u09ed\3\2\2\2\u09ed\u09ee\3\2\2\2\u09ee\u09ef")
        buf.write("\7\u00ce\2\2\u09ef\u09f1\3\2\2\2\u09f0\u09e4\3\2\2\2\u09f0")
        buf.write("\u09f1\3\2\2\2\u09f1\u00f3\3\2\2\2\u09f2\u09f5\5\u00f6")
        buf.write("|\2\u09f3\u09f5\5\u00f8}\2\u09f4\u09f2\3\2\2\2\u09f4\u09f3")
        buf.write("\3\2\2\2\u09f5\u00f5\3\2\2\2\u09f6\u09f9\5\u011e\u0090")
        buf.write("\2\u09f7\u09f8\7\u00df\2\2\u09f8\u09fa\5\u0108\u0085\2")
        buf.write("\u09f9\u09f7\3\2\2\2\u09f9\u09fa\3\2\2\2\u09fa\u00f7\3")
        buf.write("\2\2\2\u09fb\u09fd\5\u00fa~\2\u09fc\u09fb\3\2\2\2\u09fc")
        buf.write("\u09fd\3\2\2\2\u09fd\u09fe\3\2\2\2\u09fe\u09ff\7\u00bb")
        buf.write("\2\2\u09ff\u0a01\5\u0118\u008d\2\u0a00\u0a02\5\u0132\u009a")
        buf.write("\2\u0a01\u0a00\3\2\2\2\u0a01\u0a02\3\2\2\2\u0a02\u0a05")
        buf.write("\3\2\2\2\u0a03\u0a04\7\u00df\2\2\u0a04\u0a06\5\u0108\u0085")
        buf.write("\2\u0a05\u0a03\3\2\2\2\u0a05\u0a06\3\2\2\2\u0a06\u0a08")
        buf.write("\3\2\2\2\u0a07\u0a09\5\u010c\u0087\2\u0a08\u0a07\3\2\2")
        buf.write("\2\u0a08\u0a09\3\2\2\2\u0a09\u00f9\3\2\2\2\u0a0a\u0a0f")
        buf.write("\5\u0102\u0082\2\u0a0b\u0a0f\5\u00fc\177\2\u0a0c\u0a0f")
        buf.write("\5\u00fe\u0080\2\u0a0d\u0a0f\5\u0106\u0084\2\u0a0e\u0a0a")
        buf.write("\3\2\2\2\u0a0e\u0a0b\3\2\2\2\u0a0e\u0a0c\3\2\2\2\u0a0e")
        buf.write("\u0a0d\3\2\2\2\u0a0f\u00fb\3\2\2\2\u0a10\u0a12\5\u0118")
        buf.write("\u008d\2\u0a11\u0a13\5\u0132\u009a\2\u0a12\u0a11\3\2\2")
        buf.write("\2\u0a12\u0a13\3\2\2\2\u0a13\u0a15\3\2\2\2\u0a14\u0a16")
        buf.write("\5\u010c\u0087\2\u0a15\u0a14\3\2\2\2\u0a15\u0a16\3\2\2")
        buf.write("\2\u0a16\u00fd\3\2\2\2\u0a17\u0a1b\5\u0118\u008d\2\u0a18")
        buf.write("\u0a1b\5\u011c\u008f\2\u0a19\u0a1b\5\u0100\u0081\2\u0a1a")
        buf.write("\u0a17\3\2\2\2\u0a1a\u0a18\3\2\2\2\u0a1a\u0a19\3\2\2\2")
        buf.write("\u0a1b\u0a1d\3\2\2\2\u0a1c\u0a1e\5\u0132\u009a\2\u0a1d")
        buf.write("\u0a1c\3\2\2\2\u0a1d\u0a1e\3\2\2\2\u0a1e\u0a20\3\2\2\2")
        buf.write("\u0a1f\u0a21\7\u00df\2\2\u0a20\u0a1f\3\2\2\2\u0a20\u0a21")
        buf.write("\3\2\2\2\u0a21\u0a2d\3\2\2\2\u0a22\u0a24\7\u00c3\2\2\u0a23")
        buf.write("\u0a25\7\u00df\2\2\u0a24\u0a23\3\2\2\2\u0a24\u0a25\3\2")
        buf.write("\2\2\u0a25\u0a2a\3\2\2\2\u0a26\u0a28\5\u0108\u0085\2\u0a27")
        buf.write("\u0a29\7\u00df\2\2\u0a28\u0a27\3\2\2\2\u0a28\u0a29\3\2")
        buf.write("\2\2\u0a29\u0a2b\3\2\2\2\u0a2a\u0a26\3\2\2\2\u0a2a\u0a2b")
        buf.write("\3\2\2\2\u0a2b\u0a2c\3\2\2\2\u0a2c\u0a2e\7\u00ce\2\2\u0a2d")
        buf.write("\u0a22\3\2\2\2\u0a2e\u0a2f\3\2\2\2\u0a2f\u0a2d\3\2\2\2")
        buf.write("\u0a2f\u0a30\3\2\2\2\u0a30\u0a32\3\2\2\2\u0a31\u0a33\5")
        buf.write("\u010c\u0087\2\u0a32\u0a31\3\2\2\2\u0a32\u0a33\3\2\2\2")
        buf.write("\u0a33\u00ff\3\2\2\2\u0a34\u0a36\5\u0118\u008d\2\u0a35")
        buf.write("\u0a37\5\u0132\u009a\2\u0a36\u0a35\3\2\2\2\u0a36\u0a37")
        buf.write("\3\2\2\2\u0a37\u0a39\3\2\2\2\u0a38\u0a3a\7\u00df\2\2\u0a39")
        buf.write("\u0a38\3\2\2\2\u0a39\u0a3a\3\2\2\2\u0a3a\u0a3b\3\2\2\2")
        buf.write("\u0a3b\u0a3d\7\u00c3\2\2\u0a3c\u0a3e\7\u00df\2\2\u0a3d")
        buf.write("\u0a3c\3\2\2\2\u0a3d\u0a3e\3\2\2\2\u0a3e\u0a43\3\2\2\2")
        buf.write("\u0a3f\u0a41\5\u0108\u0085\2\u0a40\u0a42\7\u00df\2\2\u0a41")
        buf.write("\u0a40\3\2\2\2\u0a41\u0a42\3\2\2\2\u0a42\u0a44\3\2\2\2")
        buf.write("\u0a43\u0a3f\3\2\2\2\u0a43\u0a44\3\2\2\2\u0a44\u0a45\3")
        buf.write("\2\2\2\u0a45\u0a46\7\u00ce\2\2\u0a46\u0101\3\2\2\2\u0a47")
        buf.write("\u0a4a\5\u00fc\177\2\u0a48\u0a4a\5\u00fe\u0080\2\u0a49")
        buf.write("\u0a47\3\2\2\2\u0a49\u0a48\3\2\2\2\u0a49\u0a4a\3\2\2\2")
        buf.write("\u0a4a\u0a4c\3\2\2\2\u0a4b\u0a4d\5\u0104\u0083\2\u0a4c")
        buf.write("\u0a4b\3\2\2\2\u0a4d\u0a4e\3\2\2\2\u0a4e\u0a4c\3\2\2\2")
        buf.write("\u0a4e\u0a4f\3\2\2\2\u0a4f\u0a51\3\2\2\2\u0a50\u0a52\5")
        buf.write("\u010c\u0087\2\u0a51\u0a50\3\2\2\2\u0a51\u0a52\3\2\2\2")
        buf.write("\u0a52\u0103\3\2\2\2\u0a53\u0a55\7\u00df\2\2\u0a54\u0a53")
        buf.write("\3\2\2\2\u0a54\u0a55\3\2\2\2\u0a55\u0a56\3\2\2\2\u0a56")
        buf.write("\u0a59\7\u00bb\2\2\u0a57\u0a5a\5\u00fc\177\2\u0a58\u0a5a")
        buf.write("\5\u00fe\u0080\2\u0a59\u0a57\3\2\2\2\u0a59\u0a58\3\2\2")
        buf.write("\2\u0a5a\u0105\3\2\2\2\u0a5b\u0a5c\5\u010c\u0087\2\u0a5c")
        buf.write("\u0107\3\2\2\2\u0a5d\u0a5f\5\u010a\u0086\2\u0a5e\u0a5d")
        buf.write("\3\2\2\2\u0a5e\u0a5f\3\2\2\2\u0a5f\u0a61\3\2\2\2\u0a60")
        buf.write("\u0a62\7\u00df\2\2\u0a61\u0a60\3\2\2\2\u0a61\u0a62\3\2")
        buf.write("\2\2\u0a62\u0a63\3\2\2\2\u0a63\u0a65\t\13\2\2\u0a64\u0a66")
        buf.write("\7\u00df\2\2\u0a65\u0a64\3\2\2\2\u0a65\u0a66\3\2\2\2\u0a66")
        buf.write("\u0a68\3\2\2\2\u0a67\u0a5e\3\2\2\2\u0a68\u0a6b\3\2\2\2")
        buf.write("\u0a69\u0a67\3\2\2\2\u0a69\u0a6a\3\2\2\2\u0a6a\u0a6c\3")
        buf.write("\2\2\2\u0a6b\u0a69\3\2\2\2\u0a6c\u0a79\5\u010a\u0086\2")
        buf.write("\u0a6d\u0a6f\7\u00df\2\2\u0a6e\u0a6d\3\2\2\2\u0a6e\u0a6f")
        buf.write("\3\2\2\2\u0a6f\u0a70\3\2\2\2\u0a70\u0a72\t\13\2\2\u0a71")
        buf.write("\u0a73\7\u00df\2\2\u0a72\u0a71\3\2\2\2\u0a72\u0a73\3\2")
        buf.write("\2\2\u0a73\u0a75\3\2\2\2\u0a74\u0a76\5\u010a\u0086\2\u0a75")
        buf.write("\u0a74\3\2\2\2\u0a75\u0a76\3\2\2\2\u0a76\u0a78\3\2\2\2")
        buf.write("\u0a77\u0a6e\3\2\2\2\u0a78\u0a7b\3\2\2\2\u0a79\u0a77\3")
        buf.write("\2\2\2\u0a79\u0a7a\3\2\2\2\u0a7a\u0109\3\2\2\2\u0a7b\u0a79")
        buf.write("\3\2\2\2\u0a7c\u0a7d\t\r\2\2\u0a7d\u0a7f\7\u00df\2\2\u0a7e")
        buf.write("\u0a7c\3\2\2\2\u0a7e\u0a7f\3\2\2\2\u0a7f\u0a80\3\2\2\2")
        buf.write("\u0a80\u0a81\5\u00dep\2\u0a81\u010b\3\2\2\2\u0a82\u0a83")
        buf.write("\7\u00bd\2\2\u0a83\u0a85\5\u0118\u008d\2\u0a84\u0a86\5")
        buf.write("\u0132\u009a\2\u0a85\u0a84\3\2\2\2\u0a85\u0a86\3\2\2\2")
        buf.write("\u0a86\u010d\3\2\2\2\u0a87\u0a99\7\u00c3\2\2\u0a88\u0a8a")
        buf.write("\7\u00df\2\2\u0a89\u0a88\3\2\2\2\u0a89\u0a8a\3\2\2\2\u0a8a")
        buf.write("\u0a8b\3\2\2\2\u0a8b\u0a96\5\u0110\u0089\2\u0a8c\u0a8e")
        buf.write("\7\u00df\2\2\u0a8d\u0a8c\3\2\2\2\u0a8d\u0a8e\3\2\2\2\u0a8e")
        buf.write("\u0a8f\3\2\2\2\u0a8f\u0a91\7\u00b8\2\2\u0a90\u0a92\7\u00df")
        buf.write("\2\2\u0a91\u0a90\3\2\2\2\u0a91\u0a92\3\2\2\2\u0a92\u0a93")
        buf.write("\3\2\2\2\u0a93\u0a95\5\u0110\u0089\2\u0a94\u0a8d\3\2\2")
        buf.write("\2\u0a95\u0a98\3\2\2\2\u0a96\u0a94\3\2\2\2\u0a96\u0a97")
        buf.write("\3\2\2\2\u0a97\u0a9a\3\2\2\2\u0a98\u0a96\3\2\2\2\u0a99")
        buf.write("\u0a89\3\2\2\2\u0a99\u0a9a\3\2\2\2\u0a9a\u0a9c\3\2\2\2")
        buf.write("\u0a9b\u0a9d\7\u00df\2\2\u0a9c\u0a9b\3\2\2\2\u0a9c\u0a9d")
        buf.write("\3\2\2\2\u0a9d\u0a9e\3\2\2\2\u0a9e\u0a9f\7\u00ce\2\2\u0a9f")
        buf.write("\u010f\3\2\2\2\u0aa0\u0aa1\7u\2\2\u0aa1\u0aa3\7\u00df")
        buf.write("\2\2\u0aa2\u0aa0\3\2\2\2\u0aa2\u0aa3\3\2\2\2\u0aa3\u0aa6")
        buf.write("\3\2\2\2\u0aa4\u0aa5\t\16\2\2\u0aa5\u0aa7\7\u00df\2\2")
        buf.write("\u0aa6\u0aa4\3\2\2\2\u0aa6\u0aa7\3\2\2\2\u0aa7\u0aaa\3")
        buf.write("\2\2\2\u0aa8\u0aa9\7|\2\2\u0aa9\u0aab\7\u00df\2\2\u0aaa")
        buf.write("\u0aa8\3\2\2\2\u0aaa\u0aab\3\2\2\2\u0aab\u0aac\3\2\2\2")
        buf.write("\u0aac\u0aae\5\u0118\u008d\2\u0aad\u0aaf\5\u0132\u009a")
        buf.write("\2\u0aae\u0aad\3\2\2\2\u0aae\u0aaf\3\2\2\2\u0aaf\u0ab8")
        buf.write("\3\2\2\2\u0ab0\u0ab2\7\u00df\2\2\u0ab1\u0ab0\3\2\2\2\u0ab1")
        buf.write("\u0ab2\3\2\2\2\u0ab2\u0ab3\3\2\2\2\u0ab3\u0ab5\7\u00c3")
        buf.write("\2\2\u0ab4\u0ab6\7\u00df\2\2\u0ab5\u0ab4\3\2\2\2\u0ab5")
        buf.write("\u0ab6\3\2\2\2\u0ab6\u0ab7\3\2\2\2\u0ab7\u0ab9\7\u00ce")
        buf.write("\2\2\u0ab8\u0ab1\3\2\2\2\u0ab8\u0ab9\3\2\2\2\u0ab9\u0abc")
        buf.write("\3\2\2\2\u0aba\u0abb\7\u00df\2\2\u0abb\u0abd\5\u011a\u008e")
        buf.write("\2\u0abc\u0aba\3\2\2\2\u0abc\u0abd\3\2\2\2\u0abd\u0ac2")
        buf.write("\3\2\2\2\u0abe\u0ac0\7\u00df\2\2\u0abf\u0abe\3\2\2\2\u0abf")
        buf.write("\u0ac0\3\2\2\2\u0ac0\u0ac1\3\2\2\2\u0ac1\u0ac3\5\u0112")
        buf.write("\u008a\2\u0ac2\u0abf\3\2\2\2\u0ac2\u0ac3\3\2\2\2\u0ac3")
        buf.write("\u0111\3\2\2\2\u0ac4\u0ac6\7\u00bc\2\2\u0ac5\u0ac7\7\u00df")
        buf.write("\2\2\u0ac6\u0ac5\3\2\2\2\u0ac6\u0ac7\3\2\2\2\u0ac7\u0ac8")
        buf.write("\3\2\2\2\u0ac8\u0ac9\5\u00dep\2\u0ac9\u0113\3\2\2\2\u0aca")
        buf.write("\u0ad5\5\u0116\u008c\2\u0acb\u0acd\7\u00df\2\2\u0acc\u0acb")
        buf.write("\3\2\2\2\u0acc\u0acd\3\2\2\2\u0acd\u0ace\3\2\2\2\u0ace")
        buf.write("\u0ad0\7\u00b8\2\2\u0acf\u0ad1\7\u00df\2\2\u0ad0\u0acf")
        buf.write("\3\2\2\2\u0ad0\u0ad1\3\2\2\2\u0ad1\u0ad2\3\2\2\2\u0ad2")
        buf.write("\u0ad4\5\u0116\u008c\2\u0ad3\u0acc\3\2\2\2\u0ad4\u0ad7")
        buf.write("\3\2\2\2\u0ad5\u0ad3\3\2\2\2\u0ad5\u0ad6\3\2\2\2\u0ad6")
        buf.write("\u0115\3\2\2\2\u0ad7\u0ad5\3\2\2\2\u0ad8\u0ad9\5\u00de")
        buf.write("p\2\u0ad9\u0ada\7\u00df\2\2\u0ada\u0adb\7\u00a4\2\2\u0adb")
        buf.write("\u0adc\7\u00df\2\2\u0adc\u0ade\3\2\2\2\u0add\u0ad8\3\2")
        buf.write("\2\2\u0add\u0ade\3\2\2\2\u0ade\u0adf\3\2\2\2\u0adf\u0ae0")
        buf.write("\5\u00dep\2\u0ae0\u0117\3\2\2\2\u0ae1\u0ae4\7\u00db\2")
        buf.write("\2\u0ae2\u0ae4\5\u0136\u009c\2\u0ae3\u0ae1\3\2\2\2\u0ae3")
        buf.write("\u0ae2\3\2\2\2\u0ae4\u0ae5\3\2\2\2\u0ae5\u0ae3\3\2\2\2")
        buf.write("\u0ae5\u0ae6\3\2\2\2\u0ae6\u0af0\3\2\2\2\u0ae7\u0aea\7")
        buf.write("\u00d0\2\2\u0ae8\u0aeb\7\u00db\2\2\u0ae9\u0aeb\5\u0136")
        buf.write("\u009c\2\u0aea\u0ae8\3\2\2\2\u0aea\u0ae9\3\2\2\2\u0aeb")
        buf.write("\u0aec\3\2\2\2\u0aec\u0aea\3\2\2\2\u0aec\u0aed\3\2\2\2")
        buf.write("\u0aed\u0aee\3\2\2\2\u0aee\u0af0\7\u00d1\2\2\u0aef\u0ae3")
        buf.write("\3\2\2\2\u0aef\u0ae7\3\2\2\2\u0af0\u0119\3\2\2\2\u0af1")
        buf.write("\u0af2\7\n\2\2\u0af2\u0af5\7\u00df\2\2\u0af3\u0af4\7l")
        buf.write("\2\2\u0af4\u0af6\7\u00df\2\2\u0af5\u0af3\3\2\2\2\u0af5")
        buf.write("\u0af6\3\2\2\2\u0af6\u0af7\3\2\2\2\u0af7\u0afa\5\u0130")
        buf.write("\u0099\2\u0af8\u0af9\7\u00df\2\2\u0af9\u0afb\5\u0124\u0093")
        buf.write("\2\u0afa\u0af8\3\2\2\2\u0afa\u0afb\3\2\2\2\u0afb\u011b")
        buf.write("\3\2\2\2\u0afc\u0afd\t\17\2\2\u0afd\u011d\3\2\2\2\u0afe")
        buf.write("\u0b03\7\u00db\2\2\u0aff\u0b02\5\u0136\u009c\2\u0b00\u0b02")
        buf.write("\7\u00db\2\2\u0b01\u0aff\3\2\2\2\u0b01\u0b00\3\2\2\2\u0b02")
        buf.write("\u0b05\3\2\2\2\u0b03\u0b01\3\2\2\2\u0b03\u0b04\3\2\2\2")
        buf.write("\u0b04\u0b0e\3\2\2\2\u0b05\u0b03\3\2\2\2\u0b06\u0b09\5")
        buf.write("\u0136\u009c\2\u0b07\u0b0a\5\u0136\u009c\2\u0b08\u0b0a")
        buf.write("\7\u00db\2\2\u0b09\u0b07\3\2\2\2\u0b09\u0b08\3\2\2\2\u0b0a")
        buf.write("\u0b0b\3\2\2\2\u0b0b\u0b09\3\2\2\2\u0b0b\u0b0c\3\2\2\2")
        buf.write("\u0b0c\u0b0e\3\2\2\2\u0b0d\u0afe\3\2\2\2\u0b0d\u0b06\3")
        buf.write("\2\2\2\u0b0e\u011f\3\2\2\2\u0b0f\u0b10\t\20\2\2\u0b10")
        buf.write("\u0121\3\2\2\2\u0b11\u0b16\5\u0118\u008d\2\u0b12\u0b13")
        buf.write("\7\u00bb\2\2\u0b13\u0b15\5\u0118\u008d\2\u0b14\u0b12\3")
        buf.write("\2\2\2\u0b15\u0b18\3\2\2\2\u0b16\u0b14\3\2\2\2\u0b16\u0b17")
        buf.write("\3\2\2\2\u0b17\u0123\3\2\2\2\u0b18\u0b16\3\2\2\2\u0b19")
        buf.write("\u0b1b\7\u00c7\2\2\u0b1a\u0b1c\7\u00df\2\2\u0b1b\u0b1a")
        buf.write("\3\2\2\2\u0b1b\u0b1c\3\2\2\2\u0b1c\u0b1f\3\2\2\2\u0b1d")
        buf.write("\u0b20\7\u00d5\2\2\u0b1e\u0b20\5\u0118\u008d\2\u0b1f\u0b1d")
        buf.write("\3\2\2\2\u0b1f\u0b1e\3\2\2\2\u0b20\u0125\3\2\2\2\u0b21")
        buf.write("\u0b2a\5\u011e\u0090\2\u0b22\u0b24\7\u00df\2\2\u0b23\u0b22")
        buf.write("\3\2\2\2\u0b23\u0b24\3\2\2\2\u0b24\u0b25\3\2\2\2\u0b25")
        buf.write("\u0b27\7\u00c5\2\2\u0b26\u0b28\7\u00df\2\2\u0b27\u0b26")
        buf.write("\3\2\2\2\u0b27\u0b28\3\2\2\2\u0b28\u0b29\3\2\2\2\u0b29")
        buf.write("\u0b2b\5\u011e\u0090\2\u0b2a\u0b23\3\2\2\2\u0b2a\u0b2b")
        buf.write("\3\2\2\2\u0b2b\u0127\3\2\2\2\u0b2c\u0b2d\5\u0118\u008d")
        buf.write("\2\u0b2d\u0b2e\7\u00b7\2\2\u0b2e\u0129\3\2\2\2\u0b2f\u0b30")
        buf.write("\t\21\2\2\u0b30\u012b\3\2\2\2\u0b31\u0b32\t\22\2\2\u0b32")
        buf.write("\u012d\3\2\2\2\u0b33\u0b34\t\23\2\2\u0b34\u012f\3\2\2")
        buf.write("\2\u0b35\u0b38\5\u011c\u008f\2\u0b36\u0b38\5\u0122\u0092")
        buf.write("\2\u0b37\u0b35\3\2\2\2\u0b37\u0b36\3\2\2\2\u0b38\u0b41")
        buf.write("\3\2\2\2\u0b39\u0b3b\7\u00df\2\2\u0b3a\u0b39\3\2\2\2\u0b3a")
        buf.write("\u0b3b\3\2\2\2\u0b3b\u0b3c\3\2\2\2\u0b3c\u0b3e\7\u00c3")
        buf.write("\2\2\u0b3d\u0b3f\7\u00df\2\2\u0b3e\u0b3d\3\2\2\2\u0b3e")
        buf.write("\u0b3f\3\2\2\2\u0b3f\u0b40\3\2\2\2\u0b40\u0b42\7\u00ce")
        buf.write("\2\2\u0b41\u0b3a\3\2\2\2\u0b41\u0b42\3\2\2\2\u0b42\u0131")
        buf.write("\3\2\2\2\u0b43\u0b44\t\24\2\2\u0b44\u0133\3\2\2\2\u0b45")
        buf.write("\u0b46\t\25\2\2\u0b46\u0135\3\2\2\2\u0b47\u0b48\t\26\2")
        buf.write("\2\u0b48\u0137\3\2\2\2\u01f6\u013c\u0141\u0148\u014a\u014d")
        buf.write("\u0152\u0156\u015b\u015f\u0164\u0168\u016d\u0171\u0176")
        buf.write("\u017a\u017f\u0183\u0188\u018c\u0190\u0195\u0198\u019d")
        buf.write("\u01a9\u01af\u01b4\u01ba\u01be\u01c2\u01cb\u01cf\u01d5")
        buf.write("\u01d9\u01e3\u01e9\u01ee\u01fd\u0200\u0208\u020d\u0212")
        buf.write("\u0218\u021e\u0221\u0225\u0229\u022c\u0230\u0235\u0239")
        buf.write("\u0240\u0248\u024c\u0250\u0259\u025c\u0264\u0268\u026d")
        buf.write("\u0272\u0274\u027a\u0286\u028a\u028e\u0292\u0297\u029e")
        buf.write("\u02a1\u02a6\u02ec\u02f2\u02f6\u02f9\u0309\u030d\u0312")
        buf.write("\u0315\u031a\u0320\u0324\u0329\u032e\u0332\u0335\u0339")
        buf.write("\u033f\u0343\u034a\u0350\u0353\u0358\u0362\u0365\u0368")
        buf.write("\u036c\u0372\u0376\u037b\u0382\u0386\u038a\u038e\u0391")
        buf.write("\u0397\u039d\u039f\u03aa\u03b0\u03b2\u03ba\u03c0\u03c8")
        buf.write("\u03cf\u03d7\u03dc\u03e3\u03e7\u03ea\u03ef\u03f5\u03f9")
        buf.write("\u03fe\u0408\u040e\u0418\u041c\u0426\u042f\u0435\u0437")
        buf.write("\u043c\u0442\u0446\u0449\u044d\u0458\u045d\u0463\u0465")
        buf.write("\u046b\u046d\u0472\u0476\u047c\u047f\u0483\u0488\u048e")
        buf.write("\u0490\u0498\u049c\u049f\u04a2\u04a6\u04bd\u04c3\u04c7")
        buf.write("\u04cb\u04d5\u04db\u04dd\u04e9\u04ef\u04f1\u04f7\u04fd")
        buf.write("\u04ff\u0509\u050d\u0512\u051a\u051e\u0522\u052a\u052e")
        buf.write("\u053a\u053e\u0545\u0547\u054d\u0551\u0559\u055d\u0569")
        buf.write("\u056f\u0571\u057b\u0581\u0583\u0589\u058f\u0591\u0595")
        buf.write("\u0599\u059d\u05b3\u05b8\u05c2\u05c6\u05cb\u05d6\u05da")
        buf.write("\u05df\u05ed\u05f1\u05fa\u05fe\u0601\u0605\u0609\u060c")
        buf.write("\u0610\u0614\u0617\u061b\u061e\u0622\u0624\u0628\u062c")
        buf.write("\u0630\u0634\u0637\u063d\u0641\u0644\u0649\u064d\u0653")
        buf.write("\u0656\u0659\u065d\u0662\u0668\u066a\u0671\u0675\u067b")
        buf.write("\u067e\u0683\u0689\u068b\u0692\u0696\u069c\u069f\u06a4")
        buf.write("\u06aa\u06ac\u06b4\u06b8\u06bb\u06be\u06c2\u06ca\u06ce")
        buf.write("\u06d2\u06d4\u06d7\u06dc\u06e2\u06e6\u06ea\u06ef\u06f4")
        buf.write("\u06f8\u06fc\u0701\u0709\u070b\u0717\u071b\u0723\u0727")
        buf.write("\u072f\u0733\u0737\u073b\u073f\u0743\u074b\u074f\u075b")
        buf.write("\u0760\u0764\u076c\u076f\u0774\u077a\u077c\u0782\u0784")
        buf.write("\u0789\u078d\u0792\u0795\u0799\u079d\u07a8\u07ae\u07b2")
        buf.write("\u07b5\u07bb\u07bf\u07c7\u07cb\u07d4\u07d8\u07de\u07e1")
        buf.write("\u07e6\u07ec\u07ee\u07f4\u07f8\u07ff\u0807\u080c\u0813")
        buf.write("\u0817\u081a\u081d\u0820\u0824\u0829\u0832\u083c\u0840")
        buf.write("\u0847\u0849\u084f\u0853\u0857\u085c\u0860\u086d\u0871")
        buf.write("\u0877\u087c\u0884\u0888\u088c\u0890\u0894\u0898\u089d")
        buf.write("\u08a1\u08a6\u08aa\u08af\u08b3\u08b8\u08bc\u08c1\u08c5")
        buf.write("\u08ca\u08ce\u08d3\u08d7\u08dc\u08e0\u08e5\u08e9\u08ee")
        buf.write("\u08f2\u08f7\u08fb\u0900\u0904\u0913\u0917\u091c\u0920")
        buf.write("\u0925\u0929\u092e\u0932\u0937\u093b\u093e\u0940\u0946")
        buf.write("\u094b\u0951\u0955\u095a\u095f\u0962\u0966\u096a\u096c")
        buf.write("\u0970\u0972\u0976\u097e\u0983\u0989\u0992\u0996\u099e")
        buf.write("\u09a4\u09aa\u09ac\u09b4\u09b8\u09bb\u09bf\u09c5\u09c8")
        buf.write("\u09cc\u09d0\u09d4\u09d9\u09dd\u09e1\u09e4\u09e8\u09ec")
        buf.write("\u09f0\u09f4\u09f9\u09fc\u0a01\u0a05\u0a08\u0a0e\u0a12")
        buf.write("\u0a15\u0a1a\u0a1d\u0a20\u0a24\u0a28\u0a2a\u0a2f\u0a32")
        buf.write("\u0a36\u0a39\u0a3d\u0a41\u0a43\u0a49\u0a4e\u0a51\u0a54")
        buf.write("\u0a59\u0a5e\u0a61\u0a65\u0a69\u0a6e\u0a72\u0a75\u0a79")
        buf.write("\u0a7e\u0a85\u0a89\u0a8d\u0a91\u0a96\u0a99\u0a9c\u0aa2")
        buf.write("\u0aa6\u0aaa\u0aae\u0ab1\u0ab5\u0ab8\u0abc\u0abf\u0ac2")
        buf.write("\u0ac6\u0acc\u0ad0\u0ad5\u0add\u0ae3\u0ae5\u0aea\u0aec")
        buf.write("\u0aef\u0af5\u0afa\u0b01\u0b03\u0b09\u0b0b\u0b0d\u0b16")
        buf.write("\u0b1b\u0b1f\u0b23\u0b27\u0b2a\u0b37\u0b3a\u0b3e\u0b41")
        return buf.getvalue()


class VisualBasic6Parser ( Parser ):

    grammarFileName = "VisualBasic6.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'&'", "':='", "'@'", "':'", 
                     "','", "<INVALID>", "'$'", "'.'", "'='", "'!'", "'>='", 
                     "'>'", "'#'", "'<='", "'{'", "'('", "'<'", "'-'", "'-='", 
                     "'*'", "'<>'", "'%'", "'+'", "'+='", "'^'", "'}'", 
                     "')'", "';'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>", "ACCESS", "ADDRESSOF", "ALIAS", "AND", 
                      "ATTRIBUTE", "APPACTIVATE", "APPEND", "AS", "BEEP", 
                      "BEGIN", "BEGINPROPERTY", "BINARY", "BOOLEAN", "BYVAL", 
                      "BYREF", "BYTE", "CALL", "CASE", "CHDIR", "CHDRIVE", 
                      "CLASS", "CLOSE", "COLLECTION", "CONST", "DATE", "DECLARE", 
                      "DEFBOOL", "DEFBYTE", "DEFDATE", "DEFDBL", "DEFDEC", 
                      "DEFCUR", "DEFINT", "DEFLNG", "DEFOBJ", "DEFSNG", 
                      "DEFSTR", "DEFVAR", "DELETESETTING", "DIM", "DO", 
                      "DOUBLE", "EACH", "ELSE", "ELSEIF", "END_ENUM", "END_FUNCTION", 
                      "END_IF", "END_PROPERTY", "END_SELECT", "END_SUB", 
                      "END_TYPE", "END_WITH", "END", "ENDPROPERTY", "ENUM", 
                      "EQV", "ERASE", "ERROR", "EVENT", "EXIT_DO", "EXIT_FOR", 
                      "EXIT_FUNCTION", "EXIT_PROPERTY", "EXIT_SUB", "FALSE", 
                      "FILECOPY", "FRIEND", "FOR", "FUNCTION", "GET", "GLOBAL", 
                      "GOSUB", "GOTO", "IF", "IMP", "IMPLEMENTS", "IN", 
                      "INPUT", "IS", "INTEGER", "KILL", "LOAD", "LOCK", 
                      "LONG", "LOOP", "LEN", "LET", "LIB", "LIKE", "LINE_INPUT", 
                      "LOCK_READ", "LOCK_WRITE", "LOCK_READ_WRITE", "LSET", 
                      "MACRO_IF", "MACRO_ELSEIF", "MACRO_ELSE", "MACRO_END_IF", 
                      "ME", "MID", "MKDIR", "MOD", "NAME", "NEXT", "NEW", 
                      "NOT", "NOTHING", "NULL", "OBJECT", "ON", "ON_ERROR", 
                      "ON_LOCAL_ERROR", "OPEN", "OPTIONAL", "OPTION_BASE", 
                      "OPTION_EXPLICIT", "OPTION_COMPARE", "OPTION_PRIVATE_MODULE", 
                      "OR", "OUTPUT", "PARAMARRAY", "PRESERVE", "PRINT", 
                      "PRIVATE", "PROPERTY_GET", "PROPERTY_LET", "PROPERTY_SET", 
                      "PUBLIC", "PUT", "RANDOM", "RANDOMIZE", "RAISEEVENT", 
                      "READ", "READ_WRITE", "REDIM", "REM", "RESET", "RESUME", 
                      "RETURN", "RMDIR", "RSET", "SAVEPICTURE", "SAVESETTING", 
                      "SEEK", "SELECT", "SENDKEYS", "SET", "SETATTR", "SHARED", 
                      "SINGLE", "SPC", "STATIC", "STEP", "STOP", "STRING", 
                      "SUB", "TAB", "TEXT", "THEN", "TIME", "TO", "TRUE", 
                      "TYPE", "TYPEOF", "UNLOAD", "UNLOCK", "UNTIL", "VARIANT", 
                      "VERSION", "WEND", "WHILE", "WIDTH", "WITH", "WITHEVENTS", 
                      "WRITE", "XOR", "AMPERSAND", "ASSIGN", "AT", "COLON", 
                      "COMMA", "DIV", "DOLLAR", "DOT", "EQ", "EXCLAMATIONMARK", 
                      "GEQ", "GT", "HASH", "LEQ", "LBRACE", "LPAREN", "LT", 
                      "MINUS", "MINUS_EQ", "MULT", "NEQ", "PERCENT", "PLUS", 
                      "PLUS_EQ", "POW", "RBRACE", "RPAREN", "SEMICOLON", 
                      "L_SQUARE_BRACKET", "R_SQUARE_BRACKET", "STRINGLITERAL", 
                      "DATELITERAL", "COLORLITERAL", "INTEGERLITERAL", "DOUBLELITERAL", 
                      "FILENUMBER", "OCTALLITERAL", "FRX_OFFSET", "GUID", 
                      "IDENTIFIER", "LINE_CONTINUATION", "NEWLINE", "COMMENT", 
                      "WS" ]

    RULE_startRule = 0
    RULE_module = 1
    RULE_moduleReferences = 2
    RULE_moduleReference = 3
    RULE_moduleReferenceValue = 4
    RULE_moduleReferenceComponent = 5
    RULE_moduleHeader = 6
    RULE_moduleConfig = 7
    RULE_moduleConfigElement = 8
    RULE_moduleAttributes = 9
    RULE_moduleOptions = 10
    RULE_moduleOption = 11
    RULE_moduleBody = 12
    RULE_moduleBodyElement = 13
    RULE_controlProperties = 14
    RULE_cp_Properties = 15
    RULE_cp_SingleProperty = 16
    RULE_cp_PropertyName = 17
    RULE_cp_PropertyValue = 18
    RULE_cp_NestedProperty = 19
    RULE_cp_ControlType = 20
    RULE_cp_ControlIdentifier = 21
    RULE_moduleBlock = 22
    RULE_attributeStmt = 23
    RULE_block = 24
    RULE_blockStmt = 25
    RULE_appActivateStmt = 26
    RULE_beepStmt = 27
    RULE_chDirStmt = 28
    RULE_chDriveStmt = 29
    RULE_closeStmt = 30
    RULE_constStmt = 31
    RULE_constSubStmt = 32
    RULE_dateStmt = 33
    RULE_declareStmt = 34
    RULE_deftypeStmt = 35
    RULE_deleteSettingStmt = 36
    RULE_doLoopStmt = 37
    RULE_endStmt = 38
    RULE_enumerationStmt = 39
    RULE_enumerationStmt_Constant = 40
    RULE_eraseStmt = 41
    RULE_errorStmt = 42
    RULE_eventStmt = 43
    RULE_exitStmt = 44
    RULE_filecopyStmt = 45
    RULE_forEachStmt = 46
    RULE_forNextStmt = 47
    RULE_functionStmt = 48
    RULE_getStmt = 49
    RULE_goSubStmt = 50
    RULE_goToStmt = 51
    RULE_ifThenElseStmt = 52
    RULE_ifBlockStmt = 53
    RULE_ifConditionStmt = 54
    RULE_ifElseIfBlockStmt = 55
    RULE_ifElseBlockStmt = 56
    RULE_implementsStmt = 57
    RULE_inputStmt = 58
    RULE_killStmt = 59
    RULE_letStmt = 60
    RULE_lineInputStmt = 61
    RULE_loadStmt = 62
    RULE_lockStmt = 63
    RULE_lsetStmt = 64
    RULE_macroIfThenElseStmt = 65
    RULE_macroIfBlockStmt = 66
    RULE_macroElseIfBlockStmt = 67
    RULE_macroElseBlockStmt = 68
    RULE_midStmt = 69
    RULE_mkdirStmt = 70
    RULE_nameStmt = 71
    RULE_onErrorStmt = 72
    RULE_onGoToStmt = 73
    RULE_onGoSubStmt = 74
    RULE_openStmt = 75
    RULE_outputList = 76
    RULE_outputList_Expression = 77
    RULE_printStmt = 78
    RULE_propertyGetStmt = 79
    RULE_propertySetStmt = 80
    RULE_propertyLetStmt = 81
    RULE_putStmt = 82
    RULE_raiseEventStmt = 83
    RULE_randomizeStmt = 84
    RULE_redimStmt = 85
    RULE_redimSubStmt = 86
    RULE_resetStmt = 87
    RULE_resumeStmt = 88
    RULE_returnStmt = 89
    RULE_rmdirStmt = 90
    RULE_rsetStmt = 91
    RULE_savepictureStmt = 92
    RULE_saveSettingStmt = 93
    RULE_seekStmt = 94
    RULE_selectCaseStmt = 95
    RULE_sC_Case = 96
    RULE_sC_Cond = 97
    RULE_sC_CondExpr = 98
    RULE_sendkeysStmt = 99
    RULE_setattrStmt = 100
    RULE_setStmt = 101
    RULE_stopStmt = 102
    RULE_subStmt = 103
    RULE_timeStmt = 104
    RULE_typeStmt = 105
    RULE_typeStmt_Element = 106
    RULE_typeOfStmt = 107
    RULE_unloadStmt = 108
    RULE_unlockStmt = 109
    RULE_valueStmt = 110
    RULE_variableStmt = 111
    RULE_variableListStmt = 112
    RULE_variableSubStmt = 113
    RULE_whileWendStmt = 114
    RULE_widthStmt = 115
    RULE_withStmt = 116
    RULE_writeStmt = 117
    RULE_explicitCallStmt = 118
    RULE_eCS_ProcedureCall = 119
    RULE_eCS_MemberProcedureCall = 120
    RULE_implicitCallStmt_InBlock = 121
    RULE_iCS_B_ProcedureCall = 122
    RULE_iCS_B_MemberProcedureCall = 123
    RULE_implicitCallStmt_InStmt = 124
    RULE_iCS_S_VariableOrProcedureCall = 125
    RULE_iCS_S_ProcedureOrArrayCall = 126
    RULE_iCS_S_NestedProcedureCall = 127
    RULE_iCS_S_MembersCall = 128
    RULE_iCS_S_MemberCall = 129
    RULE_iCS_S_DictionaryCall = 130
    RULE_argsCall = 131
    RULE_argCall = 132
    RULE_dictionaryCallStmt = 133
    RULE_argList = 134
    RULE_arg = 135
    RULE_argDefaultValue = 136
    RULE_subscripts = 137
    RULE_subscript = 138
    RULE_ambiguousIdentifier = 139
    RULE_asTypeClause = 140
    RULE_baseType = 141
    RULE_certainIdentifier = 142
    RULE_comparisonOperator = 143
    RULE_complexType = 144
    RULE_fieldLength = 145
    RULE_letterrange = 146
    RULE_lineLabel = 147
    RULE_literal = 148
    RULE_publicPrivateVisibility = 149
    RULE_publicPrivateGlobalVisibility = 150
    RULE_type = 151
    RULE_typeHint = 152
    RULE_visibility = 153
    RULE_ambiguousKeyword = 154

    ruleNames =  [ "startRule", "module", "moduleReferences", "moduleReference", 
                   "moduleReferenceValue", "moduleReferenceComponent", "moduleHeader", 
                   "moduleConfig", "moduleConfigElement", "moduleAttributes", 
                   "moduleOptions", "moduleOption", "moduleBody", "moduleBodyElement", 
                   "controlProperties", "cp_Properties", "cp_SingleProperty", 
                   "cp_PropertyName", "cp_PropertyValue", "cp_NestedProperty", 
                   "cp_ControlType", "cp_ControlIdentifier", "moduleBlock", 
                   "attributeStmt", "block", "blockStmt", "appActivateStmt", 
                   "beepStmt", "chDirStmt", "chDriveStmt", "closeStmt", 
                   "constStmt", "constSubStmt", "dateStmt", "declareStmt", 
                   "deftypeStmt", "deleteSettingStmt", "doLoopStmt", "endStmt", 
                   "enumerationStmt", "enumerationStmt_Constant", "eraseStmt", 
                   "errorStmt", "eventStmt", "exitStmt", "filecopyStmt", 
                   "forEachStmt", "forNextStmt", "functionStmt", "getStmt", 
                   "goSubStmt", "goToStmt", "ifThenElseStmt", "ifBlockStmt", 
                   "ifConditionStmt", "ifElseIfBlockStmt", "ifElseBlockStmt", 
                   "implementsStmt", "inputStmt", "killStmt", "letStmt", 
                   "lineInputStmt", "loadStmt", "lockStmt", "lsetStmt", 
                   "macroIfThenElseStmt", "macroIfBlockStmt", "macroElseIfBlockStmt", 
                   "macroElseBlockStmt", "midStmt", "mkdirStmt", "nameStmt", 
                   "onErrorStmt", "onGoToStmt", "onGoSubStmt", "openStmt", 
                   "outputList", "outputList_Expression", "printStmt", "propertyGetStmt", 
                   "propertySetStmt", "propertyLetStmt", "putStmt", "raiseEventStmt", 
                   "randomizeStmt", "redimStmt", "redimSubStmt", "resetStmt", 
                   "resumeStmt", "returnStmt", "rmdirStmt", "rsetStmt", 
                   "savepictureStmt", "saveSettingStmt", "seekStmt", "selectCaseStmt", 
                   "sC_Case", "sC_Cond", "sC_CondExpr", "sendkeysStmt", 
                   "setattrStmt", "setStmt", "stopStmt", "subStmt", "timeStmt", 
                   "typeStmt", "typeStmt_Element", "typeOfStmt", "unloadStmt", 
                   "unlockStmt", "valueStmt", "variableStmt", "variableListStmt", 
                   "variableSubStmt", "whileWendStmt", "widthStmt", "withStmt", 
                   "writeStmt", "explicitCallStmt", "eCS_ProcedureCall", 
                   "eCS_MemberProcedureCall", "implicitCallStmt_InBlock", 
                   "iCS_B_ProcedureCall", "iCS_B_MemberProcedureCall", "implicitCallStmt_InStmt", 
                   "iCS_S_VariableOrProcedureCall", "iCS_S_ProcedureOrArrayCall", 
                   "iCS_S_NestedProcedureCall", "iCS_S_MembersCall", "iCS_S_MemberCall", 
                   "iCS_S_DictionaryCall", "argsCall", "argCall", "dictionaryCallStmt", 
                   "argList", "arg", "argDefaultValue", "subscripts", "subscript", 
                   "ambiguousIdentifier", "asTypeClause", "baseType", "certainIdentifier", 
                   "comparisonOperator", "complexType", "fieldLength", "letterrange", 
                   "lineLabel", "literal", "publicPrivateVisibility", "publicPrivateGlobalVisibility", 
                   "type", "typeHint", "visibility", "ambiguousKeyword" ]

    EOF = Token.EOF
    ACCESS=1
    ADDRESSOF=2
    ALIAS=3
    AND=4
    ATTRIBUTE=5
    APPACTIVATE=6
    APPEND=7
    AS=8
    BEEP=9
    BEGIN=10
    BEGINPROPERTY=11
    BINARY=12
    BOOLEAN=13
    BYVAL=14
    BYREF=15
    BYTE=16
    CALL=17
    CASE=18
    CHDIR=19
    CHDRIVE=20
    CLASS=21
    CLOSE=22
    COLLECTION=23
    CONST=24
    DATE=25
    DECLARE=26
    DEFBOOL=27
    DEFBYTE=28
    DEFDATE=29
    DEFDBL=30
    DEFDEC=31
    DEFCUR=32
    DEFINT=33
    DEFLNG=34
    DEFOBJ=35
    DEFSNG=36
    DEFSTR=37
    DEFVAR=38
    DELETESETTING=39
    DIM=40
    DO=41
    DOUBLE=42
    EACH=43
    ELSE=44
    ELSEIF=45
    END_ENUM=46
    END_FUNCTION=47
    END_IF=48
    END_PROPERTY=49
    END_SELECT=50
    END_SUB=51
    END_TYPE=52
    END_WITH=53
    END=54
    ENDPROPERTY=55
    ENUM=56
    EQV=57
    ERASE=58
    ERROR=59
    EVENT=60
    EXIT_DO=61
    EXIT_FOR=62
    EXIT_FUNCTION=63
    EXIT_PROPERTY=64
    EXIT_SUB=65
    FALSE=66
    FILECOPY=67
    FRIEND=68
    FOR=69
    FUNCTION=70
    GET=71
    GLOBAL=72
    GOSUB=73
    GOTO=74
    IF=75
    IMP=76
    IMPLEMENTS=77
    IN=78
    INPUT=79
    IS=80
    INTEGER=81
    KILL=82
    LOAD=83
    LOCK=84
    LONG=85
    LOOP=86
    LEN=87
    LET=88
    LIB=89
    LIKE=90
    LINE_INPUT=91
    LOCK_READ=92
    LOCK_WRITE=93
    LOCK_READ_WRITE=94
    LSET=95
    MACRO_IF=96
    MACRO_ELSEIF=97
    MACRO_ELSE=98
    MACRO_END_IF=99
    ME=100
    MID=101
    MKDIR=102
    MOD=103
    NAME=104
    NEXT=105
    NEW=106
    NOT=107
    NOTHING=108
    NULL=109
    OBJECT=110
    ON=111
    ON_ERROR=112
    ON_LOCAL_ERROR=113
    OPEN=114
    OPTIONAL=115
    OPTION_BASE=116
    OPTION_EXPLICIT=117
    OPTION_COMPARE=118
    OPTION_PRIVATE_MODULE=119
    OR=120
    OUTPUT=121
    PARAMARRAY=122
    PRESERVE=123
    PRINT=124
    PRIVATE=125
    PROPERTY_GET=126
    PROPERTY_LET=127
    PROPERTY_SET=128
    PUBLIC=129
    PUT=130
    RANDOM=131
    RANDOMIZE=132
    RAISEEVENT=133
    READ=134
    READ_WRITE=135
    REDIM=136
    REM=137
    RESET=138
    RESUME=139
    RETURN=140
    RMDIR=141
    RSET=142
    SAVEPICTURE=143
    SAVESETTING=144
    SEEK=145
    SELECT=146
    SENDKEYS=147
    SET=148
    SETATTR=149
    SHARED=150
    SINGLE=151
    SPC=152
    STATIC=153
    STEP=154
    STOP=155
    STRING=156
    SUB=157
    TAB=158
    TEXT=159
    THEN=160
    TIME=161
    TO=162
    TRUE=163
    TYPE=164
    TYPEOF=165
    UNLOAD=166
    UNLOCK=167
    UNTIL=168
    VARIANT=169
    VERSION=170
    WEND=171
    WHILE=172
    WIDTH=173
    WITH=174
    WITHEVENTS=175
    WRITE=176
    XOR=177
    AMPERSAND=178
    ASSIGN=179
    AT=180
    COLON=181
    COMMA=182
    DIV=183
    DOLLAR=184
    DOT=185
    EQ=186
    EXCLAMATIONMARK=187
    GEQ=188
    GT=189
    HASH=190
    LEQ=191
    LBRACE=192
    LPAREN=193
    LT=194
    MINUS=195
    MINUS_EQ=196
    MULT=197
    NEQ=198
    PERCENT=199
    PLUS=200
    PLUS_EQ=201
    POW=202
    RBRACE=203
    RPAREN=204
    SEMICOLON=205
    L_SQUARE_BRACKET=206
    R_SQUARE_BRACKET=207
    STRINGLITERAL=208
    DATELITERAL=209
    COLORLITERAL=210
    INTEGERLITERAL=211
    DOUBLELITERAL=212
    FILENUMBER=213
    OCTALLITERAL=214
    FRX_OFFSET=215
    GUID=216
    IDENTIFIER=217
    LINE_CONTINUATION=218
    NEWLINE=219
    COMMENT=220
    WS=221

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class StartRuleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def module(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ModuleContext,0)


        def EOF(self):
            return self.getToken(VisualBasic6Parser.EOF, 0)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_startRule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartRule" ):
                listener.enterStartRule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartRule" ):
                listener.exitStartRule(self)




    def startRule(self):

        localctx = VisualBasic6Parser.StartRuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_startRule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 310
            self.module()
            self.state = 311
            self.match(VisualBasic6Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModuleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.NEWLINE)
            else:
                return self.getToken(VisualBasic6Parser.NEWLINE, i)

        def moduleHeader(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ModuleHeaderContext,0)


        def moduleReferences(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ModuleReferencesContext,0)


        def controlProperties(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ControlPropertiesContext,0)


        def moduleConfig(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ModuleConfigContext,0)


        def moduleAttributes(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ModuleAttributesContext,0)


        def moduleOptions(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ModuleOptionsContext,0)


        def moduleBody(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ModuleBodyContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_module

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule" ):
                listener.enterModule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule" ):
                listener.exitModule(self)




    def module(self):

        localctx = VisualBasic6Parser.ModuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_module)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 313
                self.match(VisualBasic6Parser.WS)


            self.state = 319
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 316
                    self.match(VisualBasic6Parser.NEWLINE) 
                self.state = 321
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)

            self.state = 328
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.state = 322
                self.moduleHeader()
                self.state = 324 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 323
                        self.match(VisualBasic6Parser.NEWLINE)

                    else:
                        raise NoViableAltException(self)
                    self.state = 326 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,2,self._ctx)



            self.state = 331
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.state = 330
                self.moduleReferences()


            self.state = 336
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 333
                    self.match(VisualBasic6Parser.NEWLINE) 
                self.state = 338
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

            self.state = 340
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 339
                self.controlProperties()


            self.state = 345
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 342
                    self.match(VisualBasic6Parser.NEWLINE) 
                self.state = 347
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

            self.state = 349
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 348
                self.moduleConfig()


            self.state = 354
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 351
                    self.match(VisualBasic6Parser.NEWLINE) 
                self.state = 356
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

            self.state = 358
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 357
                self.moduleAttributes()


            self.state = 363
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,11,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 360
                    self.match(VisualBasic6Parser.NEWLINE) 
                self.state = 365
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

            self.state = 367
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 366
                self.moduleOptions()


            self.state = 372
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,13,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 369
                    self.match(VisualBasic6Parser.NEWLINE) 
                self.state = 374
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

            self.state = 376
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.state = 375
                self.moduleBody()


            self.state = 381
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VisualBasic6Parser.NEWLINE:
                self.state = 378
                self.match(VisualBasic6Parser.NEWLINE)
                self.state = 383
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 384
                self.match(VisualBasic6Parser.WS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModuleReferencesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def moduleReference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ModuleReferenceContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ModuleReferenceContext,i)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_moduleReferences

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleReferences" ):
                listener.enterModuleReferences(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleReferences" ):
                listener.exitModuleReferences(self)




    def moduleReferences(self):

        localctx = VisualBasic6Parser.ModuleReferencesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_moduleReferences)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 388 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 387
                    self.moduleReference()

                else:
                    raise NoViableAltException(self)
                self.state = 390 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModuleReferenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT(self):
            return self.getToken(VisualBasic6Parser.OBJECT, 0)

        def EQ(self):
            return self.getToken(VisualBasic6Parser.EQ, 0)

        def moduleReferenceValue(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ModuleReferenceValueContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def SEMICOLON(self):
            return self.getToken(VisualBasic6Parser.SEMICOLON, 0)

        def moduleReferenceComponent(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ModuleReferenceComponentContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.NEWLINE)
            else:
                return self.getToken(VisualBasic6Parser.NEWLINE, i)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_moduleReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleReference" ):
                listener.enterModuleReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleReference" ):
                listener.exitModuleReference(self)




    def moduleReference(self):

        localctx = VisualBasic6Parser.ModuleReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_moduleReference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 392
            self.match(VisualBasic6Parser.OBJECT)
            self.state = 394
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 393
                self.match(VisualBasic6Parser.WS)


            self.state = 396
            self.match(VisualBasic6Parser.EQ)
            self.state = 398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 397
                self.match(VisualBasic6Parser.WS)


            self.state = 400
            self.moduleReferenceValue()
            self.state = 406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.SEMICOLON:
                self.state = 401
                self.match(VisualBasic6Parser.SEMICOLON)
                self.state = 403
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualBasic6Parser.WS:
                    self.state = 402
                    self.match(VisualBasic6Parser.WS)


                self.state = 405
                self.moduleReferenceComponent()


            self.state = 411
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,22,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 408
                    self.match(VisualBasic6Parser.NEWLINE) 
                self.state = 413
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModuleReferenceValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRINGLITERAL(self):
            return self.getToken(VisualBasic6Parser.STRINGLITERAL, 0)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_moduleReferenceValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleReferenceValue" ):
                listener.enterModuleReferenceValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleReferenceValue" ):
                listener.exitModuleReferenceValue(self)




    def moduleReferenceValue(self):

        localctx = VisualBasic6Parser.ModuleReferenceValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_moduleReferenceValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 414
            self.match(VisualBasic6Parser.STRINGLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModuleReferenceComponentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRINGLITERAL(self):
            return self.getToken(VisualBasic6Parser.STRINGLITERAL, 0)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_moduleReferenceComponent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleReferenceComponent" ):
                listener.enterModuleReferenceComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleReferenceComponent" ):
                listener.exitModuleReferenceComponent(self)




    def moduleReferenceComponent(self):

        localctx = VisualBasic6Parser.ModuleReferenceComponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_moduleReferenceComponent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 416
            self.match(VisualBasic6Parser.STRINGLITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModuleHeaderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VERSION(self):
            return self.getToken(VisualBasic6Parser.VERSION, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def DOUBLELITERAL(self):
            return self.getToken(VisualBasic6Parser.DOUBLELITERAL, 0)

        def CLASS(self):
            return self.getToken(VisualBasic6Parser.CLASS, 0)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_moduleHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleHeader" ):
                listener.enterModuleHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleHeader" ):
                listener.exitModuleHeader(self)




    def moduleHeader(self):

        localctx = VisualBasic6Parser.ModuleHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_moduleHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self.match(VisualBasic6Parser.VERSION)
            self.state = 419
            self.match(VisualBasic6Parser.WS)
            self.state = 420
            self.match(VisualBasic6Parser.DOUBLELITERAL)
            self.state = 423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 421
                self.match(VisualBasic6Parser.WS)
                self.state = 422
                self.match(VisualBasic6Parser.CLASS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModuleConfigContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(VisualBasic6Parser.BEGIN, 0)

        def END(self):
            return self.getToken(VisualBasic6Parser.END, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.NEWLINE)
            else:
                return self.getToken(VisualBasic6Parser.NEWLINE, i)

        def moduleConfigElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ModuleConfigElementContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ModuleConfigElementContext,i)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_moduleConfig

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleConfig" ):
                listener.enterModuleConfig(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleConfig" ):
                listener.exitModuleConfig(self)




    def moduleConfig(self):

        localctx = VisualBasic6Parser.ModuleConfigContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_moduleConfig)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 425
            self.match(VisualBasic6Parser.BEGIN)
            self.state = 427 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 426
                self.match(VisualBasic6Parser.NEWLINE)
                self.state = 429 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==VisualBasic6Parser.NEWLINE):
                    break

            self.state = 432 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 431
                    self.moduleConfigElement()

                else:
                    raise NoViableAltException(self)
                self.state = 434 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

            self.state = 436
            self.match(VisualBasic6Parser.END)
            self.state = 438 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 437
                    self.match(VisualBasic6Parser.NEWLINE)

                else:
                    raise NoViableAltException(self)
                self.state = 440 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModuleConfigElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(VisualBasic6Parser.AmbiguousIdentifierContext,0)


        def EQ(self):
            return self.getToken(VisualBasic6Parser.EQ, 0)

        def literal(self):
            return self.getTypedRuleContext(VisualBasic6Parser.LiteralContext,0)


        def NEWLINE(self):
            return self.getToken(VisualBasic6Parser.NEWLINE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_moduleConfigElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleConfigElement" ):
                listener.enterModuleConfigElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleConfigElement" ):
                listener.exitModuleConfigElement(self)




    def moduleConfigElement(self):

        localctx = VisualBasic6Parser.ModuleConfigElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_moduleConfigElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 442
            self.ambiguousIdentifier()
            self.state = 444
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 443
                self.match(VisualBasic6Parser.WS)


            self.state = 446
            self.match(VisualBasic6Parser.EQ)
            self.state = 448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 447
                self.match(VisualBasic6Parser.WS)


            self.state = 450
            self.literal()
            self.state = 451
            self.match(VisualBasic6Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModuleAttributesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributeStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.AttributeStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.AttributeStmtContext,i)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.NEWLINE)
            else:
                return self.getToken(VisualBasic6Parser.NEWLINE, i)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_moduleAttributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleAttributes" ):
                listener.enterModuleAttributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleAttributes" ):
                listener.exitModuleAttributes(self)




    def moduleAttributes(self):

        localctx = VisualBasic6Parser.ModuleAttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_moduleAttributes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 459 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 453
                    self.attributeStmt()
                    self.state = 455 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 454
                            self.match(VisualBasic6Parser.NEWLINE)

                        else:
                            raise NoViableAltException(self)
                        self.state = 457 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,29,self._ctx)


                else:
                    raise NoViableAltException(self)
                self.state = 461 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModuleOptionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def moduleOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ModuleOptionContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ModuleOptionContext,i)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.NEWLINE)
            else:
                return self.getToken(VisualBasic6Parser.NEWLINE, i)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_moduleOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleOptions" ):
                listener.enterModuleOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleOptions" ):
                listener.exitModuleOptions(self)




    def moduleOptions(self):

        localctx = VisualBasic6Parser.ModuleOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_moduleOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 469 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 463
                    self.moduleOption()
                    self.state = 465 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 464
                            self.match(VisualBasic6Parser.NEWLINE)

                        else:
                            raise NoViableAltException(self)
                        self.state = 467 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,31,self._ctx)


                else:
                    raise NoViableAltException(self)
                self.state = 471 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModuleOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_moduleOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class OptionExplicitStmtContext(ModuleOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualBasic6Parser.ModuleOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPTION_EXPLICIT(self):
            return self.getToken(VisualBasic6Parser.OPTION_EXPLICIT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionExplicitStmt" ):
                listener.enterOptionExplicitStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionExplicitStmt" ):
                listener.exitOptionExplicitStmt(self)


    class OptionBaseStmtContext(ModuleOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualBasic6Parser.ModuleOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPTION_BASE(self):
            return self.getToken(VisualBasic6Parser.OPTION_BASE, 0)
        def WS(self):
            return self.getToken(VisualBasic6Parser.WS, 0)
        def INTEGERLITERAL(self):
            return self.getToken(VisualBasic6Parser.INTEGERLITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionBaseStmt" ):
                listener.enterOptionBaseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionBaseStmt" ):
                listener.exitOptionBaseStmt(self)


    class OptionPrivateModuleStmtContext(ModuleOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualBasic6Parser.ModuleOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPTION_PRIVATE_MODULE(self):
            return self.getToken(VisualBasic6Parser.OPTION_PRIVATE_MODULE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionPrivateModuleStmt" ):
                listener.enterOptionPrivateModuleStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionPrivateModuleStmt" ):
                listener.exitOptionPrivateModuleStmt(self)


    class OptionCompareStmtContext(ModuleOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualBasic6Parser.ModuleOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPTION_COMPARE(self):
            return self.getToken(VisualBasic6Parser.OPTION_COMPARE, 0)
        def WS(self):
            return self.getToken(VisualBasic6Parser.WS, 0)
        def BINARY(self):
            return self.getToken(VisualBasic6Parser.BINARY, 0)
        def TEXT(self):
            return self.getToken(VisualBasic6Parser.TEXT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionCompareStmt" ):
                listener.enterOptionCompareStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionCompareStmt" ):
                listener.exitOptionCompareStmt(self)



    def moduleOption(self):

        localctx = VisualBasic6Parser.ModuleOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_moduleOption)
        self._la = 0 # Token type
        try:
            self.state = 481
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualBasic6Parser.OPTION_BASE]:
                localctx = VisualBasic6Parser.OptionBaseStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 473
                self.match(VisualBasic6Parser.OPTION_BASE)
                self.state = 474
                self.match(VisualBasic6Parser.WS)
                self.state = 475
                self.match(VisualBasic6Parser.INTEGERLITERAL)
                pass
            elif token in [VisualBasic6Parser.OPTION_COMPARE]:
                localctx = VisualBasic6Parser.OptionCompareStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 476
                self.match(VisualBasic6Parser.OPTION_COMPARE)
                self.state = 477
                self.match(VisualBasic6Parser.WS)
                self.state = 478
                _la = self._input.LA(1)
                if not(_la==VisualBasic6Parser.BINARY or _la==VisualBasic6Parser.TEXT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [VisualBasic6Parser.OPTION_EXPLICIT]:
                localctx = VisualBasic6Parser.OptionExplicitStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 479
                self.match(VisualBasic6Parser.OPTION_EXPLICIT)
                pass
            elif token in [VisualBasic6Parser.OPTION_PRIVATE_MODULE]:
                localctx = VisualBasic6Parser.OptionPrivateModuleStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 480
                self.match(VisualBasic6Parser.OPTION_PRIVATE_MODULE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModuleBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def moduleBodyElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ModuleBodyElementContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ModuleBodyElementContext,i)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.NEWLINE)
            else:
                return self.getToken(VisualBasic6Parser.NEWLINE, i)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_moduleBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleBody" ):
                listener.enterModuleBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleBody" ):
                listener.exitModuleBody(self)




    def moduleBody(self):

        localctx = VisualBasic6Parser.ModuleBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_moduleBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 483
            self.moduleBodyElement()
            self.state = 492
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,35,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 485 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 484
                        self.match(VisualBasic6Parser.NEWLINE)
                        self.state = 487 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==VisualBasic6Parser.NEWLINE):
                            break

                    self.state = 489
                    self.moduleBodyElement() 
                self.state = 494
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModuleBodyElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def moduleBlock(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ModuleBlockContext,0)


        def moduleOption(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ModuleOptionContext,0)


        def declareStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.DeclareStmtContext,0)


        def enumerationStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.EnumerationStmtContext,0)


        def eventStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.EventStmtContext,0)


        def functionStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.FunctionStmtContext,0)


        def macroIfThenElseStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.MacroIfThenElseStmtContext,0)


        def propertyGetStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.PropertyGetStmtContext,0)


        def propertySetStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.PropertySetStmtContext,0)


        def propertyLetStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.PropertyLetStmtContext,0)


        def subStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.SubStmtContext,0)


        def typeStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.TypeStmtContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_moduleBodyElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleBodyElement" ):
                listener.enterModuleBodyElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleBodyElement" ):
                listener.exitModuleBodyElement(self)




    def moduleBodyElement(self):

        localctx = VisualBasic6Parser.ModuleBodyElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_moduleBodyElement)
        try:
            self.state = 507
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 495
                self.moduleBlock()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 496
                self.moduleOption()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 497
                self.declareStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 498
                self.enumerationStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 499
                self.eventStmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 500
                self.functionStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 501
                self.macroIfThenElseStmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 502
                self.propertyGetStmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 503
                self.propertySetStmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 504
                self.propertyLetStmt()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 505
                self.subStmt()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 506
                self.typeStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ControlPropertiesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(VisualBasic6Parser.BEGIN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def cp_ControlType(self):
            return self.getTypedRuleContext(VisualBasic6Parser.Cp_ControlTypeContext,0)


        def cp_ControlIdentifier(self):
            return self.getTypedRuleContext(VisualBasic6Parser.Cp_ControlIdentifierContext,0)


        def END(self):
            return self.getToken(VisualBasic6Parser.END, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.NEWLINE)
            else:
                return self.getToken(VisualBasic6Parser.NEWLINE, i)

        def cp_Properties(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.Cp_PropertiesContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.Cp_PropertiesContext,i)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_controlProperties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterControlProperties" ):
                listener.enterControlProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitControlProperties" ):
                listener.exitControlProperties(self)




    def controlProperties(self):

        localctx = VisualBasic6Parser.ControlPropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_controlProperties)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 510
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 509
                self.match(VisualBasic6Parser.WS)


            self.state = 512
            self.match(VisualBasic6Parser.BEGIN)
            self.state = 513
            self.match(VisualBasic6Parser.WS)
            self.state = 514
            self.cp_ControlType()
            self.state = 515
            self.match(VisualBasic6Parser.WS)
            self.state = 516
            self.cp_ControlIdentifier()
            self.state = 518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 517
                self.match(VisualBasic6Parser.WS)


            self.state = 521 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 520
                self.match(VisualBasic6Parser.NEWLINE)
                self.state = 523 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==VisualBasic6Parser.NEWLINE):
                    break

            self.state = 526 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 525
                    self.cp_Properties()

                else:
                    raise NoViableAltException(self)
                self.state = 528 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

            self.state = 530
            self.match(VisualBasic6Parser.END)
            self.state = 534
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,41,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 531
                    self.match(VisualBasic6Parser.NEWLINE) 
                self.state = 536
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,41,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cp_PropertiesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cp_SingleProperty(self):
            return self.getTypedRuleContext(VisualBasic6Parser.Cp_SinglePropertyContext,0)


        def cp_NestedProperty(self):
            return self.getTypedRuleContext(VisualBasic6Parser.Cp_NestedPropertyContext,0)


        def controlProperties(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ControlPropertiesContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_cp_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCp_Properties" ):
                listener.enterCp_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCp_Properties" ):
                listener.exitCp_Properties(self)




    def cp_Properties(self):

        localctx = VisualBasic6Parser.Cp_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_cp_Properties)
        try:
            self.state = 540
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 537
                self.cp_SingleProperty()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 538
                self.cp_NestedProperty()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 539
                self.controlProperties()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cp_SinglePropertyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ImplicitCallStmt_InStmtContext,0)


        def EQ(self):
            return self.getToken(VisualBasic6Parser.EQ, 0)

        def cp_PropertyValue(self):
            return self.getTypedRuleContext(VisualBasic6Parser.Cp_PropertyValueContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def FRX_OFFSET(self):
            return self.getToken(VisualBasic6Parser.FRX_OFFSET, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.NEWLINE)
            else:
                return self.getToken(VisualBasic6Parser.NEWLINE, i)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_cp_SingleProperty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCp_SingleProperty" ):
                listener.enterCp_SingleProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCp_SingleProperty" ):
                listener.exitCp_SingleProperty(self)




    def cp_SingleProperty(self):

        localctx = VisualBasic6Parser.Cp_SinglePropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_cp_SingleProperty)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 543
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 542
                self.match(VisualBasic6Parser.WS)


            self.state = 545
            self.implicitCallStmt_InStmt()
            self.state = 547
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 546
                self.match(VisualBasic6Parser.WS)


            self.state = 549
            self.match(VisualBasic6Parser.EQ)
            self.state = 551
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 550
                self.match(VisualBasic6Parser.WS)


            self.state = 554
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.state = 553
                self.match(VisualBasic6Parser.DOLLAR)


            self.state = 556
            self.cp_PropertyValue()
            self.state = 558
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.FRX_OFFSET:
                self.state = 557
                self.match(VisualBasic6Parser.FRX_OFFSET)


            self.state = 561 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 560
                self.match(VisualBasic6Parser.NEWLINE)
                self.state = 563 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==VisualBasic6Parser.NEWLINE):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cp_PropertyNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.AmbiguousIdentifierContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.AmbiguousIdentifierContext,i)


        def OBJECT(self):
            return self.getToken(VisualBasic6Parser.OBJECT, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.DOT)
            else:
                return self.getToken(VisualBasic6Parser.DOT, i)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.LPAREN)
            else:
                return self.getToken(VisualBasic6Parser.LPAREN, i)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.LiteralContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.LiteralContext,i)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.RPAREN)
            else:
                return self.getToken(VisualBasic6Parser.RPAREN, i)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_cp_PropertyName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCp_PropertyName" ):
                listener.enterCp_PropertyName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCp_PropertyName" ):
                listener.exitCp_PropertyName(self)




    def cp_PropertyName(self):

        localctx = VisualBasic6Parser.Cp_PropertyNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_cp_PropertyName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 567
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 565
                self.match(VisualBasic6Parser.OBJECT)
                self.state = 566
                self.match(VisualBasic6Parser.DOT)


            self.state = 569
            self.ambiguousIdentifier()
            self.state = 574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.LPAREN:
                self.state = 570
                self.match(VisualBasic6Parser.LPAREN)
                self.state = 571
                self.literal()
                self.state = 572
                self.match(VisualBasic6Parser.RPAREN)


            self.state = 586
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VisualBasic6Parser.DOT:
                self.state = 576
                self.match(VisualBasic6Parser.DOT)
                self.state = 577
                self.ambiguousIdentifier()
                self.state = 582
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualBasic6Parser.LPAREN:
                    self.state = 578
                    self.match(VisualBasic6Parser.LPAREN)
                    self.state = 579
                    self.literal()
                    self.state = 580
                    self.match(VisualBasic6Parser.RPAREN)


                self.state = 588
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cp_PropertyValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(VisualBasic6Parser.LiteralContext,0)


        def POW(self):
            return self.getToken(VisualBasic6Parser.POW, 0)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(VisualBasic6Parser.AmbiguousIdentifierContext,0)


        def DOLLAR(self):
            return self.getToken(VisualBasic6Parser.DOLLAR, 0)

        def LBRACE(self):
            return self.getToken(VisualBasic6Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(VisualBasic6Parser.RBRACE, 0)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_cp_PropertyValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCp_PropertyValue" ):
                listener.enterCp_PropertyValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCp_PropertyValue" ):
                listener.exitCp_PropertyValue(self)




    def cp_PropertyValue(self):

        localctx = VisualBasic6Parser.Cp_PropertyValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_cp_PropertyValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 590
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.DOLLAR:
                self.state = 589
                self.match(VisualBasic6Parser.DOLLAR)


            self.state = 599
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualBasic6Parser.FALSE, VisualBasic6Parser.NOTHING, VisualBasic6Parser.NULL, VisualBasic6Parser.TRUE, VisualBasic6Parser.STRINGLITERAL, VisualBasic6Parser.DATELITERAL, VisualBasic6Parser.COLORLITERAL, VisualBasic6Parser.INTEGERLITERAL, VisualBasic6Parser.DOUBLELITERAL, VisualBasic6Parser.FILENUMBER, VisualBasic6Parser.OCTALLITERAL]:
                self.state = 592
                self.literal()
                pass
            elif token in [VisualBasic6Parser.LBRACE]:
                self.state = 593
                self.match(VisualBasic6Parser.LBRACE)
                self.state = 594
                self.ambiguousIdentifier()
                self.state = 595
                self.match(VisualBasic6Parser.RBRACE)
                pass
            elif token in [VisualBasic6Parser.POW]:
                self.state = 597
                self.match(VisualBasic6Parser.POW)
                self.state = 598
                self.ambiguousIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cp_NestedPropertyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGINPROPERTY(self):
            return self.getToken(VisualBasic6Parser.BEGINPROPERTY, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(VisualBasic6Parser.AmbiguousIdentifierContext,0)


        def ENDPROPERTY(self):
            return self.getToken(VisualBasic6Parser.ENDPROPERTY, 0)

        def LPAREN(self):
            return self.getToken(VisualBasic6Parser.LPAREN, 0)

        def INTEGERLITERAL(self):
            return self.getToken(VisualBasic6Parser.INTEGERLITERAL, 0)

        def RPAREN(self):
            return self.getToken(VisualBasic6Parser.RPAREN, 0)

        def GUID(self):
            return self.getToken(VisualBasic6Parser.GUID, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.NEWLINE)
            else:
                return self.getToken(VisualBasic6Parser.NEWLINE, i)

        def cp_Properties(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.Cp_PropertiesContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.Cp_PropertiesContext,i)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_cp_NestedProperty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCp_NestedProperty" ):
                listener.enterCp_NestedProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCp_NestedProperty" ):
                listener.exitCp_NestedProperty(self)




    def cp_NestedProperty(self):

        localctx = VisualBasic6Parser.Cp_NestedPropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_cp_NestedProperty)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 601
                self.match(VisualBasic6Parser.WS)


            self.state = 604
            self.match(VisualBasic6Parser.BEGINPROPERTY)
            self.state = 605
            self.match(VisualBasic6Parser.WS)
            self.state = 606
            self.ambiguousIdentifier()
            self.state = 610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.LPAREN:
                self.state = 607
                self.match(VisualBasic6Parser.LPAREN)
                self.state = 608
                self.match(VisualBasic6Parser.INTEGERLITERAL)
                self.state = 609
                self.match(VisualBasic6Parser.RPAREN)


            self.state = 614
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 612
                self.match(VisualBasic6Parser.WS)
                self.state = 613
                self.match(VisualBasic6Parser.GUID)


            self.state = 617 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 616
                self.match(VisualBasic6Parser.NEWLINE)
                self.state = 619 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==VisualBasic6Parser.NEWLINE):
                    break

            self.state = 626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualBasic6Parser.ACCESS) | (1 << VisualBasic6Parser.ADDRESSOF) | (1 << VisualBasic6Parser.ALIAS) | (1 << VisualBasic6Parser.AND) | (1 << VisualBasic6Parser.ATTRIBUTE) | (1 << VisualBasic6Parser.APPACTIVATE) | (1 << VisualBasic6Parser.APPEND) | (1 << VisualBasic6Parser.AS) | (1 << VisualBasic6Parser.BEEP) | (1 << VisualBasic6Parser.BEGIN) | (1 << VisualBasic6Parser.BEGINPROPERTY) | (1 << VisualBasic6Parser.BINARY) | (1 << VisualBasic6Parser.BOOLEAN) | (1 << VisualBasic6Parser.BYVAL) | (1 << VisualBasic6Parser.BYREF) | (1 << VisualBasic6Parser.BYTE) | (1 << VisualBasic6Parser.CALL) | (1 << VisualBasic6Parser.CASE) | (1 << VisualBasic6Parser.CHDIR) | (1 << VisualBasic6Parser.CHDRIVE) | (1 << VisualBasic6Parser.CLASS) | (1 << VisualBasic6Parser.CLOSE) | (1 << VisualBasic6Parser.COLLECTION) | (1 << VisualBasic6Parser.CONST) | (1 << VisualBasic6Parser.DATE) | (1 << VisualBasic6Parser.DECLARE) | (1 << VisualBasic6Parser.DEFBOOL) | (1 << VisualBasic6Parser.DEFBYTE) | (1 << VisualBasic6Parser.DEFDATE) | (1 << VisualBasic6Parser.DEFDBL) | (1 << VisualBasic6Parser.DEFDEC) | (1 << VisualBasic6Parser.DEFCUR) | (1 << VisualBasic6Parser.DEFINT) | (1 << VisualBasic6Parser.DEFLNG) | (1 << VisualBasic6Parser.DEFOBJ) | (1 << VisualBasic6Parser.DEFSNG) | (1 << VisualBasic6Parser.DEFSTR) | (1 << VisualBasic6Parser.DEFVAR) | (1 << VisualBasic6Parser.DELETESETTING) | (1 << VisualBasic6Parser.DIM) | (1 << VisualBasic6Parser.DO) | (1 << VisualBasic6Parser.DOUBLE) | (1 << VisualBasic6Parser.EACH) | (1 << VisualBasic6Parser.ELSE) | (1 << VisualBasic6Parser.ELSEIF) | (1 << VisualBasic6Parser.END) | (1 << VisualBasic6Parser.ENUM) | (1 << VisualBasic6Parser.EQV) | (1 << VisualBasic6Parser.ERASE) | (1 << VisualBasic6Parser.ERROR) | (1 << VisualBasic6Parser.EVENT))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (VisualBasic6Parser.FALSE - 66)) | (1 << (VisualBasic6Parser.FILECOPY - 66)) | (1 << (VisualBasic6Parser.FRIEND - 66)) | (1 << (VisualBasic6Parser.FOR - 66)) | (1 << (VisualBasic6Parser.FUNCTION - 66)) | (1 << (VisualBasic6Parser.GET - 66)) | (1 << (VisualBasic6Parser.GLOBAL - 66)) | (1 << (VisualBasic6Parser.GOSUB - 66)) | (1 << (VisualBasic6Parser.GOTO - 66)) | (1 << (VisualBasic6Parser.IF - 66)) | (1 << (VisualBasic6Parser.IMP - 66)) | (1 << (VisualBasic6Parser.IMPLEMENTS - 66)) | (1 << (VisualBasic6Parser.IN - 66)) | (1 << (VisualBasic6Parser.INPUT - 66)) | (1 << (VisualBasic6Parser.IS - 66)) | (1 << (VisualBasic6Parser.INTEGER - 66)) | (1 << (VisualBasic6Parser.KILL - 66)) | (1 << (VisualBasic6Parser.LOAD - 66)) | (1 << (VisualBasic6Parser.LOCK - 66)) | (1 << (VisualBasic6Parser.LONG - 66)) | (1 << (VisualBasic6Parser.LOOP - 66)) | (1 << (VisualBasic6Parser.LEN - 66)) | (1 << (VisualBasic6Parser.LET - 66)) | (1 << (VisualBasic6Parser.LIB - 66)) | (1 << (VisualBasic6Parser.LIKE - 66)) | (1 << (VisualBasic6Parser.LSET - 66)) | (1 << (VisualBasic6Parser.ME - 66)) | (1 << (VisualBasic6Parser.MID - 66)) | (1 << (VisualBasic6Parser.MKDIR - 66)) | (1 << (VisualBasic6Parser.MOD - 66)) | (1 << (VisualBasic6Parser.NAME - 66)) | (1 << (VisualBasic6Parser.NEXT - 66)) | (1 << (VisualBasic6Parser.NEW - 66)) | (1 << (VisualBasic6Parser.NOT - 66)) | (1 << (VisualBasic6Parser.NOTHING - 66)) | (1 << (VisualBasic6Parser.NULL - 66)) | (1 << (VisualBasic6Parser.OBJECT - 66)) | (1 << (VisualBasic6Parser.ON - 66)) | (1 << (VisualBasic6Parser.OPEN - 66)) | (1 << (VisualBasic6Parser.OPTIONAL - 66)) | (1 << (VisualBasic6Parser.OR - 66)) | (1 << (VisualBasic6Parser.OUTPUT - 66)) | (1 << (VisualBasic6Parser.PARAMARRAY - 66)) | (1 << (VisualBasic6Parser.PRESERVE - 66)) | (1 << (VisualBasic6Parser.PRINT - 66)) | (1 << (VisualBasic6Parser.PRIVATE - 66)) | (1 << (VisualBasic6Parser.PUBLIC - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (VisualBasic6Parser.PUT - 130)) | (1 << (VisualBasic6Parser.RANDOM - 130)) | (1 << (VisualBasic6Parser.RANDOMIZE - 130)) | (1 << (VisualBasic6Parser.RAISEEVENT - 130)) | (1 << (VisualBasic6Parser.READ - 130)) | (1 << (VisualBasic6Parser.REDIM - 130)) | (1 << (VisualBasic6Parser.REM - 130)) | (1 << (VisualBasic6Parser.RESET - 130)) | (1 << (VisualBasic6Parser.RESUME - 130)) | (1 << (VisualBasic6Parser.RETURN - 130)) | (1 << (VisualBasic6Parser.RMDIR - 130)) | (1 << (VisualBasic6Parser.RSET - 130)) | (1 << (VisualBasic6Parser.SAVEPICTURE - 130)) | (1 << (VisualBasic6Parser.SAVESETTING - 130)) | (1 << (VisualBasic6Parser.SEEK - 130)) | (1 << (VisualBasic6Parser.SELECT - 130)) | (1 << (VisualBasic6Parser.SENDKEYS - 130)) | (1 << (VisualBasic6Parser.SET - 130)) | (1 << (VisualBasic6Parser.SETATTR - 130)) | (1 << (VisualBasic6Parser.SHARED - 130)) | (1 << (VisualBasic6Parser.SINGLE - 130)) | (1 << (VisualBasic6Parser.SPC - 130)) | (1 << (VisualBasic6Parser.STATIC - 130)) | (1 << (VisualBasic6Parser.STEP - 130)) | (1 << (VisualBasic6Parser.STOP - 130)) | (1 << (VisualBasic6Parser.STRING - 130)) | (1 << (VisualBasic6Parser.SUB - 130)) | (1 << (VisualBasic6Parser.TAB - 130)) | (1 << (VisualBasic6Parser.TEXT - 130)) | (1 << (VisualBasic6Parser.THEN - 130)) | (1 << (VisualBasic6Parser.TIME - 130)) | (1 << (VisualBasic6Parser.TO - 130)) | (1 << (VisualBasic6Parser.TRUE - 130)) | (1 << (VisualBasic6Parser.TYPE - 130)) | (1 << (VisualBasic6Parser.TYPEOF - 130)) | (1 << (VisualBasic6Parser.UNLOAD - 130)) | (1 << (VisualBasic6Parser.UNLOCK - 130)) | (1 << (VisualBasic6Parser.UNTIL - 130)) | (1 << (VisualBasic6Parser.VARIANT - 130)) | (1 << (VisualBasic6Parser.VERSION - 130)) | (1 << (VisualBasic6Parser.WEND - 130)) | (1 << (VisualBasic6Parser.WHILE - 130)) | (1 << (VisualBasic6Parser.WIDTH - 130)) | (1 << (VisualBasic6Parser.WITH - 130)) | (1 << (VisualBasic6Parser.WITHEVENTS - 130)) | (1 << (VisualBasic6Parser.WRITE - 130)) | (1 << (VisualBasic6Parser.XOR - 130)) | (1 << (VisualBasic6Parser.DOT - 130)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 130)))) != 0) or ((((_la - 206)) & ~0x3f) == 0 and ((1 << (_la - 206)) & ((1 << (VisualBasic6Parser.L_SQUARE_BRACKET - 206)) | (1 << (VisualBasic6Parser.IDENTIFIER - 206)) | (1 << (VisualBasic6Parser.WS - 206)))) != 0):
                self.state = 622 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 621
                    self.cp_Properties()
                    self.state = 624 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualBasic6Parser.ACCESS) | (1 << VisualBasic6Parser.ADDRESSOF) | (1 << VisualBasic6Parser.ALIAS) | (1 << VisualBasic6Parser.AND) | (1 << VisualBasic6Parser.ATTRIBUTE) | (1 << VisualBasic6Parser.APPACTIVATE) | (1 << VisualBasic6Parser.APPEND) | (1 << VisualBasic6Parser.AS) | (1 << VisualBasic6Parser.BEEP) | (1 << VisualBasic6Parser.BEGIN) | (1 << VisualBasic6Parser.BEGINPROPERTY) | (1 << VisualBasic6Parser.BINARY) | (1 << VisualBasic6Parser.BOOLEAN) | (1 << VisualBasic6Parser.BYVAL) | (1 << VisualBasic6Parser.BYREF) | (1 << VisualBasic6Parser.BYTE) | (1 << VisualBasic6Parser.CALL) | (1 << VisualBasic6Parser.CASE) | (1 << VisualBasic6Parser.CHDIR) | (1 << VisualBasic6Parser.CHDRIVE) | (1 << VisualBasic6Parser.CLASS) | (1 << VisualBasic6Parser.CLOSE) | (1 << VisualBasic6Parser.COLLECTION) | (1 << VisualBasic6Parser.CONST) | (1 << VisualBasic6Parser.DATE) | (1 << VisualBasic6Parser.DECLARE) | (1 << VisualBasic6Parser.DEFBOOL) | (1 << VisualBasic6Parser.DEFBYTE) | (1 << VisualBasic6Parser.DEFDATE) | (1 << VisualBasic6Parser.DEFDBL) | (1 << VisualBasic6Parser.DEFDEC) | (1 << VisualBasic6Parser.DEFCUR) | (1 << VisualBasic6Parser.DEFINT) | (1 << VisualBasic6Parser.DEFLNG) | (1 << VisualBasic6Parser.DEFOBJ) | (1 << VisualBasic6Parser.DEFSNG) | (1 << VisualBasic6Parser.DEFSTR) | (1 << VisualBasic6Parser.DEFVAR) | (1 << VisualBasic6Parser.DELETESETTING) | (1 << VisualBasic6Parser.DIM) | (1 << VisualBasic6Parser.DO) | (1 << VisualBasic6Parser.DOUBLE) | (1 << VisualBasic6Parser.EACH) | (1 << VisualBasic6Parser.ELSE) | (1 << VisualBasic6Parser.ELSEIF) | (1 << VisualBasic6Parser.END) | (1 << VisualBasic6Parser.ENUM) | (1 << VisualBasic6Parser.EQV) | (1 << VisualBasic6Parser.ERASE) | (1 << VisualBasic6Parser.ERROR) | (1 << VisualBasic6Parser.EVENT))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (VisualBasic6Parser.FALSE - 66)) | (1 << (VisualBasic6Parser.FILECOPY - 66)) | (1 << (VisualBasic6Parser.FRIEND - 66)) | (1 << (VisualBasic6Parser.FOR - 66)) | (1 << (VisualBasic6Parser.FUNCTION - 66)) | (1 << (VisualBasic6Parser.GET - 66)) | (1 << (VisualBasic6Parser.GLOBAL - 66)) | (1 << (VisualBasic6Parser.GOSUB - 66)) | (1 << (VisualBasic6Parser.GOTO - 66)) | (1 << (VisualBasic6Parser.IF - 66)) | (1 << (VisualBasic6Parser.IMP - 66)) | (1 << (VisualBasic6Parser.IMPLEMENTS - 66)) | (1 << (VisualBasic6Parser.IN - 66)) | (1 << (VisualBasic6Parser.INPUT - 66)) | (1 << (VisualBasic6Parser.IS - 66)) | (1 << (VisualBasic6Parser.INTEGER - 66)) | (1 << (VisualBasic6Parser.KILL - 66)) | (1 << (VisualBasic6Parser.LOAD - 66)) | (1 << (VisualBasic6Parser.LOCK - 66)) | (1 << (VisualBasic6Parser.LONG - 66)) | (1 << (VisualBasic6Parser.LOOP - 66)) | (1 << (VisualBasic6Parser.LEN - 66)) | (1 << (VisualBasic6Parser.LET - 66)) | (1 << (VisualBasic6Parser.LIB - 66)) | (1 << (VisualBasic6Parser.LIKE - 66)) | (1 << (VisualBasic6Parser.LSET - 66)) | (1 << (VisualBasic6Parser.ME - 66)) | (1 << (VisualBasic6Parser.MID - 66)) | (1 << (VisualBasic6Parser.MKDIR - 66)) | (1 << (VisualBasic6Parser.MOD - 66)) | (1 << (VisualBasic6Parser.NAME - 66)) | (1 << (VisualBasic6Parser.NEXT - 66)) | (1 << (VisualBasic6Parser.NEW - 66)) | (1 << (VisualBasic6Parser.NOT - 66)) | (1 << (VisualBasic6Parser.NOTHING - 66)) | (1 << (VisualBasic6Parser.NULL - 66)) | (1 << (VisualBasic6Parser.OBJECT - 66)) | (1 << (VisualBasic6Parser.ON - 66)) | (1 << (VisualBasic6Parser.OPEN - 66)) | (1 << (VisualBasic6Parser.OPTIONAL - 66)) | (1 << (VisualBasic6Parser.OR - 66)) | (1 << (VisualBasic6Parser.OUTPUT - 66)) | (1 << (VisualBasic6Parser.PARAMARRAY - 66)) | (1 << (VisualBasic6Parser.PRESERVE - 66)) | (1 << (VisualBasic6Parser.PRINT - 66)) | (1 << (VisualBasic6Parser.PRIVATE - 66)) | (1 << (VisualBasic6Parser.PUBLIC - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (VisualBasic6Parser.PUT - 130)) | (1 << (VisualBasic6Parser.RANDOM - 130)) | (1 << (VisualBasic6Parser.RANDOMIZE - 130)) | (1 << (VisualBasic6Parser.RAISEEVENT - 130)) | (1 << (VisualBasic6Parser.READ - 130)) | (1 << (VisualBasic6Parser.REDIM - 130)) | (1 << (VisualBasic6Parser.REM - 130)) | (1 << (VisualBasic6Parser.RESET - 130)) | (1 << (VisualBasic6Parser.RESUME - 130)) | (1 << (VisualBasic6Parser.RETURN - 130)) | (1 << (VisualBasic6Parser.RMDIR - 130)) | (1 << (VisualBasic6Parser.RSET - 130)) | (1 << (VisualBasic6Parser.SAVEPICTURE - 130)) | (1 << (VisualBasic6Parser.SAVESETTING - 130)) | (1 << (VisualBasic6Parser.SEEK - 130)) | (1 << (VisualBasic6Parser.SELECT - 130)) | (1 << (VisualBasic6Parser.SENDKEYS - 130)) | (1 << (VisualBasic6Parser.SET - 130)) | (1 << (VisualBasic6Parser.SETATTR - 130)) | (1 << (VisualBasic6Parser.SHARED - 130)) | (1 << (VisualBasic6Parser.SINGLE - 130)) | (1 << (VisualBasic6Parser.SPC - 130)) | (1 << (VisualBasic6Parser.STATIC - 130)) | (1 << (VisualBasic6Parser.STEP - 130)) | (1 << (VisualBasic6Parser.STOP - 130)) | (1 << (VisualBasic6Parser.STRING - 130)) | (1 << (VisualBasic6Parser.SUB - 130)) | (1 << (VisualBasic6Parser.TAB - 130)) | (1 << (VisualBasic6Parser.TEXT - 130)) | (1 << (VisualBasic6Parser.THEN - 130)) | (1 << (VisualBasic6Parser.TIME - 130)) | (1 << (VisualBasic6Parser.TO - 130)) | (1 << (VisualBasic6Parser.TRUE - 130)) | (1 << (VisualBasic6Parser.TYPE - 130)) | (1 << (VisualBasic6Parser.TYPEOF - 130)) | (1 << (VisualBasic6Parser.UNLOAD - 130)) | (1 << (VisualBasic6Parser.UNLOCK - 130)) | (1 << (VisualBasic6Parser.UNTIL - 130)) | (1 << (VisualBasic6Parser.VARIANT - 130)) | (1 << (VisualBasic6Parser.VERSION - 130)) | (1 << (VisualBasic6Parser.WEND - 130)) | (1 << (VisualBasic6Parser.WHILE - 130)) | (1 << (VisualBasic6Parser.WIDTH - 130)) | (1 << (VisualBasic6Parser.WITH - 130)) | (1 << (VisualBasic6Parser.WITHEVENTS - 130)) | (1 << (VisualBasic6Parser.WRITE - 130)) | (1 << (VisualBasic6Parser.XOR - 130)) | (1 << (VisualBasic6Parser.DOT - 130)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 130)))) != 0) or ((((_la - 206)) & ~0x3f) == 0 and ((1 << (_la - 206)) & ((1 << (VisualBasic6Parser.L_SQUARE_BRACKET - 206)) | (1 << (VisualBasic6Parser.IDENTIFIER - 206)) | (1 << (VisualBasic6Parser.WS - 206)))) != 0)):
                        break



            self.state = 628
            self.match(VisualBasic6Parser.ENDPROPERTY)
            self.state = 630 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 629
                self.match(VisualBasic6Parser.NEWLINE)
                self.state = 632 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==VisualBasic6Parser.NEWLINE):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cp_ControlTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def complexType(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ComplexTypeContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_cp_ControlType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCp_ControlType" ):
                listener.enterCp_ControlType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCp_ControlType" ):
                listener.exitCp_ControlType(self)




    def cp_ControlType(self):

        localctx = VisualBasic6Parser.Cp_ControlTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_cp_ControlType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 634
            self.complexType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cp_ControlIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(VisualBasic6Parser.AmbiguousIdentifierContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_cp_ControlIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCp_ControlIdentifier" ):
                listener.enterCp_ControlIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCp_ControlIdentifier" ):
                listener.exitCp_ControlIdentifier(self)




    def cp_ControlIdentifier(self):

        localctx = VisualBasic6Parser.Cp_ControlIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_cp_ControlIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 636
            self.ambiguousIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModuleBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(VisualBasic6Parser.BlockContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_moduleBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleBlock" ):
                listener.enterModuleBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleBlock" ):
                listener.exitModuleBlock(self)




    def moduleBlock(self):

        localctx = VisualBasic6Parser.ModuleBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_moduleBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 638
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributeStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTRIBUTE(self):
            return self.getToken(VisualBasic6Parser.ATTRIBUTE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ImplicitCallStmt_InStmtContext,0)


        def EQ(self):
            return self.getToken(VisualBasic6Parser.EQ, 0)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.LiteralContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.LiteralContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.COMMA)
            else:
                return self.getToken(VisualBasic6Parser.COMMA, i)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_attributeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeStmt" ):
                listener.enterAttributeStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeStmt" ):
                listener.exitAttributeStmt(self)




    def attributeStmt(self):

        localctx = VisualBasic6Parser.AttributeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_attributeStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 640
            self.match(VisualBasic6Parser.ATTRIBUTE)
            self.state = 641
            self.match(VisualBasic6Parser.WS)
            self.state = 642
            self.implicitCallStmt_InStmt()
            self.state = 644
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 643
                self.match(VisualBasic6Parser.WS)


            self.state = 646
            self.match(VisualBasic6Parser.EQ)
            self.state = 648
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 647
                self.match(VisualBasic6Parser.WS)


            self.state = 650
            self.literal()
            self.state = 661
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 652
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualBasic6Parser.WS:
                        self.state = 651
                        self.match(VisualBasic6Parser.WS)


                    self.state = 654
                    self.match(VisualBasic6Parser.COMMA)
                    self.state = 656
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualBasic6Parser.WS:
                        self.state = 655
                        self.match(VisualBasic6Parser.WS)


                    self.state = 658
                    self.literal() 
                self.state = 663
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.BlockStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.BlockStmtContext,i)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.NEWLINE)
            else:
                return self.getToken(VisualBasic6Parser.NEWLINE, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = VisualBasic6Parser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 664
            self.blockStmt()
            self.state = 676
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 666 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 665
                        self.match(VisualBasic6Parser.NEWLINE)
                        self.state = 668 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==VisualBasic6Parser.NEWLINE):
                            break

                    self.state = 671
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                    if la_ == 1:
                        self.state = 670
                        self.match(VisualBasic6Parser.WS)


                    self.state = 673
                    self.blockStmt() 
                self.state = 678
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def appActivateStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.AppActivateStmtContext,0)


        def attributeStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.AttributeStmtContext,0)


        def beepStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.BeepStmtContext,0)


        def chDirStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ChDirStmtContext,0)


        def chDriveStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ChDriveStmtContext,0)


        def closeStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.CloseStmtContext,0)


        def constStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ConstStmtContext,0)


        def dateStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.DateStmtContext,0)


        def deleteSettingStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.DeleteSettingStmtContext,0)


        def deftypeStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.DeftypeStmtContext,0)


        def doLoopStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.DoLoopStmtContext,0)


        def endStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.EndStmtContext,0)


        def eraseStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.EraseStmtContext,0)


        def errorStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ErrorStmtContext,0)


        def exitStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ExitStmtContext,0)


        def explicitCallStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ExplicitCallStmtContext,0)


        def filecopyStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.FilecopyStmtContext,0)


        def forEachStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ForEachStmtContext,0)


        def forNextStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ForNextStmtContext,0)


        def getStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.GetStmtContext,0)


        def goSubStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.GoSubStmtContext,0)


        def goToStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.GoToStmtContext,0)


        def ifThenElseStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.IfThenElseStmtContext,0)


        def implementsStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ImplementsStmtContext,0)


        def inputStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.InputStmtContext,0)


        def killStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.KillStmtContext,0)


        def letStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.LetStmtContext,0)


        def lineInputStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.LineInputStmtContext,0)


        def lineLabel(self):
            return self.getTypedRuleContext(VisualBasic6Parser.LineLabelContext,0)


        def loadStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.LoadStmtContext,0)


        def lockStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.LockStmtContext,0)


        def lsetStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.LsetStmtContext,0)


        def macroIfThenElseStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.MacroIfThenElseStmtContext,0)


        def midStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.MidStmtContext,0)


        def mkdirStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.MkdirStmtContext,0)


        def nameStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.NameStmtContext,0)


        def onErrorStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.OnErrorStmtContext,0)


        def onGoToStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.OnGoToStmtContext,0)


        def onGoSubStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.OnGoSubStmtContext,0)


        def openStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.OpenStmtContext,0)


        def printStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.PrintStmtContext,0)


        def putStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.PutStmtContext,0)


        def raiseEventStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.RaiseEventStmtContext,0)


        def randomizeStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.RandomizeStmtContext,0)


        def redimStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.RedimStmtContext,0)


        def resetStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ResetStmtContext,0)


        def resumeStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ResumeStmtContext,0)


        def returnStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ReturnStmtContext,0)


        def rmdirStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.RmdirStmtContext,0)


        def rsetStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.RsetStmtContext,0)


        def savepictureStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.SavepictureStmtContext,0)


        def saveSettingStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.SaveSettingStmtContext,0)


        def seekStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.SeekStmtContext,0)


        def selectCaseStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.SelectCaseStmtContext,0)


        def sendkeysStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.SendkeysStmtContext,0)


        def setattrStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.SetattrStmtContext,0)


        def setStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.SetStmtContext,0)


        def stopStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.StopStmtContext,0)


        def timeStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.TimeStmtContext,0)


        def unloadStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.UnloadStmtContext,0)


        def unlockStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.UnlockStmtContext,0)


        def variableStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.VariableStmtContext,0)


        def whileWendStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.WhileWendStmtContext,0)


        def widthStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.WidthStmtContext,0)


        def withStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.WithStmtContext,0)


        def writeStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.WriteStmtContext,0)


        def implicitCallStmt_InBlock(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ImplicitCallStmt_InBlockContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_blockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStmt" ):
                listener.enterBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStmt" ):
                listener.exitBlockStmt(self)




    def blockStmt(self):

        localctx = VisualBasic6Parser.BlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_blockStmt)
        try:
            self.state = 746
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 679
                self.appActivateStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 680
                self.attributeStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 681
                self.beepStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 682
                self.chDirStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 683
                self.chDriveStmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 684
                self.closeStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 685
                self.constStmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 686
                self.dateStmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 687
                self.deleteSettingStmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 688
                self.deftypeStmt()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 689
                self.doLoopStmt()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 690
                self.endStmt()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 691
                self.eraseStmt()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 692
                self.errorStmt()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 693
                self.exitStmt()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 694
                self.explicitCallStmt()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 695
                self.filecopyStmt()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 696
                self.forEachStmt()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 697
                self.forNextStmt()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 698
                self.getStmt()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 699
                self.goSubStmt()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 700
                self.goToStmt()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 701
                self.ifThenElseStmt()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 702
                self.implementsStmt()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 703
                self.inputStmt()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 704
                self.killStmt()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 705
                self.letStmt()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 706
                self.lineInputStmt()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 707
                self.lineLabel()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 708
                self.loadStmt()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 709
                self.lockStmt()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 710
                self.lsetStmt()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 711
                self.macroIfThenElseStmt()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 712
                self.midStmt()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 713
                self.mkdirStmt()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 714
                self.nameStmt()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 715
                self.onErrorStmt()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 716
                self.onGoToStmt()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 717
                self.onGoSubStmt()
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 718
                self.openStmt()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 719
                self.printStmt()
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 720
                self.putStmt()
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 721
                self.raiseEventStmt()
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 722
                self.randomizeStmt()
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 723
                self.redimStmt()
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 724
                self.resetStmt()
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 725
                self.resumeStmt()
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 726
                self.returnStmt()
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 727
                self.rmdirStmt()
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 728
                self.rsetStmt()
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 729
                self.savepictureStmt()
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 730
                self.saveSettingStmt()
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 731
                self.seekStmt()
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 732
                self.selectCaseStmt()
                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 733
                self.sendkeysStmt()
                pass

            elif la_ == 56:
                self.enterOuterAlt(localctx, 56)
                self.state = 734
                self.setattrStmt()
                pass

            elif la_ == 57:
                self.enterOuterAlt(localctx, 57)
                self.state = 735
                self.setStmt()
                pass

            elif la_ == 58:
                self.enterOuterAlt(localctx, 58)
                self.state = 736
                self.stopStmt()
                pass

            elif la_ == 59:
                self.enterOuterAlt(localctx, 59)
                self.state = 737
                self.timeStmt()
                pass

            elif la_ == 60:
                self.enterOuterAlt(localctx, 60)
                self.state = 738
                self.unloadStmt()
                pass

            elif la_ == 61:
                self.enterOuterAlt(localctx, 61)
                self.state = 739
                self.unlockStmt()
                pass

            elif la_ == 62:
                self.enterOuterAlt(localctx, 62)
                self.state = 740
                self.variableStmt()
                pass

            elif la_ == 63:
                self.enterOuterAlt(localctx, 63)
                self.state = 741
                self.whileWendStmt()
                pass

            elif la_ == 64:
                self.enterOuterAlt(localctx, 64)
                self.state = 742
                self.widthStmt()
                pass

            elif la_ == 65:
                self.enterOuterAlt(localctx, 65)
                self.state = 743
                self.withStmt()
                pass

            elif la_ == 66:
                self.enterOuterAlt(localctx, 66)
                self.state = 744
                self.writeStmt()
                pass

            elif la_ == 67:
                self.enterOuterAlt(localctx, 67)
                self.state = 745
                self.implicitCallStmt_InBlock()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AppActivateStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def APPACTIVATE(self):
            return self.getToken(VisualBasic6Parser.APPACTIVATE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,i)


        def COMMA(self):
            return self.getToken(VisualBasic6Parser.COMMA, 0)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_appActivateStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAppActivateStmt" ):
                listener.enterAppActivateStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAppActivateStmt" ):
                listener.exitAppActivateStmt(self)




    def appActivateStmt(self):

        localctx = VisualBasic6Parser.AppActivateStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_appActivateStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 748
            self.match(VisualBasic6Parser.APPACTIVATE)
            self.state = 749
            self.match(VisualBasic6Parser.WS)
            self.state = 750
            self.valueStmt(0)
            self.state = 759
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 752
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualBasic6Parser.WS:
                    self.state = 751
                    self.match(VisualBasic6Parser.WS)


                self.state = 754
                self.match(VisualBasic6Parser.COMMA)
                self.state = 756
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
                if la_ == 1:
                    self.state = 755
                    self.match(VisualBasic6Parser.WS)


                self.state = 758
                self.valueStmt(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BeepStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEEP(self):
            return self.getToken(VisualBasic6Parser.BEEP, 0)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_beepStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBeepStmt" ):
                listener.enterBeepStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBeepStmt" ):
                listener.exitBeepStmt(self)




    def beepStmt(self):

        localctx = VisualBasic6Parser.BeepStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_beepStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 761
            self.match(VisualBasic6Parser.BEEP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ChDirStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHDIR(self):
            return self.getToken(VisualBasic6Parser.CHDIR, 0)

        def WS(self):
            return self.getToken(VisualBasic6Parser.WS, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_chDirStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChDirStmt" ):
                listener.enterChDirStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChDirStmt" ):
                listener.exitChDirStmt(self)




    def chDirStmt(self):

        localctx = VisualBasic6Parser.ChDirStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_chDirStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 763
            self.match(VisualBasic6Parser.CHDIR)
            self.state = 764
            self.match(VisualBasic6Parser.WS)
            self.state = 765
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ChDriveStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHDRIVE(self):
            return self.getToken(VisualBasic6Parser.CHDRIVE, 0)

        def WS(self):
            return self.getToken(VisualBasic6Parser.WS, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_chDriveStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChDriveStmt" ):
                listener.enterChDriveStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChDriveStmt" ):
                listener.exitChDriveStmt(self)




    def chDriveStmt(self):

        localctx = VisualBasic6Parser.ChDriveStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_chDriveStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 767
            self.match(VisualBasic6Parser.CHDRIVE)
            self.state = 768
            self.match(VisualBasic6Parser.WS)
            self.state = 769
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CloseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLOSE(self):
            return self.getToken(VisualBasic6Parser.CLOSE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.COMMA)
            else:
                return self.getToken(VisualBasic6Parser.COMMA, i)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_closeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCloseStmt" ):
                listener.enterCloseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCloseStmt" ):
                listener.exitCloseStmt(self)




    def closeStmt(self):

        localctx = VisualBasic6Parser.CloseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_closeStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 771
            self.match(VisualBasic6Parser.CLOSE)
            self.state = 787
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 772
                self.match(VisualBasic6Parser.WS)
                self.state = 773
                self.valueStmt(0)
                self.state = 784
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 775
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualBasic6Parser.WS:
                            self.state = 774
                            self.match(VisualBasic6Parser.WS)


                        self.state = 777
                        self.match(VisualBasic6Parser.COMMA)
                        self.state = 779
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                        if la_ == 1:
                            self.state = 778
                            self.match(VisualBasic6Parser.WS)


                        self.state = 781
                        self.valueStmt(0) 
                    self.state = 786
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,76,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(VisualBasic6Parser.CONST, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def constSubStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ConstSubStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ConstSubStmtContext,i)


        def publicPrivateGlobalVisibility(self):
            return self.getTypedRuleContext(VisualBasic6Parser.PublicPrivateGlobalVisibilityContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.COMMA)
            else:
                return self.getToken(VisualBasic6Parser.COMMA, i)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_constStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstStmt" ):
                listener.enterConstStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstStmt" ):
                listener.exitConstStmt(self)




    def constStmt(self):

        localctx = VisualBasic6Parser.ConstStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_constStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 792
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (VisualBasic6Parser.GLOBAL - 72)) | (1 << (VisualBasic6Parser.PRIVATE - 72)) | (1 << (VisualBasic6Parser.PUBLIC - 72)))) != 0):
                self.state = 789
                self.publicPrivateGlobalVisibility()
                self.state = 790
                self.match(VisualBasic6Parser.WS)


            self.state = 794
            self.match(VisualBasic6Parser.CONST)
            self.state = 795
            self.match(VisualBasic6Parser.WS)
            self.state = 796
            self.constSubStmt()
            self.state = 807
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 798
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualBasic6Parser.WS:
                        self.state = 797
                        self.match(VisualBasic6Parser.WS)


                    self.state = 800
                    self.match(VisualBasic6Parser.COMMA)
                    self.state = 802
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualBasic6Parser.WS:
                        self.state = 801
                        self.match(VisualBasic6Parser.WS)


                    self.state = 804
                    self.constSubStmt() 
                self.state = 809
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstSubStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(VisualBasic6Parser.AmbiguousIdentifierContext,0)


        def EQ(self):
            return self.getToken(VisualBasic6Parser.EQ, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,0)


        def typeHint(self):
            return self.getTypedRuleContext(VisualBasic6Parser.TypeHintContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def asTypeClause(self):
            return self.getTypedRuleContext(VisualBasic6Parser.AsTypeClauseContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_constSubStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstSubStmt" ):
                listener.enterConstSubStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstSubStmt" ):
                listener.exitConstSubStmt(self)




    def constSubStmt(self):

        localctx = VisualBasic6Parser.ConstSubStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_constSubStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 810
            self.ambiguousIdentifier()
            self.state = 812
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & ((1 << (VisualBasic6Parser.AMPERSAND - 178)) | (1 << (VisualBasic6Parser.AT - 178)) | (1 << (VisualBasic6Parser.DOLLAR - 178)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 178)) | (1 << (VisualBasic6Parser.HASH - 178)) | (1 << (VisualBasic6Parser.PERCENT - 178)))) != 0):
                self.state = 811
                self.typeHint()


            self.state = 816
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.state = 814
                self.match(VisualBasic6Parser.WS)
                self.state = 815
                self.asTypeClause()


            self.state = 819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 818
                self.match(VisualBasic6Parser.WS)


            self.state = 821
            self.match(VisualBasic6Parser.EQ)
            self.state = 823
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.state = 822
                self.match(VisualBasic6Parser.WS)


            self.state = 825
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DateStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(VisualBasic6Parser.DATE, 0)

        def EQ(self):
            return self.getToken(VisualBasic6Parser.EQ, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_dateStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateStmt" ):
                listener.enterDateStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateStmt" ):
                listener.exitDateStmt(self)




    def dateStmt(self):

        localctx = VisualBasic6Parser.DateStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_dateStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 827
            self.match(VisualBasic6Parser.DATE)
            self.state = 829
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 828
                self.match(VisualBasic6Parser.WS)


            self.state = 831
            self.match(VisualBasic6Parser.EQ)
            self.state = 833
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 832
                self.match(VisualBasic6Parser.WS)


            self.state = 835
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclareStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(VisualBasic6Parser.DECLARE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(VisualBasic6Parser.AmbiguousIdentifierContext,0)


        def LIB(self):
            return self.getToken(VisualBasic6Parser.LIB, 0)

        def STRINGLITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.STRINGLITERAL)
            else:
                return self.getToken(VisualBasic6Parser.STRINGLITERAL, i)

        def FUNCTION(self):
            return self.getToken(VisualBasic6Parser.FUNCTION, 0)

        def SUB(self):
            return self.getToken(VisualBasic6Parser.SUB, 0)

        def visibility(self):
            return self.getTypedRuleContext(VisualBasic6Parser.VisibilityContext,0)


        def typeHint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.TypeHintContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.TypeHintContext,i)


        def ALIAS(self):
            return self.getToken(VisualBasic6Parser.ALIAS, 0)

        def argList(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ArgListContext,0)


        def asTypeClause(self):
            return self.getTypedRuleContext(VisualBasic6Parser.AsTypeClauseContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_declareStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclareStmt" ):
                listener.enterDeclareStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclareStmt" ):
                listener.exitDeclareStmt(self)




    def declareStmt(self):

        localctx = VisualBasic6Parser.DeclareStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_declareStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 840
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (VisualBasic6Parser.FRIEND - 68)) | (1 << (VisualBasic6Parser.GLOBAL - 68)) | (1 << (VisualBasic6Parser.PRIVATE - 68)) | (1 << (VisualBasic6Parser.PUBLIC - 68)))) != 0):
                self.state = 837
                self.visibility()
                self.state = 838
                self.match(VisualBasic6Parser.WS)


            self.state = 842
            self.match(VisualBasic6Parser.DECLARE)
            self.state = 843
            self.match(VisualBasic6Parser.WS)
            self.state = 849
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualBasic6Parser.FUNCTION]:
                self.state = 844
                self.match(VisualBasic6Parser.FUNCTION)
                self.state = 846
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & ((1 << (VisualBasic6Parser.AMPERSAND - 178)) | (1 << (VisualBasic6Parser.AT - 178)) | (1 << (VisualBasic6Parser.DOLLAR - 178)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 178)) | (1 << (VisualBasic6Parser.HASH - 178)) | (1 << (VisualBasic6Parser.PERCENT - 178)))) != 0):
                    self.state = 845
                    self.typeHint()


                pass
            elif token in [VisualBasic6Parser.SUB]:
                self.state = 848
                self.match(VisualBasic6Parser.SUB)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 851
            self.match(VisualBasic6Parser.WS)
            self.state = 852
            self.ambiguousIdentifier()
            self.state = 854
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & ((1 << (VisualBasic6Parser.AMPERSAND - 178)) | (1 << (VisualBasic6Parser.AT - 178)) | (1 << (VisualBasic6Parser.DOLLAR - 178)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 178)) | (1 << (VisualBasic6Parser.HASH - 178)) | (1 << (VisualBasic6Parser.PERCENT - 178)))) != 0):
                self.state = 853
                self.typeHint()


            self.state = 856
            self.match(VisualBasic6Parser.WS)
            self.state = 857
            self.match(VisualBasic6Parser.LIB)
            self.state = 858
            self.match(VisualBasic6Parser.WS)
            self.state = 859
            self.match(VisualBasic6Parser.STRINGLITERAL)
            self.state = 864
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.state = 860
                self.match(VisualBasic6Parser.WS)
                self.state = 861
                self.match(VisualBasic6Parser.ALIAS)
                self.state = 862
                self.match(VisualBasic6Parser.WS)
                self.state = 863
                self.match(VisualBasic6Parser.STRINGLITERAL)


            self.state = 870
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.state = 867
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualBasic6Parser.WS:
                    self.state = 866
                    self.match(VisualBasic6Parser.WS)


                self.state = 869
                self.argList()


            self.state = 874
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.state = 872
                self.match(VisualBasic6Parser.WS)
                self.state = 873
                self.asTypeClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeftypeStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def letterrange(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.LetterrangeContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.LetterrangeContext,i)


        def DEFBOOL(self):
            return self.getToken(VisualBasic6Parser.DEFBOOL, 0)

        def DEFBYTE(self):
            return self.getToken(VisualBasic6Parser.DEFBYTE, 0)

        def DEFINT(self):
            return self.getToken(VisualBasic6Parser.DEFINT, 0)

        def DEFLNG(self):
            return self.getToken(VisualBasic6Parser.DEFLNG, 0)

        def DEFCUR(self):
            return self.getToken(VisualBasic6Parser.DEFCUR, 0)

        def DEFSNG(self):
            return self.getToken(VisualBasic6Parser.DEFSNG, 0)

        def DEFDBL(self):
            return self.getToken(VisualBasic6Parser.DEFDBL, 0)

        def DEFDEC(self):
            return self.getToken(VisualBasic6Parser.DEFDEC, 0)

        def DEFDATE(self):
            return self.getToken(VisualBasic6Parser.DEFDATE, 0)

        def DEFSTR(self):
            return self.getToken(VisualBasic6Parser.DEFSTR, 0)

        def DEFOBJ(self):
            return self.getToken(VisualBasic6Parser.DEFOBJ, 0)

        def DEFVAR(self):
            return self.getToken(VisualBasic6Parser.DEFVAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.COMMA)
            else:
                return self.getToken(VisualBasic6Parser.COMMA, i)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_deftypeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeftypeStmt" ):
                listener.enterDeftypeStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeftypeStmt" ):
                listener.exitDeftypeStmt(self)




    def deftypeStmt(self):

        localctx = VisualBasic6Parser.DeftypeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_deftypeStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 876
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualBasic6Parser.DEFBOOL) | (1 << VisualBasic6Parser.DEFBYTE) | (1 << VisualBasic6Parser.DEFDATE) | (1 << VisualBasic6Parser.DEFDBL) | (1 << VisualBasic6Parser.DEFDEC) | (1 << VisualBasic6Parser.DEFCUR) | (1 << VisualBasic6Parser.DEFINT) | (1 << VisualBasic6Parser.DEFLNG) | (1 << VisualBasic6Parser.DEFOBJ) | (1 << VisualBasic6Parser.DEFSNG) | (1 << VisualBasic6Parser.DEFSTR) | (1 << VisualBasic6Parser.DEFVAR))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 877
            self.match(VisualBasic6Parser.WS)
            self.state = 878
            self.letterrange()
            self.state = 889
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 880
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualBasic6Parser.WS:
                        self.state = 879
                        self.match(VisualBasic6Parser.WS)


                    self.state = 882
                    self.match(VisualBasic6Parser.COMMA)
                    self.state = 884
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualBasic6Parser.WS:
                        self.state = 883
                        self.match(VisualBasic6Parser.WS)


                    self.state = 886
                    self.letterrange() 
                self.state = 891
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeleteSettingStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETESETTING(self):
            return self.getToken(VisualBasic6Parser.DELETESETTING, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.COMMA)
            else:
                return self.getToken(VisualBasic6Parser.COMMA, i)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_deleteSettingStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteSettingStmt" ):
                listener.enterDeleteSettingStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteSettingStmt" ):
                listener.exitDeleteSettingStmt(self)




    def deleteSettingStmt(self):

        localctx = VisualBasic6Parser.DeleteSettingStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_deleteSettingStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 892
            self.match(VisualBasic6Parser.DELETESETTING)
            self.state = 893
            self.match(VisualBasic6Parser.WS)
            self.state = 894
            self.valueStmt(0)
            self.state = 896
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 895
                self.match(VisualBasic6Parser.WS)


            self.state = 898
            self.match(VisualBasic6Parser.COMMA)
            self.state = 900
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.state = 899
                self.match(VisualBasic6Parser.WS)


            self.state = 902
            self.valueStmt(0)
            self.state = 911
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 904
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualBasic6Parser.WS:
                    self.state = 903
                    self.match(VisualBasic6Parser.WS)


                self.state = 906
                self.match(VisualBasic6Parser.COMMA)
                self.state = 908
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                if la_ == 1:
                    self.state = 907
                    self.match(VisualBasic6Parser.WS)


                self.state = 910
                self.valueStmt(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DoLoopStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(VisualBasic6Parser.DO, 0)

        def LOOP(self):
            return self.getToken(VisualBasic6Parser.LOOP, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.NEWLINE)
            else:
                return self.getToken(VisualBasic6Parser.NEWLINE, i)

        def block(self):
            return self.getTypedRuleContext(VisualBasic6Parser.BlockContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def valueStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,0)


        def WHILE(self):
            return self.getToken(VisualBasic6Parser.WHILE, 0)

        def UNTIL(self):
            return self.getToken(VisualBasic6Parser.UNTIL, 0)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_doLoopStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoLoopStmt" ):
                listener.enterDoLoopStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoLoopStmt" ):
                listener.exitDoLoopStmt(self)




    def doLoopStmt(self):

        localctx = VisualBasic6Parser.DoLoopStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_doLoopStmt)
        self._la = 0 # Token type
        try:
            self.state = 966
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 913
                self.match(VisualBasic6Parser.DO)
                self.state = 915 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 914
                    self.match(VisualBasic6Parser.NEWLINE)
                    self.state = 917 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==VisualBasic6Parser.NEWLINE):
                        break

                self.state = 925
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 919
                    self.block()
                    self.state = 921 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 920
                        self.match(VisualBasic6Parser.NEWLINE)
                        self.state = 923 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==VisualBasic6Parser.NEWLINE):
                            break



                self.state = 927
                self.match(VisualBasic6Parser.LOOP)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 928
                self.match(VisualBasic6Parser.DO)
                self.state = 929
                self.match(VisualBasic6Parser.WS)
                self.state = 930
                _la = self._input.LA(1)
                if not(_la==VisualBasic6Parser.UNTIL or _la==VisualBasic6Parser.WHILE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 931
                self.match(VisualBasic6Parser.WS)
                self.state = 932
                self.valueStmt(0)
                self.state = 934 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 933
                    self.match(VisualBasic6Parser.NEWLINE)
                    self.state = 936 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==VisualBasic6Parser.NEWLINE):
                        break

                self.state = 944
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                if la_ == 1:
                    self.state = 938
                    self.block()
                    self.state = 940 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 939
                        self.match(VisualBasic6Parser.NEWLINE)
                        self.state = 942 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==VisualBasic6Parser.NEWLINE):
                            break



                self.state = 946
                self.match(VisualBasic6Parser.LOOP)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 948
                self.match(VisualBasic6Parser.DO)
                self.state = 950 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 949
                    self.match(VisualBasic6Parser.NEWLINE)
                    self.state = 952 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==VisualBasic6Parser.NEWLINE):
                        break

                self.state = 954
                self.block()
                self.state = 956 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 955
                    self.match(VisualBasic6Parser.NEWLINE)
                    self.state = 958 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==VisualBasic6Parser.NEWLINE):
                        break

                self.state = 960
                self.match(VisualBasic6Parser.LOOP)
                self.state = 961
                self.match(VisualBasic6Parser.WS)
                self.state = 962
                _la = self._input.LA(1)
                if not(_la==VisualBasic6Parser.UNTIL or _la==VisualBasic6Parser.WHILE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 963
                self.match(VisualBasic6Parser.WS)
                self.state = 964
                self.valueStmt(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EndStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(VisualBasic6Parser.END, 0)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_endStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndStmt" ):
                listener.enterEndStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndStmt" ):
                listener.exitEndStmt(self)




    def endStmt(self):

        localctx = VisualBasic6Parser.EndStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_endStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 968
            self.match(VisualBasic6Parser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumerationStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(VisualBasic6Parser.ENUM, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(VisualBasic6Parser.AmbiguousIdentifierContext,0)


        def END_ENUM(self):
            return self.getToken(VisualBasic6Parser.END_ENUM, 0)

        def publicPrivateVisibility(self):
            return self.getTypedRuleContext(VisualBasic6Parser.PublicPrivateVisibilityContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.NEWLINE)
            else:
                return self.getToken(VisualBasic6Parser.NEWLINE, i)

        def enumerationStmt_Constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.EnumerationStmt_ConstantContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.EnumerationStmt_ConstantContext,i)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_enumerationStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerationStmt" ):
                listener.enterEnumerationStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerationStmt" ):
                listener.exitEnumerationStmt(self)




    def enumerationStmt(self):

        localctx = VisualBasic6Parser.EnumerationStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_enumerationStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 973
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.PRIVATE or _la==VisualBasic6Parser.PUBLIC:
                self.state = 970
                self.publicPrivateVisibility()
                self.state = 971
                self.match(VisualBasic6Parser.WS)


            self.state = 975
            self.match(VisualBasic6Parser.ENUM)
            self.state = 976
            self.match(VisualBasic6Parser.WS)
            self.state = 977
            self.ambiguousIdentifier()
            self.state = 979 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 978
                self.match(VisualBasic6Parser.NEWLINE)
                self.state = 981 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==VisualBasic6Parser.NEWLINE):
                    break

            self.state = 986
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualBasic6Parser.ACCESS) | (1 << VisualBasic6Parser.ADDRESSOF) | (1 << VisualBasic6Parser.ALIAS) | (1 << VisualBasic6Parser.AND) | (1 << VisualBasic6Parser.ATTRIBUTE) | (1 << VisualBasic6Parser.APPACTIVATE) | (1 << VisualBasic6Parser.APPEND) | (1 << VisualBasic6Parser.AS) | (1 << VisualBasic6Parser.BEEP) | (1 << VisualBasic6Parser.BEGIN) | (1 << VisualBasic6Parser.BINARY) | (1 << VisualBasic6Parser.BOOLEAN) | (1 << VisualBasic6Parser.BYVAL) | (1 << VisualBasic6Parser.BYREF) | (1 << VisualBasic6Parser.BYTE) | (1 << VisualBasic6Parser.CALL) | (1 << VisualBasic6Parser.CASE) | (1 << VisualBasic6Parser.CHDIR) | (1 << VisualBasic6Parser.CHDRIVE) | (1 << VisualBasic6Parser.CLASS) | (1 << VisualBasic6Parser.CLOSE) | (1 << VisualBasic6Parser.COLLECTION) | (1 << VisualBasic6Parser.CONST) | (1 << VisualBasic6Parser.DATE) | (1 << VisualBasic6Parser.DECLARE) | (1 << VisualBasic6Parser.DEFBOOL) | (1 << VisualBasic6Parser.DEFBYTE) | (1 << VisualBasic6Parser.DEFDATE) | (1 << VisualBasic6Parser.DEFDBL) | (1 << VisualBasic6Parser.DEFDEC) | (1 << VisualBasic6Parser.DEFCUR) | (1 << VisualBasic6Parser.DEFINT) | (1 << VisualBasic6Parser.DEFLNG) | (1 << VisualBasic6Parser.DEFOBJ) | (1 << VisualBasic6Parser.DEFSNG) | (1 << VisualBasic6Parser.DEFSTR) | (1 << VisualBasic6Parser.DEFVAR) | (1 << VisualBasic6Parser.DELETESETTING) | (1 << VisualBasic6Parser.DIM) | (1 << VisualBasic6Parser.DO) | (1 << VisualBasic6Parser.DOUBLE) | (1 << VisualBasic6Parser.EACH) | (1 << VisualBasic6Parser.ELSE) | (1 << VisualBasic6Parser.ELSEIF) | (1 << VisualBasic6Parser.END) | (1 << VisualBasic6Parser.ENUM) | (1 << VisualBasic6Parser.EQV) | (1 << VisualBasic6Parser.ERASE) | (1 << VisualBasic6Parser.ERROR) | (1 << VisualBasic6Parser.EVENT))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (VisualBasic6Parser.FALSE - 66)) | (1 << (VisualBasic6Parser.FILECOPY - 66)) | (1 << (VisualBasic6Parser.FRIEND - 66)) | (1 << (VisualBasic6Parser.FOR - 66)) | (1 << (VisualBasic6Parser.FUNCTION - 66)) | (1 << (VisualBasic6Parser.GET - 66)) | (1 << (VisualBasic6Parser.GLOBAL - 66)) | (1 << (VisualBasic6Parser.GOSUB - 66)) | (1 << (VisualBasic6Parser.GOTO - 66)) | (1 << (VisualBasic6Parser.IF - 66)) | (1 << (VisualBasic6Parser.IMP - 66)) | (1 << (VisualBasic6Parser.IMPLEMENTS - 66)) | (1 << (VisualBasic6Parser.IN - 66)) | (1 << (VisualBasic6Parser.INPUT - 66)) | (1 << (VisualBasic6Parser.IS - 66)) | (1 << (VisualBasic6Parser.INTEGER - 66)) | (1 << (VisualBasic6Parser.KILL - 66)) | (1 << (VisualBasic6Parser.LOAD - 66)) | (1 << (VisualBasic6Parser.LOCK - 66)) | (1 << (VisualBasic6Parser.LONG - 66)) | (1 << (VisualBasic6Parser.LOOP - 66)) | (1 << (VisualBasic6Parser.LEN - 66)) | (1 << (VisualBasic6Parser.LET - 66)) | (1 << (VisualBasic6Parser.LIB - 66)) | (1 << (VisualBasic6Parser.LIKE - 66)) | (1 << (VisualBasic6Parser.LSET - 66)) | (1 << (VisualBasic6Parser.ME - 66)) | (1 << (VisualBasic6Parser.MID - 66)) | (1 << (VisualBasic6Parser.MKDIR - 66)) | (1 << (VisualBasic6Parser.MOD - 66)) | (1 << (VisualBasic6Parser.NAME - 66)) | (1 << (VisualBasic6Parser.NEXT - 66)) | (1 << (VisualBasic6Parser.NEW - 66)) | (1 << (VisualBasic6Parser.NOT - 66)) | (1 << (VisualBasic6Parser.NOTHING - 66)) | (1 << (VisualBasic6Parser.NULL - 66)) | (1 << (VisualBasic6Parser.OBJECT - 66)) | (1 << (VisualBasic6Parser.ON - 66)) | (1 << (VisualBasic6Parser.OPEN - 66)) | (1 << (VisualBasic6Parser.OPTIONAL - 66)) | (1 << (VisualBasic6Parser.OR - 66)) | (1 << (VisualBasic6Parser.OUTPUT - 66)) | (1 << (VisualBasic6Parser.PARAMARRAY - 66)) | (1 << (VisualBasic6Parser.PRESERVE - 66)) | (1 << (VisualBasic6Parser.PRINT - 66)) | (1 << (VisualBasic6Parser.PRIVATE - 66)) | (1 << (VisualBasic6Parser.PUBLIC - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (VisualBasic6Parser.PUT - 130)) | (1 << (VisualBasic6Parser.RANDOM - 130)) | (1 << (VisualBasic6Parser.RANDOMIZE - 130)) | (1 << (VisualBasic6Parser.RAISEEVENT - 130)) | (1 << (VisualBasic6Parser.READ - 130)) | (1 << (VisualBasic6Parser.REDIM - 130)) | (1 << (VisualBasic6Parser.REM - 130)) | (1 << (VisualBasic6Parser.RESET - 130)) | (1 << (VisualBasic6Parser.RESUME - 130)) | (1 << (VisualBasic6Parser.RETURN - 130)) | (1 << (VisualBasic6Parser.RMDIR - 130)) | (1 << (VisualBasic6Parser.RSET - 130)) | (1 << (VisualBasic6Parser.SAVEPICTURE - 130)) | (1 << (VisualBasic6Parser.SAVESETTING - 130)) | (1 << (VisualBasic6Parser.SEEK - 130)) | (1 << (VisualBasic6Parser.SELECT - 130)) | (1 << (VisualBasic6Parser.SENDKEYS - 130)) | (1 << (VisualBasic6Parser.SET - 130)) | (1 << (VisualBasic6Parser.SETATTR - 130)) | (1 << (VisualBasic6Parser.SHARED - 130)) | (1 << (VisualBasic6Parser.SINGLE - 130)) | (1 << (VisualBasic6Parser.SPC - 130)) | (1 << (VisualBasic6Parser.STATIC - 130)) | (1 << (VisualBasic6Parser.STEP - 130)) | (1 << (VisualBasic6Parser.STOP - 130)) | (1 << (VisualBasic6Parser.STRING - 130)) | (1 << (VisualBasic6Parser.SUB - 130)) | (1 << (VisualBasic6Parser.TAB - 130)) | (1 << (VisualBasic6Parser.TEXT - 130)) | (1 << (VisualBasic6Parser.THEN - 130)) | (1 << (VisualBasic6Parser.TIME - 130)) | (1 << (VisualBasic6Parser.TO - 130)) | (1 << (VisualBasic6Parser.TRUE - 130)) | (1 << (VisualBasic6Parser.TYPE - 130)) | (1 << (VisualBasic6Parser.TYPEOF - 130)) | (1 << (VisualBasic6Parser.UNLOAD - 130)) | (1 << (VisualBasic6Parser.UNLOCK - 130)) | (1 << (VisualBasic6Parser.UNTIL - 130)) | (1 << (VisualBasic6Parser.VARIANT - 130)) | (1 << (VisualBasic6Parser.VERSION - 130)) | (1 << (VisualBasic6Parser.WEND - 130)) | (1 << (VisualBasic6Parser.WHILE - 130)) | (1 << (VisualBasic6Parser.WIDTH - 130)) | (1 << (VisualBasic6Parser.WITH - 130)) | (1 << (VisualBasic6Parser.WITHEVENTS - 130)) | (1 << (VisualBasic6Parser.WRITE - 130)) | (1 << (VisualBasic6Parser.XOR - 130)))) != 0) or _la==VisualBasic6Parser.L_SQUARE_BRACKET or _la==VisualBasic6Parser.IDENTIFIER:
                self.state = 983
                self.enumerationStmt_Constant()
                self.state = 988
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 989
            self.match(VisualBasic6Parser.END_ENUM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumerationStmt_ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(VisualBasic6Parser.AmbiguousIdentifierContext,0)


        def EQ(self):
            return self.getToken(VisualBasic6Parser.EQ, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.NEWLINE)
            else:
                return self.getToken(VisualBasic6Parser.NEWLINE, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_enumerationStmt_Constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerationStmt_Constant" ):
                listener.enterEnumerationStmt_Constant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerationStmt_Constant" ):
                listener.exitEnumerationStmt_Constant(self)




    def enumerationStmt_Constant(self):

        localctx = VisualBasic6Parser.EnumerationStmt_ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_enumerationStmt_Constant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 991
            self.ambiguousIdentifier()
            self.state = 1000
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.EQ or _la==VisualBasic6Parser.WS:
                self.state = 993
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualBasic6Parser.WS:
                    self.state = 992
                    self.match(VisualBasic6Parser.WS)


                self.state = 995
                self.match(VisualBasic6Parser.EQ)
                self.state = 997
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
                if la_ == 1:
                    self.state = 996
                    self.match(VisualBasic6Parser.WS)


                self.state = 999
                self.valueStmt(0)


            self.state = 1003 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1002
                self.match(VisualBasic6Parser.NEWLINE)
                self.state = 1005 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==VisualBasic6Parser.NEWLINE):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EraseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERASE(self):
            return self.getToken(VisualBasic6Parser.ERASE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.COMMA)
            else:
                return self.getToken(VisualBasic6Parser.COMMA, i)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_eraseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEraseStmt" ):
                listener.enterEraseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEraseStmt" ):
                listener.exitEraseStmt(self)




    def eraseStmt(self):

        localctx = VisualBasic6Parser.EraseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_eraseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1007
            self.match(VisualBasic6Parser.ERASE)
            self.state = 1008
            self.match(VisualBasic6Parser.WS)
            self.state = 1009
            self.valueStmt(0)
            self.state = 1020
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,122,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1011
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualBasic6Parser.WS:
                        self.state = 1010
                        self.match(VisualBasic6Parser.WS)


                    self.state = 1013
                    self.match(VisualBasic6Parser.COMMA)
                    self.state = 1015
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
                    if la_ == 1:
                        self.state = 1014
                        self.match(VisualBasic6Parser.WS)


                    self.state = 1017
                    self.valueStmt(0) 
                self.state = 1022
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,122,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ErrorStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERROR(self):
            return self.getToken(VisualBasic6Parser.ERROR, 0)

        def WS(self):
            return self.getToken(VisualBasic6Parser.WS, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_errorStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorStmt" ):
                listener.enterErrorStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorStmt" ):
                listener.exitErrorStmt(self)




    def errorStmt(self):

        localctx = VisualBasic6Parser.ErrorStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_errorStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1023
            self.match(VisualBasic6Parser.ERROR)
            self.state = 1024
            self.match(VisualBasic6Parser.WS)
            self.state = 1025
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EventStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EVENT(self):
            return self.getToken(VisualBasic6Parser.EVENT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(VisualBasic6Parser.AmbiguousIdentifierContext,0)


        def argList(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ArgListContext,0)


        def visibility(self):
            return self.getTypedRuleContext(VisualBasic6Parser.VisibilityContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_eventStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventStmt" ):
                listener.enterEventStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventStmt" ):
                listener.exitEventStmt(self)




    def eventStmt(self):

        localctx = VisualBasic6Parser.EventStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_eventStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1030
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (VisualBasic6Parser.FRIEND - 68)) | (1 << (VisualBasic6Parser.GLOBAL - 68)) | (1 << (VisualBasic6Parser.PRIVATE - 68)) | (1 << (VisualBasic6Parser.PUBLIC - 68)))) != 0):
                self.state = 1027
                self.visibility()
                self.state = 1028
                self.match(VisualBasic6Parser.WS)


            self.state = 1032
            self.match(VisualBasic6Parser.EVENT)
            self.state = 1033
            self.match(VisualBasic6Parser.WS)
            self.state = 1034
            self.ambiguousIdentifier()
            self.state = 1036
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 1035
                self.match(VisualBasic6Parser.WS)


            self.state = 1038
            self.argList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExitStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT_DO(self):
            return self.getToken(VisualBasic6Parser.EXIT_DO, 0)

        def EXIT_FOR(self):
            return self.getToken(VisualBasic6Parser.EXIT_FOR, 0)

        def EXIT_FUNCTION(self):
            return self.getToken(VisualBasic6Parser.EXIT_FUNCTION, 0)

        def EXIT_PROPERTY(self):
            return self.getToken(VisualBasic6Parser.EXIT_PROPERTY, 0)

        def EXIT_SUB(self):
            return self.getToken(VisualBasic6Parser.EXIT_SUB, 0)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_exitStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExitStmt" ):
                listener.enterExitStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExitStmt" ):
                listener.exitExitStmt(self)




    def exitStmt(self):

        localctx = VisualBasic6Parser.ExitStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_exitStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1040
            _la = self._input.LA(1)
            if not(((((_la - 61)) & ~0x3f) == 0 and ((1 << (_la - 61)) & ((1 << (VisualBasic6Parser.EXIT_DO - 61)) | (1 << (VisualBasic6Parser.EXIT_FOR - 61)) | (1 << (VisualBasic6Parser.EXIT_FUNCTION - 61)) | (1 << (VisualBasic6Parser.EXIT_PROPERTY - 61)) | (1 << (VisualBasic6Parser.EXIT_SUB - 61)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FilecopyStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILECOPY(self):
            return self.getToken(VisualBasic6Parser.FILECOPY, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,i)


        def COMMA(self):
            return self.getToken(VisualBasic6Parser.COMMA, 0)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_filecopyStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilecopyStmt" ):
                listener.enterFilecopyStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilecopyStmt" ):
                listener.exitFilecopyStmt(self)




    def filecopyStmt(self):

        localctx = VisualBasic6Parser.FilecopyStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_filecopyStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1042
            self.match(VisualBasic6Parser.FILECOPY)
            self.state = 1043
            self.match(VisualBasic6Parser.WS)
            self.state = 1044
            self.valueStmt(0)
            self.state = 1046
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 1045
                self.match(VisualBasic6Parser.WS)


            self.state = 1048
            self.match(VisualBasic6Parser.COMMA)
            self.state = 1050
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 1049
                self.match(VisualBasic6Parser.WS)


            self.state = 1052
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForEachStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(VisualBasic6Parser.FOR, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def EACH(self):
            return self.getToken(VisualBasic6Parser.EACH, 0)

        def ambiguousIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.AmbiguousIdentifierContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.AmbiguousIdentifierContext,i)


        def IN(self):
            return self.getToken(VisualBasic6Parser.IN, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,0)


        def NEXT(self):
            return self.getToken(VisualBasic6Parser.NEXT, 0)

        def typeHint(self):
            return self.getTypedRuleContext(VisualBasic6Parser.TypeHintContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.NEWLINE)
            else:
                return self.getToken(VisualBasic6Parser.NEWLINE, i)

        def block(self):
            return self.getTypedRuleContext(VisualBasic6Parser.BlockContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_forEachStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForEachStmt" ):
                listener.enterForEachStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForEachStmt" ):
                listener.exitForEachStmt(self)




    def forEachStmt(self):

        localctx = VisualBasic6Parser.ForEachStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_forEachStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1054
            self.match(VisualBasic6Parser.FOR)
            self.state = 1055
            self.match(VisualBasic6Parser.WS)
            self.state = 1056
            self.match(VisualBasic6Parser.EACH)
            self.state = 1057
            self.match(VisualBasic6Parser.WS)
            self.state = 1058
            self.ambiguousIdentifier()
            self.state = 1060
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & ((1 << (VisualBasic6Parser.AMPERSAND - 178)) | (1 << (VisualBasic6Parser.AT - 178)) | (1 << (VisualBasic6Parser.DOLLAR - 178)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 178)) | (1 << (VisualBasic6Parser.HASH - 178)) | (1 << (VisualBasic6Parser.PERCENT - 178)))) != 0):
                self.state = 1059
                self.typeHint()


            self.state = 1062
            self.match(VisualBasic6Parser.WS)
            self.state = 1063
            self.match(VisualBasic6Parser.IN)
            self.state = 1064
            self.match(VisualBasic6Parser.WS)
            self.state = 1065
            self.valueStmt(0)
            self.state = 1067 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1066
                self.match(VisualBasic6Parser.NEWLINE)
                self.state = 1069 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==VisualBasic6Parser.NEWLINE):
                    break

            self.state = 1077
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.state = 1071
                self.block()
                self.state = 1073 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1072
                    self.match(VisualBasic6Parser.NEWLINE)
                    self.state = 1075 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==VisualBasic6Parser.NEWLINE):
                        break



            self.state = 1079
            self.match(VisualBasic6Parser.NEXT)
            self.state = 1082
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.state = 1080
                self.match(VisualBasic6Parser.WS)
                self.state = 1081
                self.ambiguousIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForNextStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(VisualBasic6Parser.FOR, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def iCS_S_VariableOrProcedureCall(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ICS_S_VariableOrProcedureCallContext,0)


        def EQ(self):
            return self.getToken(VisualBasic6Parser.EQ, 0)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,i)


        def TO(self):
            return self.getToken(VisualBasic6Parser.TO, 0)

        def NEXT(self):
            return self.getToken(VisualBasic6Parser.NEXT, 0)

        def typeHint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.TypeHintContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.TypeHintContext,i)


        def asTypeClause(self):
            return self.getTypedRuleContext(VisualBasic6Parser.AsTypeClauseContext,0)


        def STEP(self):
            return self.getToken(VisualBasic6Parser.STEP, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.NEWLINE)
            else:
                return self.getToken(VisualBasic6Parser.NEWLINE, i)

        def block(self):
            return self.getTypedRuleContext(VisualBasic6Parser.BlockContext,0)


        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(VisualBasic6Parser.AmbiguousIdentifierContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_forNextStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForNextStmt" ):
                listener.enterForNextStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForNextStmt" ):
                listener.exitForNextStmt(self)




    def forNextStmt(self):

        localctx = VisualBasic6Parser.ForNextStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_forNextStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1084
            self.match(VisualBasic6Parser.FOR)
            self.state = 1085
            self.match(VisualBasic6Parser.WS)
            self.state = 1086
            self.iCS_S_VariableOrProcedureCall()
            self.state = 1088
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & ((1 << (VisualBasic6Parser.AMPERSAND - 178)) | (1 << (VisualBasic6Parser.AT - 178)) | (1 << (VisualBasic6Parser.DOLLAR - 178)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 178)) | (1 << (VisualBasic6Parser.HASH - 178)) | (1 << (VisualBasic6Parser.PERCENT - 178)))) != 0):
                self.state = 1087
                self.typeHint()


            self.state = 1092
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.state = 1090
                self.match(VisualBasic6Parser.WS)
                self.state = 1091
                self.asTypeClause()


            self.state = 1095
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 1094
                self.match(VisualBasic6Parser.WS)


            self.state = 1097
            self.match(VisualBasic6Parser.EQ)
            self.state = 1099
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.state = 1098
                self.match(VisualBasic6Parser.WS)


            self.state = 1101
            self.valueStmt(0)
            self.state = 1102
            self.match(VisualBasic6Parser.WS)
            self.state = 1103
            self.match(VisualBasic6Parser.TO)
            self.state = 1104
            self.match(VisualBasic6Parser.WS)
            self.state = 1105
            self.valueStmt(0)
            self.state = 1110
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 1106
                self.match(VisualBasic6Parser.WS)
                self.state = 1107
                self.match(VisualBasic6Parser.STEP)
                self.state = 1108
                self.match(VisualBasic6Parser.WS)
                self.state = 1109
                self.valueStmt(0)


            self.state = 1113 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1112
                self.match(VisualBasic6Parser.NEWLINE)
                self.state = 1115 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==VisualBasic6Parser.NEWLINE):
                    break

            self.state = 1123
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.state = 1117
                self.block()
                self.state = 1119 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1118
                    self.match(VisualBasic6Parser.NEWLINE)
                    self.state = 1121 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==VisualBasic6Parser.NEWLINE):
                        break



            self.state = 1125
            self.match(VisualBasic6Parser.NEXT)
            self.state = 1131
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.state = 1126
                self.match(VisualBasic6Parser.WS)
                self.state = 1127
                self.ambiguousIdentifier()
                self.state = 1129
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
                if la_ == 1:
                    self.state = 1128
                    self.typeHint()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(VisualBasic6Parser.FUNCTION, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(VisualBasic6Parser.AmbiguousIdentifierContext,0)


        def END_FUNCTION(self):
            return self.getToken(VisualBasic6Parser.END_FUNCTION, 0)

        def visibility(self):
            return self.getTypedRuleContext(VisualBasic6Parser.VisibilityContext,0)


        def STATIC(self):
            return self.getToken(VisualBasic6Parser.STATIC, 0)

        def argList(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ArgListContext,0)


        def asTypeClause(self):
            return self.getTypedRuleContext(VisualBasic6Parser.AsTypeClauseContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.NEWLINE)
            else:
                return self.getToken(VisualBasic6Parser.NEWLINE, i)

        def block(self):
            return self.getTypedRuleContext(VisualBasic6Parser.BlockContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_functionStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionStmt" ):
                listener.enterFunctionStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionStmt" ):
                listener.exitFunctionStmt(self)




    def functionStmt(self):

        localctx = VisualBasic6Parser.FunctionStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_functionStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1136
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (VisualBasic6Parser.FRIEND - 68)) | (1 << (VisualBasic6Parser.GLOBAL - 68)) | (1 << (VisualBasic6Parser.PRIVATE - 68)) | (1 << (VisualBasic6Parser.PUBLIC - 68)))) != 0):
                self.state = 1133
                self.visibility()
                self.state = 1134
                self.match(VisualBasic6Parser.WS)


            self.state = 1140
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.STATIC:
                self.state = 1138
                self.match(VisualBasic6Parser.STATIC)
                self.state = 1139
                self.match(VisualBasic6Parser.WS)


            self.state = 1142
            self.match(VisualBasic6Parser.FUNCTION)
            self.state = 1143
            self.match(VisualBasic6Parser.WS)
            self.state = 1144
            self.ambiguousIdentifier()
            self.state = 1149
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                self.state = 1146
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualBasic6Parser.WS:
                    self.state = 1145
                    self.match(VisualBasic6Parser.WS)


                self.state = 1148
                self.argList()


            self.state = 1153
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 1151
                self.match(VisualBasic6Parser.WS)
                self.state = 1152
                self.asTypeClause()


            self.state = 1156 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1155
                self.match(VisualBasic6Parser.NEWLINE)
                self.state = 1158 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==VisualBasic6Parser.NEWLINE):
                    break

            self.state = 1166
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualBasic6Parser.ACCESS) | (1 << VisualBasic6Parser.ADDRESSOF) | (1 << VisualBasic6Parser.ALIAS) | (1 << VisualBasic6Parser.AND) | (1 << VisualBasic6Parser.ATTRIBUTE) | (1 << VisualBasic6Parser.APPACTIVATE) | (1 << VisualBasic6Parser.APPEND) | (1 << VisualBasic6Parser.AS) | (1 << VisualBasic6Parser.BEEP) | (1 << VisualBasic6Parser.BEGIN) | (1 << VisualBasic6Parser.BINARY) | (1 << VisualBasic6Parser.BOOLEAN) | (1 << VisualBasic6Parser.BYVAL) | (1 << VisualBasic6Parser.BYREF) | (1 << VisualBasic6Parser.BYTE) | (1 << VisualBasic6Parser.CALL) | (1 << VisualBasic6Parser.CASE) | (1 << VisualBasic6Parser.CHDIR) | (1 << VisualBasic6Parser.CHDRIVE) | (1 << VisualBasic6Parser.CLASS) | (1 << VisualBasic6Parser.CLOSE) | (1 << VisualBasic6Parser.COLLECTION) | (1 << VisualBasic6Parser.CONST) | (1 << VisualBasic6Parser.DATE) | (1 << VisualBasic6Parser.DECLARE) | (1 << VisualBasic6Parser.DEFBOOL) | (1 << VisualBasic6Parser.DEFBYTE) | (1 << VisualBasic6Parser.DEFDATE) | (1 << VisualBasic6Parser.DEFDBL) | (1 << VisualBasic6Parser.DEFDEC) | (1 << VisualBasic6Parser.DEFCUR) | (1 << VisualBasic6Parser.DEFINT) | (1 << VisualBasic6Parser.DEFLNG) | (1 << VisualBasic6Parser.DEFOBJ) | (1 << VisualBasic6Parser.DEFSNG) | (1 << VisualBasic6Parser.DEFSTR) | (1 << VisualBasic6Parser.DEFVAR) | (1 << VisualBasic6Parser.DELETESETTING) | (1 << VisualBasic6Parser.DIM) | (1 << VisualBasic6Parser.DO) | (1 << VisualBasic6Parser.DOUBLE) | (1 << VisualBasic6Parser.EACH) | (1 << VisualBasic6Parser.ELSE) | (1 << VisualBasic6Parser.ELSEIF) | (1 << VisualBasic6Parser.END) | (1 << VisualBasic6Parser.ENUM) | (1 << VisualBasic6Parser.EQV) | (1 << VisualBasic6Parser.ERASE) | (1 << VisualBasic6Parser.ERROR) | (1 << VisualBasic6Parser.EVENT) | (1 << VisualBasic6Parser.EXIT_DO) | (1 << VisualBasic6Parser.EXIT_FOR) | (1 << VisualBasic6Parser.EXIT_FUNCTION))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualBasic6Parser.EXIT_PROPERTY - 64)) | (1 << (VisualBasic6Parser.EXIT_SUB - 64)) | (1 << (VisualBasic6Parser.FALSE - 64)) | (1 << (VisualBasic6Parser.FILECOPY - 64)) | (1 << (VisualBasic6Parser.FRIEND - 64)) | (1 << (VisualBasic6Parser.FOR - 64)) | (1 << (VisualBasic6Parser.FUNCTION - 64)) | (1 << (VisualBasic6Parser.GET - 64)) | (1 << (VisualBasic6Parser.GLOBAL - 64)) | (1 << (VisualBasic6Parser.GOSUB - 64)) | (1 << (VisualBasic6Parser.GOTO - 64)) | (1 << (VisualBasic6Parser.IF - 64)) | (1 << (VisualBasic6Parser.IMP - 64)) | (1 << (VisualBasic6Parser.IMPLEMENTS - 64)) | (1 << (VisualBasic6Parser.IN - 64)) | (1 << (VisualBasic6Parser.INPUT - 64)) | (1 << (VisualBasic6Parser.IS - 64)) | (1 << (VisualBasic6Parser.INTEGER - 64)) | (1 << (VisualBasic6Parser.KILL - 64)) | (1 << (VisualBasic6Parser.LOAD - 64)) | (1 << (VisualBasic6Parser.LOCK - 64)) | (1 << (VisualBasic6Parser.LONG - 64)) | (1 << (VisualBasic6Parser.LOOP - 64)) | (1 << (VisualBasic6Parser.LEN - 64)) | (1 << (VisualBasic6Parser.LET - 64)) | (1 << (VisualBasic6Parser.LIB - 64)) | (1 << (VisualBasic6Parser.LIKE - 64)) | (1 << (VisualBasic6Parser.LINE_INPUT - 64)) | (1 << (VisualBasic6Parser.LSET - 64)) | (1 << (VisualBasic6Parser.MACRO_IF - 64)) | (1 << (VisualBasic6Parser.ME - 64)) | (1 << (VisualBasic6Parser.MID - 64)) | (1 << (VisualBasic6Parser.MKDIR - 64)) | (1 << (VisualBasic6Parser.MOD - 64)) | (1 << (VisualBasic6Parser.NAME - 64)) | (1 << (VisualBasic6Parser.NEXT - 64)) | (1 << (VisualBasic6Parser.NEW - 64)) | (1 << (VisualBasic6Parser.NOT - 64)) | (1 << (VisualBasic6Parser.NOTHING - 64)) | (1 << (VisualBasic6Parser.NULL - 64)) | (1 << (VisualBasic6Parser.OBJECT - 64)) | (1 << (VisualBasic6Parser.ON - 64)) | (1 << (VisualBasic6Parser.ON_ERROR - 64)) | (1 << (VisualBasic6Parser.ON_LOCAL_ERROR - 64)) | (1 << (VisualBasic6Parser.OPEN - 64)) | (1 << (VisualBasic6Parser.OPTIONAL - 64)) | (1 << (VisualBasic6Parser.OR - 64)) | (1 << (VisualBasic6Parser.OUTPUT - 64)) | (1 << (VisualBasic6Parser.PARAMARRAY - 64)) | (1 << (VisualBasic6Parser.PRESERVE - 64)) | (1 << (VisualBasic6Parser.PRINT - 64)) | (1 << (VisualBasic6Parser.PRIVATE - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualBasic6Parser.PUBLIC - 129)) | (1 << (VisualBasic6Parser.PUT - 129)) | (1 << (VisualBasic6Parser.RANDOM - 129)) | (1 << (VisualBasic6Parser.RANDOMIZE - 129)) | (1 << (VisualBasic6Parser.RAISEEVENT - 129)) | (1 << (VisualBasic6Parser.READ - 129)) | (1 << (VisualBasic6Parser.REDIM - 129)) | (1 << (VisualBasic6Parser.REM - 129)) | (1 << (VisualBasic6Parser.RESET - 129)) | (1 << (VisualBasic6Parser.RESUME - 129)) | (1 << (VisualBasic6Parser.RETURN - 129)) | (1 << (VisualBasic6Parser.RMDIR - 129)) | (1 << (VisualBasic6Parser.RSET - 129)) | (1 << (VisualBasic6Parser.SAVEPICTURE - 129)) | (1 << (VisualBasic6Parser.SAVESETTING - 129)) | (1 << (VisualBasic6Parser.SEEK - 129)) | (1 << (VisualBasic6Parser.SELECT - 129)) | (1 << (VisualBasic6Parser.SENDKEYS - 129)) | (1 << (VisualBasic6Parser.SET - 129)) | (1 << (VisualBasic6Parser.SETATTR - 129)) | (1 << (VisualBasic6Parser.SHARED - 129)) | (1 << (VisualBasic6Parser.SINGLE - 129)) | (1 << (VisualBasic6Parser.SPC - 129)) | (1 << (VisualBasic6Parser.STATIC - 129)) | (1 << (VisualBasic6Parser.STEP - 129)) | (1 << (VisualBasic6Parser.STOP - 129)) | (1 << (VisualBasic6Parser.STRING - 129)) | (1 << (VisualBasic6Parser.SUB - 129)) | (1 << (VisualBasic6Parser.TAB - 129)) | (1 << (VisualBasic6Parser.TEXT - 129)) | (1 << (VisualBasic6Parser.THEN - 129)) | (1 << (VisualBasic6Parser.TIME - 129)) | (1 << (VisualBasic6Parser.TO - 129)) | (1 << (VisualBasic6Parser.TRUE - 129)) | (1 << (VisualBasic6Parser.TYPE - 129)) | (1 << (VisualBasic6Parser.TYPEOF - 129)) | (1 << (VisualBasic6Parser.UNLOAD - 129)) | (1 << (VisualBasic6Parser.UNLOCK - 129)) | (1 << (VisualBasic6Parser.UNTIL - 129)) | (1 << (VisualBasic6Parser.VARIANT - 129)) | (1 << (VisualBasic6Parser.VERSION - 129)) | (1 << (VisualBasic6Parser.WEND - 129)) | (1 << (VisualBasic6Parser.WHILE - 129)) | (1 << (VisualBasic6Parser.WIDTH - 129)) | (1 << (VisualBasic6Parser.WITH - 129)) | (1 << (VisualBasic6Parser.WITHEVENTS - 129)) | (1 << (VisualBasic6Parser.WRITE - 129)) | (1 << (VisualBasic6Parser.XOR - 129)) | (1 << (VisualBasic6Parser.DOT - 129)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 129)))) != 0) or ((((_la - 206)) & ~0x3f) == 0 and ((1 << (_la - 206)) & ((1 << (VisualBasic6Parser.L_SQUARE_BRACKET - 206)) | (1 << (VisualBasic6Parser.IDENTIFIER - 206)) | (1 << (VisualBasic6Parser.WS - 206)))) != 0):
                self.state = 1160
                self.block()
                self.state = 1162 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1161
                    self.match(VisualBasic6Parser.NEWLINE)
                    self.state = 1164 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==VisualBasic6Parser.NEWLINE):
                        break



            self.state = 1168
            self.match(VisualBasic6Parser.END_FUNCTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GetStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET(self):
            return self.getToken(VisualBasic6Parser.GET, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.COMMA)
            else:
                return self.getToken(VisualBasic6Parser.COMMA, i)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_getStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetStmt" ):
                listener.enterGetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetStmt" ):
                listener.exitGetStmt(self)




    def getStmt(self):

        localctx = VisualBasic6Parser.GetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_getStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1170
            self.match(VisualBasic6Parser.GET)
            self.state = 1171
            self.match(VisualBasic6Parser.WS)
            self.state = 1172
            self.valueStmt(0)
            self.state = 1174
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 1173
                self.match(VisualBasic6Parser.WS)


            self.state = 1176
            self.match(VisualBasic6Parser.COMMA)
            self.state = 1178
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
            if la_ == 1:
                self.state = 1177
                self.match(VisualBasic6Parser.WS)


            self.state = 1181
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
            if la_ == 1:
                self.state = 1180
                self.valueStmt(0)


            self.state = 1184
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 1183
                self.match(VisualBasic6Parser.WS)


            self.state = 1186
            self.match(VisualBasic6Parser.COMMA)
            self.state = 1188
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                self.state = 1187
                self.match(VisualBasic6Parser.WS)


            self.state = 1190
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GoSubStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GOSUB(self):
            return self.getToken(VisualBasic6Parser.GOSUB, 0)

        def WS(self):
            return self.getToken(VisualBasic6Parser.WS, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_goSubStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGoSubStmt" ):
                listener.enterGoSubStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGoSubStmt" ):
                listener.exitGoSubStmt(self)




    def goSubStmt(self):

        localctx = VisualBasic6Parser.GoSubStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_goSubStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1192
            self.match(VisualBasic6Parser.GOSUB)
            self.state = 1193
            self.match(VisualBasic6Parser.WS)
            self.state = 1194
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GoToStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GOTO(self):
            return self.getToken(VisualBasic6Parser.GOTO, 0)

        def WS(self):
            return self.getToken(VisualBasic6Parser.WS, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_goToStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGoToStmt" ):
                listener.enterGoToStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGoToStmt" ):
                listener.exitGoToStmt(self)




    def goToStmt(self):

        localctx = VisualBasic6Parser.GoToStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_goToStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1196
            self.match(VisualBasic6Parser.GOTO)
            self.state = 1197
            self.match(VisualBasic6Parser.WS)
            self.state = 1198
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfThenElseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_ifThenElseStmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class BlockIfThenElseContext(IfThenElseStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualBasic6Parser.IfThenElseStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ifBlockStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.IfBlockStmtContext,0)

        def END_IF(self):
            return self.getToken(VisualBasic6Parser.END_IF, 0)
        def ifElseIfBlockStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.IfElseIfBlockStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.IfElseIfBlockStmtContext,i)

        def ifElseBlockStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.IfElseBlockStmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockIfThenElse" ):
                listener.enterBlockIfThenElse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockIfThenElse" ):
                listener.exitBlockIfThenElse(self)


    class InlineIfThenElseContext(IfThenElseStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualBasic6Parser.IfThenElseStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IF(self):
            return self.getToken(VisualBasic6Parser.IF, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)
        def ifConditionStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.IfConditionStmtContext,0)

        def THEN(self):
            return self.getToken(VisualBasic6Parser.THEN, 0)
        def blockStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.BlockStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.BlockStmtContext,i)

        def ELSE(self):
            return self.getToken(VisualBasic6Parser.ELSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineIfThenElse" ):
                listener.enterInlineIfThenElse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineIfThenElse" ):
                listener.exitInlineIfThenElse(self)



    def ifThenElseStmt(self):

        localctx = VisualBasic6Parser.IfThenElseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_ifThenElseStmt)
        self._la = 0 # Token type
        try:
            self.state = 1225
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                localctx = VisualBasic6Parser.InlineIfThenElseContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1200
                self.match(VisualBasic6Parser.IF)
                self.state = 1201
                self.match(VisualBasic6Parser.WS)
                self.state = 1202
                self.ifConditionStmt()
                self.state = 1203
                self.match(VisualBasic6Parser.WS)
                self.state = 1204
                self.match(VisualBasic6Parser.THEN)
                self.state = 1205
                self.match(VisualBasic6Parser.WS)
                self.state = 1206
                self.blockStmt()
                self.state = 1211
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
                if la_ == 1:
                    self.state = 1207
                    self.match(VisualBasic6Parser.WS)
                    self.state = 1208
                    self.match(VisualBasic6Parser.ELSE)
                    self.state = 1209
                    self.match(VisualBasic6Parser.WS)
                    self.state = 1210
                    self.blockStmt()


                pass

            elif la_ == 2:
                localctx = VisualBasic6Parser.BlockIfThenElseContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1213
                self.ifBlockStmt()
                self.state = 1217
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualBasic6Parser.ELSEIF:
                    self.state = 1214
                    self.ifElseIfBlockStmt()
                    self.state = 1219
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1221
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualBasic6Parser.ELSE:
                    self.state = 1220
                    self.ifElseBlockStmt()


                self.state = 1223
                self.match(VisualBasic6Parser.END_IF)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfBlockStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(VisualBasic6Parser.IF, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def ifConditionStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.IfConditionStmtContext,0)


        def THEN(self):
            return self.getToken(VisualBasic6Parser.THEN, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.NEWLINE)
            else:
                return self.getToken(VisualBasic6Parser.NEWLINE, i)

        def block(self):
            return self.getTypedRuleContext(VisualBasic6Parser.BlockContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_ifBlockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfBlockStmt" ):
                listener.enterIfBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfBlockStmt" ):
                listener.exitIfBlockStmt(self)




    def ifBlockStmt(self):

        localctx = VisualBasic6Parser.IfBlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_ifBlockStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1227
            self.match(VisualBasic6Parser.IF)
            self.state = 1228
            self.match(VisualBasic6Parser.WS)
            self.state = 1229
            self.ifConditionStmt()
            self.state = 1230
            self.match(VisualBasic6Parser.WS)
            self.state = 1231
            self.match(VisualBasic6Parser.THEN)
            self.state = 1233 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1232
                self.match(VisualBasic6Parser.NEWLINE)
                self.state = 1235 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==VisualBasic6Parser.NEWLINE):
                    break

            self.state = 1243
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.state = 1237
                self.block()
                self.state = 1239 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1238
                    self.match(VisualBasic6Parser.NEWLINE)
                    self.state = 1241 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==VisualBasic6Parser.NEWLINE):
                        break



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfConditionStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_ifConditionStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfConditionStmt" ):
                listener.enterIfConditionStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfConditionStmt" ):
                listener.exitIfConditionStmt(self)




    def ifConditionStmt(self):

        localctx = VisualBasic6Parser.IfConditionStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_ifConditionStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1245
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfElseIfBlockStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSEIF(self):
            return self.getToken(VisualBasic6Parser.ELSEIF, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def ifConditionStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.IfConditionStmtContext,0)


        def THEN(self):
            return self.getToken(VisualBasic6Parser.THEN, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.NEWLINE)
            else:
                return self.getToken(VisualBasic6Parser.NEWLINE, i)

        def block(self):
            return self.getTypedRuleContext(VisualBasic6Parser.BlockContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_ifElseIfBlockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfElseIfBlockStmt" ):
                listener.enterIfElseIfBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfElseIfBlockStmt" ):
                listener.exitIfElseIfBlockStmt(self)




    def ifElseIfBlockStmt(self):

        localctx = VisualBasic6Parser.IfElseIfBlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_ifElseIfBlockStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1247
            self.match(VisualBasic6Parser.ELSEIF)
            self.state = 1248
            self.match(VisualBasic6Parser.WS)
            self.state = 1249
            self.ifConditionStmt()
            self.state = 1250
            self.match(VisualBasic6Parser.WS)
            self.state = 1251
            self.match(VisualBasic6Parser.THEN)
            self.state = 1253 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1252
                self.match(VisualBasic6Parser.NEWLINE)
                self.state = 1255 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==VisualBasic6Parser.NEWLINE):
                    break

            self.state = 1263
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
            if la_ == 1:
                self.state = 1257
                self.block()
                self.state = 1259 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1258
                    self.match(VisualBasic6Parser.NEWLINE)
                    self.state = 1261 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==VisualBasic6Parser.NEWLINE):
                        break



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfElseBlockStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(VisualBasic6Parser.ELSE, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.NEWLINE)
            else:
                return self.getToken(VisualBasic6Parser.NEWLINE, i)

        def block(self):
            return self.getTypedRuleContext(VisualBasic6Parser.BlockContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_ifElseBlockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfElseBlockStmt" ):
                listener.enterIfElseBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfElseBlockStmt" ):
                listener.exitIfElseBlockStmt(self)




    def ifElseBlockStmt(self):

        localctx = VisualBasic6Parser.IfElseBlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_ifElseBlockStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1265
            self.match(VisualBasic6Parser.ELSE)
            self.state = 1267 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1266
                self.match(VisualBasic6Parser.NEWLINE)
                self.state = 1269 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==VisualBasic6Parser.NEWLINE):
                    break

            self.state = 1277
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualBasic6Parser.ACCESS) | (1 << VisualBasic6Parser.ADDRESSOF) | (1 << VisualBasic6Parser.ALIAS) | (1 << VisualBasic6Parser.AND) | (1 << VisualBasic6Parser.ATTRIBUTE) | (1 << VisualBasic6Parser.APPACTIVATE) | (1 << VisualBasic6Parser.APPEND) | (1 << VisualBasic6Parser.AS) | (1 << VisualBasic6Parser.BEEP) | (1 << VisualBasic6Parser.BEGIN) | (1 << VisualBasic6Parser.BINARY) | (1 << VisualBasic6Parser.BOOLEAN) | (1 << VisualBasic6Parser.BYVAL) | (1 << VisualBasic6Parser.BYREF) | (1 << VisualBasic6Parser.BYTE) | (1 << VisualBasic6Parser.CALL) | (1 << VisualBasic6Parser.CASE) | (1 << VisualBasic6Parser.CHDIR) | (1 << VisualBasic6Parser.CHDRIVE) | (1 << VisualBasic6Parser.CLASS) | (1 << VisualBasic6Parser.CLOSE) | (1 << VisualBasic6Parser.COLLECTION) | (1 << VisualBasic6Parser.CONST) | (1 << VisualBasic6Parser.DATE) | (1 << VisualBasic6Parser.DECLARE) | (1 << VisualBasic6Parser.DEFBOOL) | (1 << VisualBasic6Parser.DEFBYTE) | (1 << VisualBasic6Parser.DEFDATE) | (1 << VisualBasic6Parser.DEFDBL) | (1 << VisualBasic6Parser.DEFDEC) | (1 << VisualBasic6Parser.DEFCUR) | (1 << VisualBasic6Parser.DEFINT) | (1 << VisualBasic6Parser.DEFLNG) | (1 << VisualBasic6Parser.DEFOBJ) | (1 << VisualBasic6Parser.DEFSNG) | (1 << VisualBasic6Parser.DEFSTR) | (1 << VisualBasic6Parser.DEFVAR) | (1 << VisualBasic6Parser.DELETESETTING) | (1 << VisualBasic6Parser.DIM) | (1 << VisualBasic6Parser.DO) | (1 << VisualBasic6Parser.DOUBLE) | (1 << VisualBasic6Parser.EACH) | (1 << VisualBasic6Parser.ELSE) | (1 << VisualBasic6Parser.ELSEIF) | (1 << VisualBasic6Parser.END) | (1 << VisualBasic6Parser.ENUM) | (1 << VisualBasic6Parser.EQV) | (1 << VisualBasic6Parser.ERASE) | (1 << VisualBasic6Parser.ERROR) | (1 << VisualBasic6Parser.EVENT) | (1 << VisualBasic6Parser.EXIT_DO) | (1 << VisualBasic6Parser.EXIT_FOR) | (1 << VisualBasic6Parser.EXIT_FUNCTION))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualBasic6Parser.EXIT_PROPERTY - 64)) | (1 << (VisualBasic6Parser.EXIT_SUB - 64)) | (1 << (VisualBasic6Parser.FALSE - 64)) | (1 << (VisualBasic6Parser.FILECOPY - 64)) | (1 << (VisualBasic6Parser.FRIEND - 64)) | (1 << (VisualBasic6Parser.FOR - 64)) | (1 << (VisualBasic6Parser.FUNCTION - 64)) | (1 << (VisualBasic6Parser.GET - 64)) | (1 << (VisualBasic6Parser.GLOBAL - 64)) | (1 << (VisualBasic6Parser.GOSUB - 64)) | (1 << (VisualBasic6Parser.GOTO - 64)) | (1 << (VisualBasic6Parser.IF - 64)) | (1 << (VisualBasic6Parser.IMP - 64)) | (1 << (VisualBasic6Parser.IMPLEMENTS - 64)) | (1 << (VisualBasic6Parser.IN - 64)) | (1 << (VisualBasic6Parser.INPUT - 64)) | (1 << (VisualBasic6Parser.IS - 64)) | (1 << (VisualBasic6Parser.INTEGER - 64)) | (1 << (VisualBasic6Parser.KILL - 64)) | (1 << (VisualBasic6Parser.LOAD - 64)) | (1 << (VisualBasic6Parser.LOCK - 64)) | (1 << (VisualBasic6Parser.LONG - 64)) | (1 << (VisualBasic6Parser.LOOP - 64)) | (1 << (VisualBasic6Parser.LEN - 64)) | (1 << (VisualBasic6Parser.LET - 64)) | (1 << (VisualBasic6Parser.LIB - 64)) | (1 << (VisualBasic6Parser.LIKE - 64)) | (1 << (VisualBasic6Parser.LINE_INPUT - 64)) | (1 << (VisualBasic6Parser.LSET - 64)) | (1 << (VisualBasic6Parser.MACRO_IF - 64)) | (1 << (VisualBasic6Parser.ME - 64)) | (1 << (VisualBasic6Parser.MID - 64)) | (1 << (VisualBasic6Parser.MKDIR - 64)) | (1 << (VisualBasic6Parser.MOD - 64)) | (1 << (VisualBasic6Parser.NAME - 64)) | (1 << (VisualBasic6Parser.NEXT - 64)) | (1 << (VisualBasic6Parser.NEW - 64)) | (1 << (VisualBasic6Parser.NOT - 64)) | (1 << (VisualBasic6Parser.NOTHING - 64)) | (1 << (VisualBasic6Parser.NULL - 64)) | (1 << (VisualBasic6Parser.OBJECT - 64)) | (1 << (VisualBasic6Parser.ON - 64)) | (1 << (VisualBasic6Parser.ON_ERROR - 64)) | (1 << (VisualBasic6Parser.ON_LOCAL_ERROR - 64)) | (1 << (VisualBasic6Parser.OPEN - 64)) | (1 << (VisualBasic6Parser.OPTIONAL - 64)) | (1 << (VisualBasic6Parser.OR - 64)) | (1 << (VisualBasic6Parser.OUTPUT - 64)) | (1 << (VisualBasic6Parser.PARAMARRAY - 64)) | (1 << (VisualBasic6Parser.PRESERVE - 64)) | (1 << (VisualBasic6Parser.PRINT - 64)) | (1 << (VisualBasic6Parser.PRIVATE - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualBasic6Parser.PUBLIC - 129)) | (1 << (VisualBasic6Parser.PUT - 129)) | (1 << (VisualBasic6Parser.RANDOM - 129)) | (1 << (VisualBasic6Parser.RANDOMIZE - 129)) | (1 << (VisualBasic6Parser.RAISEEVENT - 129)) | (1 << (VisualBasic6Parser.READ - 129)) | (1 << (VisualBasic6Parser.REDIM - 129)) | (1 << (VisualBasic6Parser.REM - 129)) | (1 << (VisualBasic6Parser.RESET - 129)) | (1 << (VisualBasic6Parser.RESUME - 129)) | (1 << (VisualBasic6Parser.RETURN - 129)) | (1 << (VisualBasic6Parser.RMDIR - 129)) | (1 << (VisualBasic6Parser.RSET - 129)) | (1 << (VisualBasic6Parser.SAVEPICTURE - 129)) | (1 << (VisualBasic6Parser.SAVESETTING - 129)) | (1 << (VisualBasic6Parser.SEEK - 129)) | (1 << (VisualBasic6Parser.SELECT - 129)) | (1 << (VisualBasic6Parser.SENDKEYS - 129)) | (1 << (VisualBasic6Parser.SET - 129)) | (1 << (VisualBasic6Parser.SETATTR - 129)) | (1 << (VisualBasic6Parser.SHARED - 129)) | (1 << (VisualBasic6Parser.SINGLE - 129)) | (1 << (VisualBasic6Parser.SPC - 129)) | (1 << (VisualBasic6Parser.STATIC - 129)) | (1 << (VisualBasic6Parser.STEP - 129)) | (1 << (VisualBasic6Parser.STOP - 129)) | (1 << (VisualBasic6Parser.STRING - 129)) | (1 << (VisualBasic6Parser.SUB - 129)) | (1 << (VisualBasic6Parser.TAB - 129)) | (1 << (VisualBasic6Parser.TEXT - 129)) | (1 << (VisualBasic6Parser.THEN - 129)) | (1 << (VisualBasic6Parser.TIME - 129)) | (1 << (VisualBasic6Parser.TO - 129)) | (1 << (VisualBasic6Parser.TRUE - 129)) | (1 << (VisualBasic6Parser.TYPE - 129)) | (1 << (VisualBasic6Parser.TYPEOF - 129)) | (1 << (VisualBasic6Parser.UNLOAD - 129)) | (1 << (VisualBasic6Parser.UNLOCK - 129)) | (1 << (VisualBasic6Parser.UNTIL - 129)) | (1 << (VisualBasic6Parser.VARIANT - 129)) | (1 << (VisualBasic6Parser.VERSION - 129)) | (1 << (VisualBasic6Parser.WEND - 129)) | (1 << (VisualBasic6Parser.WHILE - 129)) | (1 << (VisualBasic6Parser.WIDTH - 129)) | (1 << (VisualBasic6Parser.WITH - 129)) | (1 << (VisualBasic6Parser.WITHEVENTS - 129)) | (1 << (VisualBasic6Parser.WRITE - 129)) | (1 << (VisualBasic6Parser.XOR - 129)) | (1 << (VisualBasic6Parser.DOT - 129)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 129)))) != 0) or ((((_la - 206)) & ~0x3f) == 0 and ((1 << (_la - 206)) & ((1 << (VisualBasic6Parser.L_SQUARE_BRACKET - 206)) | (1 << (VisualBasic6Parser.IDENTIFIER - 206)) | (1 << (VisualBasic6Parser.WS - 206)))) != 0):
                self.state = 1271
                self.block()
                self.state = 1273 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1272
                    self.match(VisualBasic6Parser.NEWLINE)
                    self.state = 1275 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==VisualBasic6Parser.NEWLINE):
                        break



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImplementsStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPLEMENTS(self):
            return self.getToken(VisualBasic6Parser.IMPLEMENTS, 0)

        def WS(self):
            return self.getToken(VisualBasic6Parser.WS, 0)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(VisualBasic6Parser.AmbiguousIdentifierContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_implementsStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplementsStmt" ):
                listener.enterImplementsStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplementsStmt" ):
                listener.exitImplementsStmt(self)




    def implementsStmt(self):

        localctx = VisualBasic6Parser.ImplementsStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_implementsStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1279
            self.match(VisualBasic6Parser.IMPLEMENTS)
            self.state = 1280
            self.match(VisualBasic6Parser.WS)
            self.state = 1281
            self.ambiguousIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InputStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INPUT(self):
            return self.getToken(VisualBasic6Parser.INPUT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.COMMA)
            else:
                return self.getToken(VisualBasic6Parser.COMMA, i)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_inputStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInputStmt" ):
                listener.enterInputStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInputStmt" ):
                listener.exitInputStmt(self)




    def inputStmt(self):

        localctx = VisualBasic6Parser.InputStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_inputStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1283
            self.match(VisualBasic6Parser.INPUT)
            self.state = 1284
            self.match(VisualBasic6Parser.WS)
            self.state = 1285
            self.valueStmt(0)
            self.state = 1294 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1287
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualBasic6Parser.WS:
                        self.state = 1286
                        self.match(VisualBasic6Parser.WS)


                    self.state = 1289
                    self.match(VisualBasic6Parser.COMMA)
                    self.state = 1291
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
                    if la_ == 1:
                        self.state = 1290
                        self.match(VisualBasic6Parser.WS)


                    self.state = 1293
                    self.valueStmt(0)

                else:
                    raise NoViableAltException(self)
                self.state = 1296 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,170,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KillStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KILL(self):
            return self.getToken(VisualBasic6Parser.KILL, 0)

        def WS(self):
            return self.getToken(VisualBasic6Parser.WS, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_killStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKillStmt" ):
                listener.enterKillStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKillStmt" ):
                listener.exitKillStmt(self)




    def killStmt(self):

        localctx = VisualBasic6Parser.KillStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_killStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1298
            self.match(VisualBasic6Parser.KILL)
            self.state = 1299
            self.match(VisualBasic6Parser.WS)
            self.state = 1300
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LetStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ImplicitCallStmt_InStmtContext,0)


        def valueStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,0)


        def EQ(self):
            return self.getToken(VisualBasic6Parser.EQ, 0)

        def PLUS_EQ(self):
            return self.getToken(VisualBasic6Parser.PLUS_EQ, 0)

        def MINUS_EQ(self):
            return self.getToken(VisualBasic6Parser.MINUS_EQ, 0)

        def LET(self):
            return self.getToken(VisualBasic6Parser.LET, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_letStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetStmt" ):
                listener.enterLetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetStmt" ):
                listener.exitLetStmt(self)




    def letStmt(self):

        localctx = VisualBasic6Parser.LetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_letStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1304
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.state = 1302
                self.match(VisualBasic6Parser.LET)
                self.state = 1303
                self.match(VisualBasic6Parser.WS)


            self.state = 1306
            self.implicitCallStmt_InStmt()
            self.state = 1308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 1307
                self.match(VisualBasic6Parser.WS)


            self.state = 1310
            _la = self._input.LA(1)
            if not(((((_la - 186)) & ~0x3f) == 0 and ((1 << (_la - 186)) & ((1 << (VisualBasic6Parser.EQ - 186)) | (1 << (VisualBasic6Parser.MINUS_EQ - 186)) | (1 << (VisualBasic6Parser.PLUS_EQ - 186)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1312
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                self.state = 1311
                self.match(VisualBasic6Parser.WS)


            self.state = 1314
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LineInputStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINE_INPUT(self):
            return self.getToken(VisualBasic6Parser.LINE_INPUT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,i)


        def COMMA(self):
            return self.getToken(VisualBasic6Parser.COMMA, 0)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_lineInputStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineInputStmt" ):
                listener.enterLineInputStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineInputStmt" ):
                listener.exitLineInputStmt(self)




    def lineInputStmt(self):

        localctx = VisualBasic6Parser.LineInputStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_lineInputStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1316
            self.match(VisualBasic6Parser.LINE_INPUT)
            self.state = 1317
            self.match(VisualBasic6Parser.WS)
            self.state = 1318
            self.valueStmt(0)
            self.state = 1320
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 1319
                self.match(VisualBasic6Parser.WS)


            self.state = 1322
            self.match(VisualBasic6Parser.COMMA)
            self.state = 1324
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
            if la_ == 1:
                self.state = 1323
                self.match(VisualBasic6Parser.WS)


            self.state = 1326
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LoadStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOAD(self):
            return self.getToken(VisualBasic6Parser.LOAD, 0)

        def WS(self):
            return self.getToken(VisualBasic6Parser.WS, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_loadStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadStmt" ):
                listener.enterLoadStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadStmt" ):
                listener.exitLoadStmt(self)




    def loadStmt(self):

        localctx = VisualBasic6Parser.LoadStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_loadStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1328
            self.match(VisualBasic6Parser.LOAD)
            self.state = 1329
            self.match(VisualBasic6Parser.WS)
            self.state = 1330
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LockStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCK(self):
            return self.getToken(VisualBasic6Parser.LOCK, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,i)


        def COMMA(self):
            return self.getToken(VisualBasic6Parser.COMMA, 0)

        def TO(self):
            return self.getToken(VisualBasic6Parser.TO, 0)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_lockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockStmt" ):
                listener.enterLockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockStmt" ):
                listener.exitLockStmt(self)




    def lockStmt(self):

        localctx = VisualBasic6Parser.LockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_lockStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1332
            self.match(VisualBasic6Parser.LOCK)
            self.state = 1333
            self.match(VisualBasic6Parser.WS)
            self.state = 1334
            self.valueStmt(0)
            self.state = 1349
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
            if la_ == 1:
                self.state = 1336
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualBasic6Parser.WS:
                    self.state = 1335
                    self.match(VisualBasic6Parser.WS)


                self.state = 1338
                self.match(VisualBasic6Parser.COMMA)
                self.state = 1340
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
                if la_ == 1:
                    self.state = 1339
                    self.match(VisualBasic6Parser.WS)


                self.state = 1342
                self.valueStmt(0)
                self.state = 1347
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
                if la_ == 1:
                    self.state = 1343
                    self.match(VisualBasic6Parser.WS)
                    self.state = 1344
                    self.match(VisualBasic6Parser.TO)
                    self.state = 1345
                    self.match(VisualBasic6Parser.WS)
                    self.state = 1346
                    self.valueStmt(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LsetStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSET(self):
            return self.getToken(VisualBasic6Parser.LSET, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ImplicitCallStmt_InStmtContext,0)


        def EQ(self):
            return self.getToken(VisualBasic6Parser.EQ, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_lsetStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLsetStmt" ):
                listener.enterLsetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLsetStmt" ):
                listener.exitLsetStmt(self)




    def lsetStmt(self):

        localctx = VisualBasic6Parser.LsetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_lsetStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1351
            self.match(VisualBasic6Parser.LSET)
            self.state = 1352
            self.match(VisualBasic6Parser.WS)
            self.state = 1353
            self.implicitCallStmt_InStmt()
            self.state = 1355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 1354
                self.match(VisualBasic6Parser.WS)


            self.state = 1357
            self.match(VisualBasic6Parser.EQ)
            self.state = 1359
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
            if la_ == 1:
                self.state = 1358
                self.match(VisualBasic6Parser.WS)


            self.state = 1361
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MacroIfThenElseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def macroIfBlockStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.MacroIfBlockStmtContext,0)


        def MACRO_END_IF(self):
            return self.getToken(VisualBasic6Parser.MACRO_END_IF, 0)

        def macroElseIfBlockStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.MacroElseIfBlockStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.MacroElseIfBlockStmtContext,i)


        def macroElseBlockStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.MacroElseBlockStmtContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_macroIfThenElseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroIfThenElseStmt" ):
                listener.enterMacroIfThenElseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroIfThenElseStmt" ):
                listener.exitMacroIfThenElseStmt(self)




    def macroIfThenElseStmt(self):

        localctx = VisualBasic6Parser.MacroIfThenElseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_macroIfThenElseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1363
            self.macroIfBlockStmt()
            self.state = 1367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VisualBasic6Parser.MACRO_ELSEIF:
                self.state = 1364
                self.macroElseIfBlockStmt()
                self.state = 1369
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.MACRO_ELSE:
                self.state = 1370
                self.macroElseBlockStmt()


            self.state = 1373
            self.match(VisualBasic6Parser.MACRO_END_IF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MacroIfBlockStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MACRO_IF(self):
            return self.getToken(VisualBasic6Parser.MACRO_IF, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def ifConditionStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.IfConditionStmtContext,0)


        def THEN(self):
            return self.getToken(VisualBasic6Parser.THEN, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.NEWLINE)
            else:
                return self.getToken(VisualBasic6Parser.NEWLINE, i)

        def moduleBody(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ModuleBodyContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_macroIfBlockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroIfBlockStmt" ):
                listener.enterMacroIfBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroIfBlockStmt" ):
                listener.exitMacroIfBlockStmt(self)




    def macroIfBlockStmt(self):

        localctx = VisualBasic6Parser.MacroIfBlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_macroIfBlockStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1375
            self.match(VisualBasic6Parser.MACRO_IF)
            self.state = 1376
            self.match(VisualBasic6Parser.WS)
            self.state = 1377
            self.ifConditionStmt()
            self.state = 1378
            self.match(VisualBasic6Parser.WS)
            self.state = 1379
            self.match(VisualBasic6Parser.THEN)
            self.state = 1381 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1380
                self.match(VisualBasic6Parser.NEWLINE)
                self.state = 1383 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==VisualBasic6Parser.NEWLINE):
                    break

            self.state = 1391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualBasic6Parser.ACCESS) | (1 << VisualBasic6Parser.ADDRESSOF) | (1 << VisualBasic6Parser.ALIAS) | (1 << VisualBasic6Parser.AND) | (1 << VisualBasic6Parser.ATTRIBUTE) | (1 << VisualBasic6Parser.APPACTIVATE) | (1 << VisualBasic6Parser.APPEND) | (1 << VisualBasic6Parser.AS) | (1 << VisualBasic6Parser.BEEP) | (1 << VisualBasic6Parser.BEGIN) | (1 << VisualBasic6Parser.BINARY) | (1 << VisualBasic6Parser.BOOLEAN) | (1 << VisualBasic6Parser.BYVAL) | (1 << VisualBasic6Parser.BYREF) | (1 << VisualBasic6Parser.BYTE) | (1 << VisualBasic6Parser.CALL) | (1 << VisualBasic6Parser.CASE) | (1 << VisualBasic6Parser.CHDIR) | (1 << VisualBasic6Parser.CHDRIVE) | (1 << VisualBasic6Parser.CLASS) | (1 << VisualBasic6Parser.CLOSE) | (1 << VisualBasic6Parser.COLLECTION) | (1 << VisualBasic6Parser.CONST) | (1 << VisualBasic6Parser.DATE) | (1 << VisualBasic6Parser.DECLARE) | (1 << VisualBasic6Parser.DEFBOOL) | (1 << VisualBasic6Parser.DEFBYTE) | (1 << VisualBasic6Parser.DEFDATE) | (1 << VisualBasic6Parser.DEFDBL) | (1 << VisualBasic6Parser.DEFDEC) | (1 << VisualBasic6Parser.DEFCUR) | (1 << VisualBasic6Parser.DEFINT) | (1 << VisualBasic6Parser.DEFLNG) | (1 << VisualBasic6Parser.DEFOBJ) | (1 << VisualBasic6Parser.DEFSNG) | (1 << VisualBasic6Parser.DEFSTR) | (1 << VisualBasic6Parser.DEFVAR) | (1 << VisualBasic6Parser.DELETESETTING) | (1 << VisualBasic6Parser.DIM) | (1 << VisualBasic6Parser.DO) | (1 << VisualBasic6Parser.DOUBLE) | (1 << VisualBasic6Parser.EACH) | (1 << VisualBasic6Parser.ELSE) | (1 << VisualBasic6Parser.ELSEIF) | (1 << VisualBasic6Parser.END) | (1 << VisualBasic6Parser.ENUM) | (1 << VisualBasic6Parser.EQV) | (1 << VisualBasic6Parser.ERASE) | (1 << VisualBasic6Parser.ERROR) | (1 << VisualBasic6Parser.EVENT) | (1 << VisualBasic6Parser.EXIT_DO) | (1 << VisualBasic6Parser.EXIT_FOR) | (1 << VisualBasic6Parser.EXIT_FUNCTION))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualBasic6Parser.EXIT_PROPERTY - 64)) | (1 << (VisualBasic6Parser.EXIT_SUB - 64)) | (1 << (VisualBasic6Parser.FALSE - 64)) | (1 << (VisualBasic6Parser.FILECOPY - 64)) | (1 << (VisualBasic6Parser.FRIEND - 64)) | (1 << (VisualBasic6Parser.FOR - 64)) | (1 << (VisualBasic6Parser.FUNCTION - 64)) | (1 << (VisualBasic6Parser.GET - 64)) | (1 << (VisualBasic6Parser.GLOBAL - 64)) | (1 << (VisualBasic6Parser.GOSUB - 64)) | (1 << (VisualBasic6Parser.GOTO - 64)) | (1 << (VisualBasic6Parser.IF - 64)) | (1 << (VisualBasic6Parser.IMP - 64)) | (1 << (VisualBasic6Parser.IMPLEMENTS - 64)) | (1 << (VisualBasic6Parser.IN - 64)) | (1 << (VisualBasic6Parser.INPUT - 64)) | (1 << (VisualBasic6Parser.IS - 64)) | (1 << (VisualBasic6Parser.INTEGER - 64)) | (1 << (VisualBasic6Parser.KILL - 64)) | (1 << (VisualBasic6Parser.LOAD - 64)) | (1 << (VisualBasic6Parser.LOCK - 64)) | (1 << (VisualBasic6Parser.LONG - 64)) | (1 << (VisualBasic6Parser.LOOP - 64)) | (1 << (VisualBasic6Parser.LEN - 64)) | (1 << (VisualBasic6Parser.LET - 64)) | (1 << (VisualBasic6Parser.LIB - 64)) | (1 << (VisualBasic6Parser.LIKE - 64)) | (1 << (VisualBasic6Parser.LINE_INPUT - 64)) | (1 << (VisualBasic6Parser.LSET - 64)) | (1 << (VisualBasic6Parser.MACRO_IF - 64)) | (1 << (VisualBasic6Parser.ME - 64)) | (1 << (VisualBasic6Parser.MID - 64)) | (1 << (VisualBasic6Parser.MKDIR - 64)) | (1 << (VisualBasic6Parser.MOD - 64)) | (1 << (VisualBasic6Parser.NAME - 64)) | (1 << (VisualBasic6Parser.NEXT - 64)) | (1 << (VisualBasic6Parser.NEW - 64)) | (1 << (VisualBasic6Parser.NOT - 64)) | (1 << (VisualBasic6Parser.NOTHING - 64)) | (1 << (VisualBasic6Parser.NULL - 64)) | (1 << (VisualBasic6Parser.OBJECT - 64)) | (1 << (VisualBasic6Parser.ON - 64)) | (1 << (VisualBasic6Parser.ON_ERROR - 64)) | (1 << (VisualBasic6Parser.ON_LOCAL_ERROR - 64)) | (1 << (VisualBasic6Parser.OPEN - 64)) | (1 << (VisualBasic6Parser.OPTIONAL - 64)) | (1 << (VisualBasic6Parser.OPTION_BASE - 64)) | (1 << (VisualBasic6Parser.OPTION_EXPLICIT - 64)) | (1 << (VisualBasic6Parser.OPTION_COMPARE - 64)) | (1 << (VisualBasic6Parser.OPTION_PRIVATE_MODULE - 64)) | (1 << (VisualBasic6Parser.OR - 64)) | (1 << (VisualBasic6Parser.OUTPUT - 64)) | (1 << (VisualBasic6Parser.PARAMARRAY - 64)) | (1 << (VisualBasic6Parser.PRESERVE - 64)) | (1 << (VisualBasic6Parser.PRINT - 64)) | (1 << (VisualBasic6Parser.PRIVATE - 64)) | (1 << (VisualBasic6Parser.PROPERTY_GET - 64)) | (1 << (VisualBasic6Parser.PROPERTY_LET - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualBasic6Parser.PROPERTY_SET - 128)) | (1 << (VisualBasic6Parser.PUBLIC - 128)) | (1 << (VisualBasic6Parser.PUT - 128)) | (1 << (VisualBasic6Parser.RANDOM - 128)) | (1 << (VisualBasic6Parser.RANDOMIZE - 128)) | (1 << (VisualBasic6Parser.RAISEEVENT - 128)) | (1 << (VisualBasic6Parser.READ - 128)) | (1 << (VisualBasic6Parser.REDIM - 128)) | (1 << (VisualBasic6Parser.REM - 128)) | (1 << (VisualBasic6Parser.RESET - 128)) | (1 << (VisualBasic6Parser.RESUME - 128)) | (1 << (VisualBasic6Parser.RETURN - 128)) | (1 << (VisualBasic6Parser.RMDIR - 128)) | (1 << (VisualBasic6Parser.RSET - 128)) | (1 << (VisualBasic6Parser.SAVEPICTURE - 128)) | (1 << (VisualBasic6Parser.SAVESETTING - 128)) | (1 << (VisualBasic6Parser.SEEK - 128)) | (1 << (VisualBasic6Parser.SELECT - 128)) | (1 << (VisualBasic6Parser.SENDKEYS - 128)) | (1 << (VisualBasic6Parser.SET - 128)) | (1 << (VisualBasic6Parser.SETATTR - 128)) | (1 << (VisualBasic6Parser.SHARED - 128)) | (1 << (VisualBasic6Parser.SINGLE - 128)) | (1 << (VisualBasic6Parser.SPC - 128)) | (1 << (VisualBasic6Parser.STATIC - 128)) | (1 << (VisualBasic6Parser.STEP - 128)) | (1 << (VisualBasic6Parser.STOP - 128)) | (1 << (VisualBasic6Parser.STRING - 128)) | (1 << (VisualBasic6Parser.SUB - 128)) | (1 << (VisualBasic6Parser.TAB - 128)) | (1 << (VisualBasic6Parser.TEXT - 128)) | (1 << (VisualBasic6Parser.THEN - 128)) | (1 << (VisualBasic6Parser.TIME - 128)) | (1 << (VisualBasic6Parser.TO - 128)) | (1 << (VisualBasic6Parser.TRUE - 128)) | (1 << (VisualBasic6Parser.TYPE - 128)) | (1 << (VisualBasic6Parser.TYPEOF - 128)) | (1 << (VisualBasic6Parser.UNLOAD - 128)) | (1 << (VisualBasic6Parser.UNLOCK - 128)) | (1 << (VisualBasic6Parser.UNTIL - 128)) | (1 << (VisualBasic6Parser.VARIANT - 128)) | (1 << (VisualBasic6Parser.VERSION - 128)) | (1 << (VisualBasic6Parser.WEND - 128)) | (1 << (VisualBasic6Parser.WHILE - 128)) | (1 << (VisualBasic6Parser.WIDTH - 128)) | (1 << (VisualBasic6Parser.WITH - 128)) | (1 << (VisualBasic6Parser.WITHEVENTS - 128)) | (1 << (VisualBasic6Parser.WRITE - 128)) | (1 << (VisualBasic6Parser.XOR - 128)) | (1 << (VisualBasic6Parser.DOT - 128)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 128)))) != 0) or ((((_la - 206)) & ~0x3f) == 0 and ((1 << (_la - 206)) & ((1 << (VisualBasic6Parser.L_SQUARE_BRACKET - 206)) | (1 << (VisualBasic6Parser.IDENTIFIER - 206)) | (1 << (VisualBasic6Parser.WS - 206)))) != 0):
                self.state = 1385
                self.moduleBody()
                self.state = 1387 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1386
                    self.match(VisualBasic6Parser.NEWLINE)
                    self.state = 1389 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==VisualBasic6Parser.NEWLINE):
                        break



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MacroElseIfBlockStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MACRO_ELSEIF(self):
            return self.getToken(VisualBasic6Parser.MACRO_ELSEIF, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def ifConditionStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.IfConditionStmtContext,0)


        def THEN(self):
            return self.getToken(VisualBasic6Parser.THEN, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.NEWLINE)
            else:
                return self.getToken(VisualBasic6Parser.NEWLINE, i)

        def moduleBody(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ModuleBodyContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_macroElseIfBlockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroElseIfBlockStmt" ):
                listener.enterMacroElseIfBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroElseIfBlockStmt" ):
                listener.exitMacroElseIfBlockStmt(self)




    def macroElseIfBlockStmt(self):

        localctx = VisualBasic6Parser.MacroElseIfBlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_macroElseIfBlockStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1393
            self.match(VisualBasic6Parser.MACRO_ELSEIF)
            self.state = 1394
            self.match(VisualBasic6Parser.WS)
            self.state = 1395
            self.ifConditionStmt()
            self.state = 1396
            self.match(VisualBasic6Parser.WS)
            self.state = 1397
            self.match(VisualBasic6Parser.THEN)
            self.state = 1399 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1398
                self.match(VisualBasic6Parser.NEWLINE)
                self.state = 1401 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==VisualBasic6Parser.NEWLINE):
                    break

            self.state = 1409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualBasic6Parser.ACCESS) | (1 << VisualBasic6Parser.ADDRESSOF) | (1 << VisualBasic6Parser.ALIAS) | (1 << VisualBasic6Parser.AND) | (1 << VisualBasic6Parser.ATTRIBUTE) | (1 << VisualBasic6Parser.APPACTIVATE) | (1 << VisualBasic6Parser.APPEND) | (1 << VisualBasic6Parser.AS) | (1 << VisualBasic6Parser.BEEP) | (1 << VisualBasic6Parser.BEGIN) | (1 << VisualBasic6Parser.BINARY) | (1 << VisualBasic6Parser.BOOLEAN) | (1 << VisualBasic6Parser.BYVAL) | (1 << VisualBasic6Parser.BYREF) | (1 << VisualBasic6Parser.BYTE) | (1 << VisualBasic6Parser.CALL) | (1 << VisualBasic6Parser.CASE) | (1 << VisualBasic6Parser.CHDIR) | (1 << VisualBasic6Parser.CHDRIVE) | (1 << VisualBasic6Parser.CLASS) | (1 << VisualBasic6Parser.CLOSE) | (1 << VisualBasic6Parser.COLLECTION) | (1 << VisualBasic6Parser.CONST) | (1 << VisualBasic6Parser.DATE) | (1 << VisualBasic6Parser.DECLARE) | (1 << VisualBasic6Parser.DEFBOOL) | (1 << VisualBasic6Parser.DEFBYTE) | (1 << VisualBasic6Parser.DEFDATE) | (1 << VisualBasic6Parser.DEFDBL) | (1 << VisualBasic6Parser.DEFDEC) | (1 << VisualBasic6Parser.DEFCUR) | (1 << VisualBasic6Parser.DEFINT) | (1 << VisualBasic6Parser.DEFLNG) | (1 << VisualBasic6Parser.DEFOBJ) | (1 << VisualBasic6Parser.DEFSNG) | (1 << VisualBasic6Parser.DEFSTR) | (1 << VisualBasic6Parser.DEFVAR) | (1 << VisualBasic6Parser.DELETESETTING) | (1 << VisualBasic6Parser.DIM) | (1 << VisualBasic6Parser.DO) | (1 << VisualBasic6Parser.DOUBLE) | (1 << VisualBasic6Parser.EACH) | (1 << VisualBasic6Parser.ELSE) | (1 << VisualBasic6Parser.ELSEIF) | (1 << VisualBasic6Parser.END) | (1 << VisualBasic6Parser.ENUM) | (1 << VisualBasic6Parser.EQV) | (1 << VisualBasic6Parser.ERASE) | (1 << VisualBasic6Parser.ERROR) | (1 << VisualBasic6Parser.EVENT) | (1 << VisualBasic6Parser.EXIT_DO) | (1 << VisualBasic6Parser.EXIT_FOR) | (1 << VisualBasic6Parser.EXIT_FUNCTION))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualBasic6Parser.EXIT_PROPERTY - 64)) | (1 << (VisualBasic6Parser.EXIT_SUB - 64)) | (1 << (VisualBasic6Parser.FALSE - 64)) | (1 << (VisualBasic6Parser.FILECOPY - 64)) | (1 << (VisualBasic6Parser.FRIEND - 64)) | (1 << (VisualBasic6Parser.FOR - 64)) | (1 << (VisualBasic6Parser.FUNCTION - 64)) | (1 << (VisualBasic6Parser.GET - 64)) | (1 << (VisualBasic6Parser.GLOBAL - 64)) | (1 << (VisualBasic6Parser.GOSUB - 64)) | (1 << (VisualBasic6Parser.GOTO - 64)) | (1 << (VisualBasic6Parser.IF - 64)) | (1 << (VisualBasic6Parser.IMP - 64)) | (1 << (VisualBasic6Parser.IMPLEMENTS - 64)) | (1 << (VisualBasic6Parser.IN - 64)) | (1 << (VisualBasic6Parser.INPUT - 64)) | (1 << (VisualBasic6Parser.IS - 64)) | (1 << (VisualBasic6Parser.INTEGER - 64)) | (1 << (VisualBasic6Parser.KILL - 64)) | (1 << (VisualBasic6Parser.LOAD - 64)) | (1 << (VisualBasic6Parser.LOCK - 64)) | (1 << (VisualBasic6Parser.LONG - 64)) | (1 << (VisualBasic6Parser.LOOP - 64)) | (1 << (VisualBasic6Parser.LEN - 64)) | (1 << (VisualBasic6Parser.LET - 64)) | (1 << (VisualBasic6Parser.LIB - 64)) | (1 << (VisualBasic6Parser.LIKE - 64)) | (1 << (VisualBasic6Parser.LINE_INPUT - 64)) | (1 << (VisualBasic6Parser.LSET - 64)) | (1 << (VisualBasic6Parser.MACRO_IF - 64)) | (1 << (VisualBasic6Parser.ME - 64)) | (1 << (VisualBasic6Parser.MID - 64)) | (1 << (VisualBasic6Parser.MKDIR - 64)) | (1 << (VisualBasic6Parser.MOD - 64)) | (1 << (VisualBasic6Parser.NAME - 64)) | (1 << (VisualBasic6Parser.NEXT - 64)) | (1 << (VisualBasic6Parser.NEW - 64)) | (1 << (VisualBasic6Parser.NOT - 64)) | (1 << (VisualBasic6Parser.NOTHING - 64)) | (1 << (VisualBasic6Parser.NULL - 64)) | (1 << (VisualBasic6Parser.OBJECT - 64)) | (1 << (VisualBasic6Parser.ON - 64)) | (1 << (VisualBasic6Parser.ON_ERROR - 64)) | (1 << (VisualBasic6Parser.ON_LOCAL_ERROR - 64)) | (1 << (VisualBasic6Parser.OPEN - 64)) | (1 << (VisualBasic6Parser.OPTIONAL - 64)) | (1 << (VisualBasic6Parser.OPTION_BASE - 64)) | (1 << (VisualBasic6Parser.OPTION_EXPLICIT - 64)) | (1 << (VisualBasic6Parser.OPTION_COMPARE - 64)) | (1 << (VisualBasic6Parser.OPTION_PRIVATE_MODULE - 64)) | (1 << (VisualBasic6Parser.OR - 64)) | (1 << (VisualBasic6Parser.OUTPUT - 64)) | (1 << (VisualBasic6Parser.PARAMARRAY - 64)) | (1 << (VisualBasic6Parser.PRESERVE - 64)) | (1 << (VisualBasic6Parser.PRINT - 64)) | (1 << (VisualBasic6Parser.PRIVATE - 64)) | (1 << (VisualBasic6Parser.PROPERTY_GET - 64)) | (1 << (VisualBasic6Parser.PROPERTY_LET - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualBasic6Parser.PROPERTY_SET - 128)) | (1 << (VisualBasic6Parser.PUBLIC - 128)) | (1 << (VisualBasic6Parser.PUT - 128)) | (1 << (VisualBasic6Parser.RANDOM - 128)) | (1 << (VisualBasic6Parser.RANDOMIZE - 128)) | (1 << (VisualBasic6Parser.RAISEEVENT - 128)) | (1 << (VisualBasic6Parser.READ - 128)) | (1 << (VisualBasic6Parser.REDIM - 128)) | (1 << (VisualBasic6Parser.REM - 128)) | (1 << (VisualBasic6Parser.RESET - 128)) | (1 << (VisualBasic6Parser.RESUME - 128)) | (1 << (VisualBasic6Parser.RETURN - 128)) | (1 << (VisualBasic6Parser.RMDIR - 128)) | (1 << (VisualBasic6Parser.RSET - 128)) | (1 << (VisualBasic6Parser.SAVEPICTURE - 128)) | (1 << (VisualBasic6Parser.SAVESETTING - 128)) | (1 << (VisualBasic6Parser.SEEK - 128)) | (1 << (VisualBasic6Parser.SELECT - 128)) | (1 << (VisualBasic6Parser.SENDKEYS - 128)) | (1 << (VisualBasic6Parser.SET - 128)) | (1 << (VisualBasic6Parser.SETATTR - 128)) | (1 << (VisualBasic6Parser.SHARED - 128)) | (1 << (VisualBasic6Parser.SINGLE - 128)) | (1 << (VisualBasic6Parser.SPC - 128)) | (1 << (VisualBasic6Parser.STATIC - 128)) | (1 << (VisualBasic6Parser.STEP - 128)) | (1 << (VisualBasic6Parser.STOP - 128)) | (1 << (VisualBasic6Parser.STRING - 128)) | (1 << (VisualBasic6Parser.SUB - 128)) | (1 << (VisualBasic6Parser.TAB - 128)) | (1 << (VisualBasic6Parser.TEXT - 128)) | (1 << (VisualBasic6Parser.THEN - 128)) | (1 << (VisualBasic6Parser.TIME - 128)) | (1 << (VisualBasic6Parser.TO - 128)) | (1 << (VisualBasic6Parser.TRUE - 128)) | (1 << (VisualBasic6Parser.TYPE - 128)) | (1 << (VisualBasic6Parser.TYPEOF - 128)) | (1 << (VisualBasic6Parser.UNLOAD - 128)) | (1 << (VisualBasic6Parser.UNLOCK - 128)) | (1 << (VisualBasic6Parser.UNTIL - 128)) | (1 << (VisualBasic6Parser.VARIANT - 128)) | (1 << (VisualBasic6Parser.VERSION - 128)) | (1 << (VisualBasic6Parser.WEND - 128)) | (1 << (VisualBasic6Parser.WHILE - 128)) | (1 << (VisualBasic6Parser.WIDTH - 128)) | (1 << (VisualBasic6Parser.WITH - 128)) | (1 << (VisualBasic6Parser.WITHEVENTS - 128)) | (1 << (VisualBasic6Parser.WRITE - 128)) | (1 << (VisualBasic6Parser.XOR - 128)) | (1 << (VisualBasic6Parser.DOT - 128)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 128)))) != 0) or ((((_la - 206)) & ~0x3f) == 0 and ((1 << (_la - 206)) & ((1 << (VisualBasic6Parser.L_SQUARE_BRACKET - 206)) | (1 << (VisualBasic6Parser.IDENTIFIER - 206)) | (1 << (VisualBasic6Parser.WS - 206)))) != 0):
                self.state = 1403
                self.moduleBody()
                self.state = 1405 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1404
                    self.match(VisualBasic6Parser.NEWLINE)
                    self.state = 1407 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==VisualBasic6Parser.NEWLINE):
                        break



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MacroElseBlockStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MACRO_ELSE(self):
            return self.getToken(VisualBasic6Parser.MACRO_ELSE, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.NEWLINE)
            else:
                return self.getToken(VisualBasic6Parser.NEWLINE, i)

        def moduleBody(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ModuleBodyContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_macroElseBlockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroElseBlockStmt" ):
                listener.enterMacroElseBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroElseBlockStmt" ):
                listener.exitMacroElseBlockStmt(self)




    def macroElseBlockStmt(self):

        localctx = VisualBasic6Parser.MacroElseBlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_macroElseBlockStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1411
            self.match(VisualBasic6Parser.MACRO_ELSE)
            self.state = 1413 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1412
                self.match(VisualBasic6Parser.NEWLINE)
                self.state = 1415 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==VisualBasic6Parser.NEWLINE):
                    break

            self.state = 1423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualBasic6Parser.ACCESS) | (1 << VisualBasic6Parser.ADDRESSOF) | (1 << VisualBasic6Parser.ALIAS) | (1 << VisualBasic6Parser.AND) | (1 << VisualBasic6Parser.ATTRIBUTE) | (1 << VisualBasic6Parser.APPACTIVATE) | (1 << VisualBasic6Parser.APPEND) | (1 << VisualBasic6Parser.AS) | (1 << VisualBasic6Parser.BEEP) | (1 << VisualBasic6Parser.BEGIN) | (1 << VisualBasic6Parser.BINARY) | (1 << VisualBasic6Parser.BOOLEAN) | (1 << VisualBasic6Parser.BYVAL) | (1 << VisualBasic6Parser.BYREF) | (1 << VisualBasic6Parser.BYTE) | (1 << VisualBasic6Parser.CALL) | (1 << VisualBasic6Parser.CASE) | (1 << VisualBasic6Parser.CHDIR) | (1 << VisualBasic6Parser.CHDRIVE) | (1 << VisualBasic6Parser.CLASS) | (1 << VisualBasic6Parser.CLOSE) | (1 << VisualBasic6Parser.COLLECTION) | (1 << VisualBasic6Parser.CONST) | (1 << VisualBasic6Parser.DATE) | (1 << VisualBasic6Parser.DECLARE) | (1 << VisualBasic6Parser.DEFBOOL) | (1 << VisualBasic6Parser.DEFBYTE) | (1 << VisualBasic6Parser.DEFDATE) | (1 << VisualBasic6Parser.DEFDBL) | (1 << VisualBasic6Parser.DEFDEC) | (1 << VisualBasic6Parser.DEFCUR) | (1 << VisualBasic6Parser.DEFINT) | (1 << VisualBasic6Parser.DEFLNG) | (1 << VisualBasic6Parser.DEFOBJ) | (1 << VisualBasic6Parser.DEFSNG) | (1 << VisualBasic6Parser.DEFSTR) | (1 << VisualBasic6Parser.DEFVAR) | (1 << VisualBasic6Parser.DELETESETTING) | (1 << VisualBasic6Parser.DIM) | (1 << VisualBasic6Parser.DO) | (1 << VisualBasic6Parser.DOUBLE) | (1 << VisualBasic6Parser.EACH) | (1 << VisualBasic6Parser.ELSE) | (1 << VisualBasic6Parser.ELSEIF) | (1 << VisualBasic6Parser.END) | (1 << VisualBasic6Parser.ENUM) | (1 << VisualBasic6Parser.EQV) | (1 << VisualBasic6Parser.ERASE) | (1 << VisualBasic6Parser.ERROR) | (1 << VisualBasic6Parser.EVENT) | (1 << VisualBasic6Parser.EXIT_DO) | (1 << VisualBasic6Parser.EXIT_FOR) | (1 << VisualBasic6Parser.EXIT_FUNCTION))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualBasic6Parser.EXIT_PROPERTY - 64)) | (1 << (VisualBasic6Parser.EXIT_SUB - 64)) | (1 << (VisualBasic6Parser.FALSE - 64)) | (1 << (VisualBasic6Parser.FILECOPY - 64)) | (1 << (VisualBasic6Parser.FRIEND - 64)) | (1 << (VisualBasic6Parser.FOR - 64)) | (1 << (VisualBasic6Parser.FUNCTION - 64)) | (1 << (VisualBasic6Parser.GET - 64)) | (1 << (VisualBasic6Parser.GLOBAL - 64)) | (1 << (VisualBasic6Parser.GOSUB - 64)) | (1 << (VisualBasic6Parser.GOTO - 64)) | (1 << (VisualBasic6Parser.IF - 64)) | (1 << (VisualBasic6Parser.IMP - 64)) | (1 << (VisualBasic6Parser.IMPLEMENTS - 64)) | (1 << (VisualBasic6Parser.IN - 64)) | (1 << (VisualBasic6Parser.INPUT - 64)) | (1 << (VisualBasic6Parser.IS - 64)) | (1 << (VisualBasic6Parser.INTEGER - 64)) | (1 << (VisualBasic6Parser.KILL - 64)) | (1 << (VisualBasic6Parser.LOAD - 64)) | (1 << (VisualBasic6Parser.LOCK - 64)) | (1 << (VisualBasic6Parser.LONG - 64)) | (1 << (VisualBasic6Parser.LOOP - 64)) | (1 << (VisualBasic6Parser.LEN - 64)) | (1 << (VisualBasic6Parser.LET - 64)) | (1 << (VisualBasic6Parser.LIB - 64)) | (1 << (VisualBasic6Parser.LIKE - 64)) | (1 << (VisualBasic6Parser.LINE_INPUT - 64)) | (1 << (VisualBasic6Parser.LSET - 64)) | (1 << (VisualBasic6Parser.MACRO_IF - 64)) | (1 << (VisualBasic6Parser.ME - 64)) | (1 << (VisualBasic6Parser.MID - 64)) | (1 << (VisualBasic6Parser.MKDIR - 64)) | (1 << (VisualBasic6Parser.MOD - 64)) | (1 << (VisualBasic6Parser.NAME - 64)) | (1 << (VisualBasic6Parser.NEXT - 64)) | (1 << (VisualBasic6Parser.NEW - 64)) | (1 << (VisualBasic6Parser.NOT - 64)) | (1 << (VisualBasic6Parser.NOTHING - 64)) | (1 << (VisualBasic6Parser.NULL - 64)) | (1 << (VisualBasic6Parser.OBJECT - 64)) | (1 << (VisualBasic6Parser.ON - 64)) | (1 << (VisualBasic6Parser.ON_ERROR - 64)) | (1 << (VisualBasic6Parser.ON_LOCAL_ERROR - 64)) | (1 << (VisualBasic6Parser.OPEN - 64)) | (1 << (VisualBasic6Parser.OPTIONAL - 64)) | (1 << (VisualBasic6Parser.OPTION_BASE - 64)) | (1 << (VisualBasic6Parser.OPTION_EXPLICIT - 64)) | (1 << (VisualBasic6Parser.OPTION_COMPARE - 64)) | (1 << (VisualBasic6Parser.OPTION_PRIVATE_MODULE - 64)) | (1 << (VisualBasic6Parser.OR - 64)) | (1 << (VisualBasic6Parser.OUTPUT - 64)) | (1 << (VisualBasic6Parser.PARAMARRAY - 64)) | (1 << (VisualBasic6Parser.PRESERVE - 64)) | (1 << (VisualBasic6Parser.PRINT - 64)) | (1 << (VisualBasic6Parser.PRIVATE - 64)) | (1 << (VisualBasic6Parser.PROPERTY_GET - 64)) | (1 << (VisualBasic6Parser.PROPERTY_LET - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VisualBasic6Parser.PROPERTY_SET - 128)) | (1 << (VisualBasic6Parser.PUBLIC - 128)) | (1 << (VisualBasic6Parser.PUT - 128)) | (1 << (VisualBasic6Parser.RANDOM - 128)) | (1 << (VisualBasic6Parser.RANDOMIZE - 128)) | (1 << (VisualBasic6Parser.RAISEEVENT - 128)) | (1 << (VisualBasic6Parser.READ - 128)) | (1 << (VisualBasic6Parser.REDIM - 128)) | (1 << (VisualBasic6Parser.REM - 128)) | (1 << (VisualBasic6Parser.RESET - 128)) | (1 << (VisualBasic6Parser.RESUME - 128)) | (1 << (VisualBasic6Parser.RETURN - 128)) | (1 << (VisualBasic6Parser.RMDIR - 128)) | (1 << (VisualBasic6Parser.RSET - 128)) | (1 << (VisualBasic6Parser.SAVEPICTURE - 128)) | (1 << (VisualBasic6Parser.SAVESETTING - 128)) | (1 << (VisualBasic6Parser.SEEK - 128)) | (1 << (VisualBasic6Parser.SELECT - 128)) | (1 << (VisualBasic6Parser.SENDKEYS - 128)) | (1 << (VisualBasic6Parser.SET - 128)) | (1 << (VisualBasic6Parser.SETATTR - 128)) | (1 << (VisualBasic6Parser.SHARED - 128)) | (1 << (VisualBasic6Parser.SINGLE - 128)) | (1 << (VisualBasic6Parser.SPC - 128)) | (1 << (VisualBasic6Parser.STATIC - 128)) | (1 << (VisualBasic6Parser.STEP - 128)) | (1 << (VisualBasic6Parser.STOP - 128)) | (1 << (VisualBasic6Parser.STRING - 128)) | (1 << (VisualBasic6Parser.SUB - 128)) | (1 << (VisualBasic6Parser.TAB - 128)) | (1 << (VisualBasic6Parser.TEXT - 128)) | (1 << (VisualBasic6Parser.THEN - 128)) | (1 << (VisualBasic6Parser.TIME - 128)) | (1 << (VisualBasic6Parser.TO - 128)) | (1 << (VisualBasic6Parser.TRUE - 128)) | (1 << (VisualBasic6Parser.TYPE - 128)) | (1 << (VisualBasic6Parser.TYPEOF - 128)) | (1 << (VisualBasic6Parser.UNLOAD - 128)) | (1 << (VisualBasic6Parser.UNLOCK - 128)) | (1 << (VisualBasic6Parser.UNTIL - 128)) | (1 << (VisualBasic6Parser.VARIANT - 128)) | (1 << (VisualBasic6Parser.VERSION - 128)) | (1 << (VisualBasic6Parser.WEND - 128)) | (1 << (VisualBasic6Parser.WHILE - 128)) | (1 << (VisualBasic6Parser.WIDTH - 128)) | (1 << (VisualBasic6Parser.WITH - 128)) | (1 << (VisualBasic6Parser.WITHEVENTS - 128)) | (1 << (VisualBasic6Parser.WRITE - 128)) | (1 << (VisualBasic6Parser.XOR - 128)) | (1 << (VisualBasic6Parser.DOT - 128)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 128)))) != 0) or ((((_la - 206)) & ~0x3f) == 0 and ((1 << (_la - 206)) & ((1 << (VisualBasic6Parser.L_SQUARE_BRACKET - 206)) | (1 << (VisualBasic6Parser.IDENTIFIER - 206)) | (1 << (VisualBasic6Parser.WS - 206)))) != 0):
                self.state = 1417
                self.moduleBody()
                self.state = 1419 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1418
                    self.match(VisualBasic6Parser.NEWLINE)
                    self.state = 1421 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==VisualBasic6Parser.NEWLINE):
                        break



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MidStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MID(self):
            return self.getToken(VisualBasic6Parser.MID, 0)

        def LPAREN(self):
            return self.getToken(VisualBasic6Parser.LPAREN, 0)

        def argsCall(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ArgsCallContext,0)


        def RPAREN(self):
            return self.getToken(VisualBasic6Parser.RPAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_midStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMidStmt" ):
                listener.enterMidStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMidStmt" ):
                listener.exitMidStmt(self)




    def midStmt(self):

        localctx = VisualBasic6Parser.MidStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_midStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1425
            self.match(VisualBasic6Parser.MID)
            self.state = 1427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 1426
                self.match(VisualBasic6Parser.WS)


            self.state = 1429
            self.match(VisualBasic6Parser.LPAREN)
            self.state = 1431
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
            if la_ == 1:
                self.state = 1430
                self.match(VisualBasic6Parser.WS)


            self.state = 1433
            self.argsCall()
            self.state = 1435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 1434
                self.match(VisualBasic6Parser.WS)


            self.state = 1437
            self.match(VisualBasic6Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MkdirStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MKDIR(self):
            return self.getToken(VisualBasic6Parser.MKDIR, 0)

        def WS(self):
            return self.getToken(VisualBasic6Parser.WS, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_mkdirStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMkdirStmt" ):
                listener.enterMkdirStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMkdirStmt" ):
                listener.exitMkdirStmt(self)




    def mkdirStmt(self):

        localctx = VisualBasic6Parser.MkdirStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_mkdirStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1439
            self.match(VisualBasic6Parser.MKDIR)
            self.state = 1440
            self.match(VisualBasic6Parser.WS)
            self.state = 1441
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NameStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(VisualBasic6Parser.NAME, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,i)


        def AS(self):
            return self.getToken(VisualBasic6Parser.AS, 0)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_nameStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameStmt" ):
                listener.enterNameStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameStmt" ):
                listener.exitNameStmt(self)




    def nameStmt(self):

        localctx = VisualBasic6Parser.NameStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_nameStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1443
            self.match(VisualBasic6Parser.NAME)
            self.state = 1444
            self.match(VisualBasic6Parser.WS)
            self.state = 1445
            self.valueStmt(0)
            self.state = 1446
            self.match(VisualBasic6Parser.WS)
            self.state = 1447
            self.match(VisualBasic6Parser.AS)
            self.state = 1448
            self.match(VisualBasic6Parser.WS)
            self.state = 1449
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OnErrorStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def ON_ERROR(self):
            return self.getToken(VisualBasic6Parser.ON_ERROR, 0)

        def ON_LOCAL_ERROR(self):
            return self.getToken(VisualBasic6Parser.ON_LOCAL_ERROR, 0)

        def GOTO(self):
            return self.getToken(VisualBasic6Parser.GOTO, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,0)


        def RESUME(self):
            return self.getToken(VisualBasic6Parser.RESUME, 0)

        def NEXT(self):
            return self.getToken(VisualBasic6Parser.NEXT, 0)

        def COLON(self):
            return self.getToken(VisualBasic6Parser.COLON, 0)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_onErrorStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnErrorStmt" ):
                listener.enterOnErrorStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnErrorStmt" ):
                listener.exitOnErrorStmt(self)




    def onErrorStmt(self):

        localctx = VisualBasic6Parser.OnErrorStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_onErrorStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1451
            _la = self._input.LA(1)
            if not(_la==VisualBasic6Parser.ON_ERROR or _la==VisualBasic6Parser.ON_LOCAL_ERROR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1452
            self.match(VisualBasic6Parser.WS)
            self.state = 1462
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualBasic6Parser.GOTO]:
                self.state = 1453
                self.match(VisualBasic6Parser.GOTO)
                self.state = 1454
                self.match(VisualBasic6Parser.WS)
                self.state = 1455
                self.valueStmt(0)
                self.state = 1457
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualBasic6Parser.COLON:
                    self.state = 1456
                    self.match(VisualBasic6Parser.COLON)


                pass
            elif token in [VisualBasic6Parser.RESUME]:
                self.state = 1459
                self.match(VisualBasic6Parser.RESUME)
                self.state = 1460
                self.match(VisualBasic6Parser.WS)
                self.state = 1461
                self.match(VisualBasic6Parser.NEXT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OnGoToStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(VisualBasic6Parser.ON, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,i)


        def GOTO(self):
            return self.getToken(VisualBasic6Parser.GOTO, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.COMMA)
            else:
                return self.getToken(VisualBasic6Parser.COMMA, i)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_onGoToStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnGoToStmt" ):
                listener.enterOnGoToStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnGoToStmt" ):
                listener.exitOnGoToStmt(self)




    def onGoToStmt(self):

        localctx = VisualBasic6Parser.OnGoToStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_onGoToStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1464
            self.match(VisualBasic6Parser.ON)
            self.state = 1465
            self.match(VisualBasic6Parser.WS)
            self.state = 1466
            self.valueStmt(0)
            self.state = 1467
            self.match(VisualBasic6Parser.WS)
            self.state = 1468
            self.match(VisualBasic6Parser.GOTO)
            self.state = 1469
            self.match(VisualBasic6Parser.WS)
            self.state = 1470
            self.valueStmt(0)
            self.state = 1481
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,200,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1472
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualBasic6Parser.WS:
                        self.state = 1471
                        self.match(VisualBasic6Parser.WS)


                    self.state = 1474
                    self.match(VisualBasic6Parser.COMMA)
                    self.state = 1476
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
                    if la_ == 1:
                        self.state = 1475
                        self.match(VisualBasic6Parser.WS)


                    self.state = 1478
                    self.valueStmt(0) 
                self.state = 1483
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,200,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OnGoSubStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(VisualBasic6Parser.ON, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,i)


        def GOSUB(self):
            return self.getToken(VisualBasic6Parser.GOSUB, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.COMMA)
            else:
                return self.getToken(VisualBasic6Parser.COMMA, i)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_onGoSubStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnGoSubStmt" ):
                listener.enterOnGoSubStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnGoSubStmt" ):
                listener.exitOnGoSubStmt(self)




    def onGoSubStmt(self):

        localctx = VisualBasic6Parser.OnGoSubStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_onGoSubStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1484
            self.match(VisualBasic6Parser.ON)
            self.state = 1485
            self.match(VisualBasic6Parser.WS)
            self.state = 1486
            self.valueStmt(0)
            self.state = 1487
            self.match(VisualBasic6Parser.WS)
            self.state = 1488
            self.match(VisualBasic6Parser.GOSUB)
            self.state = 1489
            self.match(VisualBasic6Parser.WS)
            self.state = 1490
            self.valueStmt(0)
            self.state = 1501
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,203,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1492
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualBasic6Parser.WS:
                        self.state = 1491
                        self.match(VisualBasic6Parser.WS)


                    self.state = 1494
                    self.match(VisualBasic6Parser.COMMA)
                    self.state = 1496
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
                    if la_ == 1:
                        self.state = 1495
                        self.match(VisualBasic6Parser.WS)


                    self.state = 1498
                    self.valueStmt(0) 
                self.state = 1503
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,203,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OpenStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN(self):
            return self.getToken(VisualBasic6Parser.OPEN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,i)


        def FOR(self):
            return self.getToken(VisualBasic6Parser.FOR, 0)

        def AS(self):
            return self.getToken(VisualBasic6Parser.AS, 0)

        def APPEND(self):
            return self.getToken(VisualBasic6Parser.APPEND, 0)

        def BINARY(self):
            return self.getToken(VisualBasic6Parser.BINARY, 0)

        def INPUT(self):
            return self.getToken(VisualBasic6Parser.INPUT, 0)

        def OUTPUT(self):
            return self.getToken(VisualBasic6Parser.OUTPUT, 0)

        def RANDOM(self):
            return self.getToken(VisualBasic6Parser.RANDOM, 0)

        def ACCESS(self):
            return self.getToken(VisualBasic6Parser.ACCESS, 0)

        def LEN(self):
            return self.getToken(VisualBasic6Parser.LEN, 0)

        def EQ(self):
            return self.getToken(VisualBasic6Parser.EQ, 0)

        def READ(self):
            return self.getToken(VisualBasic6Parser.READ, 0)

        def WRITE(self):
            return self.getToken(VisualBasic6Parser.WRITE, 0)

        def READ_WRITE(self):
            return self.getToken(VisualBasic6Parser.READ_WRITE, 0)

        def SHARED(self):
            return self.getToken(VisualBasic6Parser.SHARED, 0)

        def LOCK_READ(self):
            return self.getToken(VisualBasic6Parser.LOCK_READ, 0)

        def LOCK_WRITE(self):
            return self.getToken(VisualBasic6Parser.LOCK_WRITE, 0)

        def LOCK_READ_WRITE(self):
            return self.getToken(VisualBasic6Parser.LOCK_READ_WRITE, 0)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_openStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpenStmt" ):
                listener.enterOpenStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpenStmt" ):
                listener.exitOpenStmt(self)




    def openStmt(self):

        localctx = VisualBasic6Parser.OpenStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_openStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1504
            self.match(VisualBasic6Parser.OPEN)
            self.state = 1505
            self.match(VisualBasic6Parser.WS)
            self.state = 1506
            self.valueStmt(0)
            self.state = 1507
            self.match(VisualBasic6Parser.WS)
            self.state = 1508
            self.match(VisualBasic6Parser.FOR)
            self.state = 1509
            self.match(VisualBasic6Parser.WS)
            self.state = 1510
            _la = self._input.LA(1)
            if not(_la==VisualBasic6Parser.APPEND or _la==VisualBasic6Parser.BINARY or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & ((1 << (VisualBasic6Parser.INPUT - 79)) | (1 << (VisualBasic6Parser.OUTPUT - 79)) | (1 << (VisualBasic6Parser.RANDOM - 79)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1515
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
            if la_ == 1:
                self.state = 1511
                self.match(VisualBasic6Parser.WS)
                self.state = 1512
                self.match(VisualBasic6Parser.ACCESS)
                self.state = 1513
                self.match(VisualBasic6Parser.WS)
                self.state = 1514
                _la = self._input.LA(1)
                if not(((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (VisualBasic6Parser.READ - 134)) | (1 << (VisualBasic6Parser.READ_WRITE - 134)) | (1 << (VisualBasic6Parser.WRITE - 134)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1519
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
            if la_ == 1:
                self.state = 1517
                self.match(VisualBasic6Parser.WS)
                self.state = 1518
                _la = self._input.LA(1)
                if not(((((_la - 92)) & ~0x3f) == 0 and ((1 << (_la - 92)) & ((1 << (VisualBasic6Parser.LOCK_READ - 92)) | (1 << (VisualBasic6Parser.LOCK_WRITE - 92)) | (1 << (VisualBasic6Parser.LOCK_READ_WRITE - 92)) | (1 << (VisualBasic6Parser.SHARED - 92)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1521
            self.match(VisualBasic6Parser.WS)
            self.state = 1522
            self.match(VisualBasic6Parser.AS)
            self.state = 1523
            self.match(VisualBasic6Parser.WS)
            self.state = 1524
            self.valueStmt(0)
            self.state = 1535
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
            if la_ == 1:
                self.state = 1525
                self.match(VisualBasic6Parser.WS)
                self.state = 1526
                self.match(VisualBasic6Parser.LEN)
                self.state = 1528
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualBasic6Parser.WS:
                    self.state = 1527
                    self.match(VisualBasic6Parser.WS)


                self.state = 1530
                self.match(VisualBasic6Parser.EQ)
                self.state = 1532
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
                if la_ == 1:
                    self.state = 1531
                    self.match(VisualBasic6Parser.WS)


                self.state = 1534
                self.valueStmt(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OutputListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def outputList_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.OutputList_ExpressionContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.OutputList_ExpressionContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.SEMICOLON)
            else:
                return self.getToken(VisualBasic6Parser.SEMICOLON, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.COMMA)
            else:
                return self.getToken(VisualBasic6Parser.COMMA, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_outputList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutputList" ):
                listener.enterOutputList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutputList" ):
                listener.exitOutputList(self)




    def outputList(self):

        localctx = VisualBasic6Parser.OutputListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_outputList)
        self._la = 0 # Token type
        try:
            self.state = 1570
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1537
                self.outputList_Expression()
                self.state = 1550
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,212,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1539
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualBasic6Parser.WS:
                            self.state = 1538
                            self.match(VisualBasic6Parser.WS)


                        self.state = 1541
                        _la = self._input.LA(1)
                        if not(_la==VisualBasic6Parser.COMMA or _la==VisualBasic6Parser.SEMICOLON):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1543
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
                        if la_ == 1:
                            self.state = 1542
                            self.match(VisualBasic6Parser.WS)


                        self.state = 1546
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
                        if la_ == 1:
                            self.state = 1545
                            self.outputList_Expression()

                 
                    self.state = 1552
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,212,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1554
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
                if la_ == 1:
                    self.state = 1553
                    self.outputList_Expression()


                self.state = 1566 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1557
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualBasic6Parser.WS:
                            self.state = 1556
                            self.match(VisualBasic6Parser.WS)


                        self.state = 1559
                        _la = self._input.LA(1)
                        if not(_la==VisualBasic6Parser.COMMA or _la==VisualBasic6Parser.SEMICOLON):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1561
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
                        if la_ == 1:
                            self.state = 1560
                            self.match(VisualBasic6Parser.WS)


                        self.state = 1564
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
                        if la_ == 1:
                            self.state = 1563
                            self.outputList_Expression()



                    else:
                        raise NoViableAltException(self)
                    self.state = 1568 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,217,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OutputList_ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPC(self):
            return self.getToken(VisualBasic6Parser.SPC, 0)

        def TAB(self):
            return self.getToken(VisualBasic6Parser.TAB, 0)

        def LPAREN(self):
            return self.getToken(VisualBasic6Parser.LPAREN, 0)

        def argsCall(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ArgsCallContext,0)


        def RPAREN(self):
            return self.getToken(VisualBasic6Parser.RPAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def valueStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_outputList_Expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutputList_Expression" ):
                listener.enterOutputList_Expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutputList_Expression" ):
                listener.exitOutputList_Expression(self)




    def outputList_Expression(self):

        localctx = VisualBasic6Parser.OutputList_ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_outputList_Expression)
        self._la = 0 # Token type
        try:
            self.state = 1589
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1572
                _la = self._input.LA(1)
                if not(_la==VisualBasic6Parser.SPC or _la==VisualBasic6Parser.TAB):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1586
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
                if la_ == 1:
                    self.state = 1574
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualBasic6Parser.WS:
                        self.state = 1573
                        self.match(VisualBasic6Parser.WS)


                    self.state = 1576
                    self.match(VisualBasic6Parser.LPAREN)
                    self.state = 1578
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
                    if la_ == 1:
                        self.state = 1577
                        self.match(VisualBasic6Parser.WS)


                    self.state = 1580
                    self.argsCall()
                    self.state = 1582
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualBasic6Parser.WS:
                        self.state = 1581
                        self.match(VisualBasic6Parser.WS)


                    self.state = 1584
                    self.match(VisualBasic6Parser.RPAREN)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1588
                self.valueStmt(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrintStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRINT(self):
            return self.getToken(VisualBasic6Parser.PRINT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def valueStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,0)


        def COMMA(self):
            return self.getToken(VisualBasic6Parser.COMMA, 0)

        def outputList(self):
            return self.getTypedRuleContext(VisualBasic6Parser.OutputListContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_printStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrintStmt" ):
                listener.enterPrintStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrintStmt" ):
                listener.exitPrintStmt(self)




    def printStmt(self):

        localctx = VisualBasic6Parser.PrintStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_printStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1591
            self.match(VisualBasic6Parser.PRINT)
            self.state = 1592
            self.match(VisualBasic6Parser.WS)
            self.state = 1593
            self.valueStmt(0)
            self.state = 1595
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 1594
                self.match(VisualBasic6Parser.WS)


            self.state = 1597
            self.match(VisualBasic6Parser.COMMA)
            self.state = 1602
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
            if la_ == 1:
                self.state = 1599
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
                if la_ == 1:
                    self.state = 1598
                    self.match(VisualBasic6Parser.WS)


                self.state = 1601
                self.outputList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PropertyGetStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROPERTY_GET(self):
            return self.getToken(VisualBasic6Parser.PROPERTY_GET, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(VisualBasic6Parser.AmbiguousIdentifierContext,0)


        def END_PROPERTY(self):
            return self.getToken(VisualBasic6Parser.END_PROPERTY, 0)

        def visibility(self):
            return self.getTypedRuleContext(VisualBasic6Parser.VisibilityContext,0)


        def STATIC(self):
            return self.getToken(VisualBasic6Parser.STATIC, 0)

        def typeHint(self):
            return self.getTypedRuleContext(VisualBasic6Parser.TypeHintContext,0)


        def argList(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ArgListContext,0)


        def asTypeClause(self):
            return self.getTypedRuleContext(VisualBasic6Parser.AsTypeClauseContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.NEWLINE)
            else:
                return self.getToken(VisualBasic6Parser.NEWLINE, i)

        def block(self):
            return self.getTypedRuleContext(VisualBasic6Parser.BlockContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_propertyGetStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyGetStmt" ):
                listener.enterPropertyGetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyGetStmt" ):
                listener.exitPropertyGetStmt(self)




    def propertyGetStmt(self):

        localctx = VisualBasic6Parser.PropertyGetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_propertyGetStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1607
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (VisualBasic6Parser.FRIEND - 68)) | (1 << (VisualBasic6Parser.GLOBAL - 68)) | (1 << (VisualBasic6Parser.PRIVATE - 68)) | (1 << (VisualBasic6Parser.PUBLIC - 68)))) != 0):
                self.state = 1604
                self.visibility()
                self.state = 1605
                self.match(VisualBasic6Parser.WS)


            self.state = 1611
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.STATIC:
                self.state = 1609
                self.match(VisualBasic6Parser.STATIC)
                self.state = 1610
                self.match(VisualBasic6Parser.WS)


            self.state = 1613
            self.match(VisualBasic6Parser.PROPERTY_GET)
            self.state = 1614
            self.match(VisualBasic6Parser.WS)
            self.state = 1615
            self.ambiguousIdentifier()
            self.state = 1617
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & ((1 << (VisualBasic6Parser.AMPERSAND - 178)) | (1 << (VisualBasic6Parser.AT - 178)) | (1 << (VisualBasic6Parser.DOLLAR - 178)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 178)) | (1 << (VisualBasic6Parser.HASH - 178)) | (1 << (VisualBasic6Parser.PERCENT - 178)))) != 0):
                self.state = 1616
                self.typeHint()


            self.state = 1623
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
            if la_ == 1:
                self.state = 1620
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualBasic6Parser.WS:
                    self.state = 1619
                    self.match(VisualBasic6Parser.WS)


                self.state = 1622
                self.argList()


            self.state = 1627
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 1625
                self.match(VisualBasic6Parser.WS)
                self.state = 1626
                self.asTypeClause()


            self.state = 1630 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1629
                self.match(VisualBasic6Parser.NEWLINE)
                self.state = 1632 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==VisualBasic6Parser.NEWLINE):
                    break

            self.state = 1640
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualBasic6Parser.ACCESS) | (1 << VisualBasic6Parser.ADDRESSOF) | (1 << VisualBasic6Parser.ALIAS) | (1 << VisualBasic6Parser.AND) | (1 << VisualBasic6Parser.ATTRIBUTE) | (1 << VisualBasic6Parser.APPACTIVATE) | (1 << VisualBasic6Parser.APPEND) | (1 << VisualBasic6Parser.AS) | (1 << VisualBasic6Parser.BEEP) | (1 << VisualBasic6Parser.BEGIN) | (1 << VisualBasic6Parser.BINARY) | (1 << VisualBasic6Parser.BOOLEAN) | (1 << VisualBasic6Parser.BYVAL) | (1 << VisualBasic6Parser.BYREF) | (1 << VisualBasic6Parser.BYTE) | (1 << VisualBasic6Parser.CALL) | (1 << VisualBasic6Parser.CASE) | (1 << VisualBasic6Parser.CHDIR) | (1 << VisualBasic6Parser.CHDRIVE) | (1 << VisualBasic6Parser.CLASS) | (1 << VisualBasic6Parser.CLOSE) | (1 << VisualBasic6Parser.COLLECTION) | (1 << VisualBasic6Parser.CONST) | (1 << VisualBasic6Parser.DATE) | (1 << VisualBasic6Parser.DECLARE) | (1 << VisualBasic6Parser.DEFBOOL) | (1 << VisualBasic6Parser.DEFBYTE) | (1 << VisualBasic6Parser.DEFDATE) | (1 << VisualBasic6Parser.DEFDBL) | (1 << VisualBasic6Parser.DEFDEC) | (1 << VisualBasic6Parser.DEFCUR) | (1 << VisualBasic6Parser.DEFINT) | (1 << VisualBasic6Parser.DEFLNG) | (1 << VisualBasic6Parser.DEFOBJ) | (1 << VisualBasic6Parser.DEFSNG) | (1 << VisualBasic6Parser.DEFSTR) | (1 << VisualBasic6Parser.DEFVAR) | (1 << VisualBasic6Parser.DELETESETTING) | (1 << VisualBasic6Parser.DIM) | (1 << VisualBasic6Parser.DO) | (1 << VisualBasic6Parser.DOUBLE) | (1 << VisualBasic6Parser.EACH) | (1 << VisualBasic6Parser.ELSE) | (1 << VisualBasic6Parser.ELSEIF) | (1 << VisualBasic6Parser.END) | (1 << VisualBasic6Parser.ENUM) | (1 << VisualBasic6Parser.EQV) | (1 << VisualBasic6Parser.ERASE) | (1 << VisualBasic6Parser.ERROR) | (1 << VisualBasic6Parser.EVENT) | (1 << VisualBasic6Parser.EXIT_DO) | (1 << VisualBasic6Parser.EXIT_FOR) | (1 << VisualBasic6Parser.EXIT_FUNCTION))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualBasic6Parser.EXIT_PROPERTY - 64)) | (1 << (VisualBasic6Parser.EXIT_SUB - 64)) | (1 << (VisualBasic6Parser.FALSE - 64)) | (1 << (VisualBasic6Parser.FILECOPY - 64)) | (1 << (VisualBasic6Parser.FRIEND - 64)) | (1 << (VisualBasic6Parser.FOR - 64)) | (1 << (VisualBasic6Parser.FUNCTION - 64)) | (1 << (VisualBasic6Parser.GET - 64)) | (1 << (VisualBasic6Parser.GLOBAL - 64)) | (1 << (VisualBasic6Parser.GOSUB - 64)) | (1 << (VisualBasic6Parser.GOTO - 64)) | (1 << (VisualBasic6Parser.IF - 64)) | (1 << (VisualBasic6Parser.IMP - 64)) | (1 << (VisualBasic6Parser.IMPLEMENTS - 64)) | (1 << (VisualBasic6Parser.IN - 64)) | (1 << (VisualBasic6Parser.INPUT - 64)) | (1 << (VisualBasic6Parser.IS - 64)) | (1 << (VisualBasic6Parser.INTEGER - 64)) | (1 << (VisualBasic6Parser.KILL - 64)) | (1 << (VisualBasic6Parser.LOAD - 64)) | (1 << (VisualBasic6Parser.LOCK - 64)) | (1 << (VisualBasic6Parser.LONG - 64)) | (1 << (VisualBasic6Parser.LOOP - 64)) | (1 << (VisualBasic6Parser.LEN - 64)) | (1 << (VisualBasic6Parser.LET - 64)) | (1 << (VisualBasic6Parser.LIB - 64)) | (1 << (VisualBasic6Parser.LIKE - 64)) | (1 << (VisualBasic6Parser.LINE_INPUT - 64)) | (1 << (VisualBasic6Parser.LSET - 64)) | (1 << (VisualBasic6Parser.MACRO_IF - 64)) | (1 << (VisualBasic6Parser.ME - 64)) | (1 << (VisualBasic6Parser.MID - 64)) | (1 << (VisualBasic6Parser.MKDIR - 64)) | (1 << (VisualBasic6Parser.MOD - 64)) | (1 << (VisualBasic6Parser.NAME - 64)) | (1 << (VisualBasic6Parser.NEXT - 64)) | (1 << (VisualBasic6Parser.NEW - 64)) | (1 << (VisualBasic6Parser.NOT - 64)) | (1 << (VisualBasic6Parser.NOTHING - 64)) | (1 << (VisualBasic6Parser.NULL - 64)) | (1 << (VisualBasic6Parser.OBJECT - 64)) | (1 << (VisualBasic6Parser.ON - 64)) | (1 << (VisualBasic6Parser.ON_ERROR - 64)) | (1 << (VisualBasic6Parser.ON_LOCAL_ERROR - 64)) | (1 << (VisualBasic6Parser.OPEN - 64)) | (1 << (VisualBasic6Parser.OPTIONAL - 64)) | (1 << (VisualBasic6Parser.OR - 64)) | (1 << (VisualBasic6Parser.OUTPUT - 64)) | (1 << (VisualBasic6Parser.PARAMARRAY - 64)) | (1 << (VisualBasic6Parser.PRESERVE - 64)) | (1 << (VisualBasic6Parser.PRINT - 64)) | (1 << (VisualBasic6Parser.PRIVATE - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualBasic6Parser.PUBLIC - 129)) | (1 << (VisualBasic6Parser.PUT - 129)) | (1 << (VisualBasic6Parser.RANDOM - 129)) | (1 << (VisualBasic6Parser.RANDOMIZE - 129)) | (1 << (VisualBasic6Parser.RAISEEVENT - 129)) | (1 << (VisualBasic6Parser.READ - 129)) | (1 << (VisualBasic6Parser.REDIM - 129)) | (1 << (VisualBasic6Parser.REM - 129)) | (1 << (VisualBasic6Parser.RESET - 129)) | (1 << (VisualBasic6Parser.RESUME - 129)) | (1 << (VisualBasic6Parser.RETURN - 129)) | (1 << (VisualBasic6Parser.RMDIR - 129)) | (1 << (VisualBasic6Parser.RSET - 129)) | (1 << (VisualBasic6Parser.SAVEPICTURE - 129)) | (1 << (VisualBasic6Parser.SAVESETTING - 129)) | (1 << (VisualBasic6Parser.SEEK - 129)) | (1 << (VisualBasic6Parser.SELECT - 129)) | (1 << (VisualBasic6Parser.SENDKEYS - 129)) | (1 << (VisualBasic6Parser.SET - 129)) | (1 << (VisualBasic6Parser.SETATTR - 129)) | (1 << (VisualBasic6Parser.SHARED - 129)) | (1 << (VisualBasic6Parser.SINGLE - 129)) | (1 << (VisualBasic6Parser.SPC - 129)) | (1 << (VisualBasic6Parser.STATIC - 129)) | (1 << (VisualBasic6Parser.STEP - 129)) | (1 << (VisualBasic6Parser.STOP - 129)) | (1 << (VisualBasic6Parser.STRING - 129)) | (1 << (VisualBasic6Parser.SUB - 129)) | (1 << (VisualBasic6Parser.TAB - 129)) | (1 << (VisualBasic6Parser.TEXT - 129)) | (1 << (VisualBasic6Parser.THEN - 129)) | (1 << (VisualBasic6Parser.TIME - 129)) | (1 << (VisualBasic6Parser.TO - 129)) | (1 << (VisualBasic6Parser.TRUE - 129)) | (1 << (VisualBasic6Parser.TYPE - 129)) | (1 << (VisualBasic6Parser.TYPEOF - 129)) | (1 << (VisualBasic6Parser.UNLOAD - 129)) | (1 << (VisualBasic6Parser.UNLOCK - 129)) | (1 << (VisualBasic6Parser.UNTIL - 129)) | (1 << (VisualBasic6Parser.VARIANT - 129)) | (1 << (VisualBasic6Parser.VERSION - 129)) | (1 << (VisualBasic6Parser.WEND - 129)) | (1 << (VisualBasic6Parser.WHILE - 129)) | (1 << (VisualBasic6Parser.WIDTH - 129)) | (1 << (VisualBasic6Parser.WITH - 129)) | (1 << (VisualBasic6Parser.WITHEVENTS - 129)) | (1 << (VisualBasic6Parser.WRITE - 129)) | (1 << (VisualBasic6Parser.XOR - 129)) | (1 << (VisualBasic6Parser.DOT - 129)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 129)))) != 0) or ((((_la - 206)) & ~0x3f) == 0 and ((1 << (_la - 206)) & ((1 << (VisualBasic6Parser.L_SQUARE_BRACKET - 206)) | (1 << (VisualBasic6Parser.IDENTIFIER - 206)) | (1 << (VisualBasic6Parser.WS - 206)))) != 0):
                self.state = 1634
                self.block()
                self.state = 1636 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1635
                    self.match(VisualBasic6Parser.NEWLINE)
                    self.state = 1638 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==VisualBasic6Parser.NEWLINE):
                        break



            self.state = 1642
            self.match(VisualBasic6Parser.END_PROPERTY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PropertySetStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROPERTY_SET(self):
            return self.getToken(VisualBasic6Parser.PROPERTY_SET, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(VisualBasic6Parser.AmbiguousIdentifierContext,0)


        def END_PROPERTY(self):
            return self.getToken(VisualBasic6Parser.END_PROPERTY, 0)

        def visibility(self):
            return self.getTypedRuleContext(VisualBasic6Parser.VisibilityContext,0)


        def STATIC(self):
            return self.getToken(VisualBasic6Parser.STATIC, 0)

        def argList(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ArgListContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.NEWLINE)
            else:
                return self.getToken(VisualBasic6Parser.NEWLINE, i)

        def block(self):
            return self.getTypedRuleContext(VisualBasic6Parser.BlockContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_propertySetStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertySetStmt" ):
                listener.enterPropertySetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertySetStmt" ):
                listener.exitPropertySetStmt(self)




    def propertySetStmt(self):

        localctx = VisualBasic6Parser.PropertySetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_propertySetStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (VisualBasic6Parser.FRIEND - 68)) | (1 << (VisualBasic6Parser.GLOBAL - 68)) | (1 << (VisualBasic6Parser.PRIVATE - 68)) | (1 << (VisualBasic6Parser.PUBLIC - 68)))) != 0):
                self.state = 1644
                self.visibility()
                self.state = 1645
                self.match(VisualBasic6Parser.WS)


            self.state = 1651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.STATIC:
                self.state = 1649
                self.match(VisualBasic6Parser.STATIC)
                self.state = 1650
                self.match(VisualBasic6Parser.WS)


            self.state = 1653
            self.match(VisualBasic6Parser.PROPERTY_SET)
            self.state = 1654
            self.match(VisualBasic6Parser.WS)
            self.state = 1655
            self.ambiguousIdentifier()
            self.state = 1660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.LPAREN or _la==VisualBasic6Parser.WS:
                self.state = 1657
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualBasic6Parser.WS:
                    self.state = 1656
                    self.match(VisualBasic6Parser.WS)


                self.state = 1659
                self.argList()


            self.state = 1663 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1662
                self.match(VisualBasic6Parser.NEWLINE)
                self.state = 1665 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==VisualBasic6Parser.NEWLINE):
                    break

            self.state = 1673
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualBasic6Parser.ACCESS) | (1 << VisualBasic6Parser.ADDRESSOF) | (1 << VisualBasic6Parser.ALIAS) | (1 << VisualBasic6Parser.AND) | (1 << VisualBasic6Parser.ATTRIBUTE) | (1 << VisualBasic6Parser.APPACTIVATE) | (1 << VisualBasic6Parser.APPEND) | (1 << VisualBasic6Parser.AS) | (1 << VisualBasic6Parser.BEEP) | (1 << VisualBasic6Parser.BEGIN) | (1 << VisualBasic6Parser.BINARY) | (1 << VisualBasic6Parser.BOOLEAN) | (1 << VisualBasic6Parser.BYVAL) | (1 << VisualBasic6Parser.BYREF) | (1 << VisualBasic6Parser.BYTE) | (1 << VisualBasic6Parser.CALL) | (1 << VisualBasic6Parser.CASE) | (1 << VisualBasic6Parser.CHDIR) | (1 << VisualBasic6Parser.CHDRIVE) | (1 << VisualBasic6Parser.CLASS) | (1 << VisualBasic6Parser.CLOSE) | (1 << VisualBasic6Parser.COLLECTION) | (1 << VisualBasic6Parser.CONST) | (1 << VisualBasic6Parser.DATE) | (1 << VisualBasic6Parser.DECLARE) | (1 << VisualBasic6Parser.DEFBOOL) | (1 << VisualBasic6Parser.DEFBYTE) | (1 << VisualBasic6Parser.DEFDATE) | (1 << VisualBasic6Parser.DEFDBL) | (1 << VisualBasic6Parser.DEFDEC) | (1 << VisualBasic6Parser.DEFCUR) | (1 << VisualBasic6Parser.DEFINT) | (1 << VisualBasic6Parser.DEFLNG) | (1 << VisualBasic6Parser.DEFOBJ) | (1 << VisualBasic6Parser.DEFSNG) | (1 << VisualBasic6Parser.DEFSTR) | (1 << VisualBasic6Parser.DEFVAR) | (1 << VisualBasic6Parser.DELETESETTING) | (1 << VisualBasic6Parser.DIM) | (1 << VisualBasic6Parser.DO) | (1 << VisualBasic6Parser.DOUBLE) | (1 << VisualBasic6Parser.EACH) | (1 << VisualBasic6Parser.ELSE) | (1 << VisualBasic6Parser.ELSEIF) | (1 << VisualBasic6Parser.END) | (1 << VisualBasic6Parser.ENUM) | (1 << VisualBasic6Parser.EQV) | (1 << VisualBasic6Parser.ERASE) | (1 << VisualBasic6Parser.ERROR) | (1 << VisualBasic6Parser.EVENT) | (1 << VisualBasic6Parser.EXIT_DO) | (1 << VisualBasic6Parser.EXIT_FOR) | (1 << VisualBasic6Parser.EXIT_FUNCTION))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualBasic6Parser.EXIT_PROPERTY - 64)) | (1 << (VisualBasic6Parser.EXIT_SUB - 64)) | (1 << (VisualBasic6Parser.FALSE - 64)) | (1 << (VisualBasic6Parser.FILECOPY - 64)) | (1 << (VisualBasic6Parser.FRIEND - 64)) | (1 << (VisualBasic6Parser.FOR - 64)) | (1 << (VisualBasic6Parser.FUNCTION - 64)) | (1 << (VisualBasic6Parser.GET - 64)) | (1 << (VisualBasic6Parser.GLOBAL - 64)) | (1 << (VisualBasic6Parser.GOSUB - 64)) | (1 << (VisualBasic6Parser.GOTO - 64)) | (1 << (VisualBasic6Parser.IF - 64)) | (1 << (VisualBasic6Parser.IMP - 64)) | (1 << (VisualBasic6Parser.IMPLEMENTS - 64)) | (1 << (VisualBasic6Parser.IN - 64)) | (1 << (VisualBasic6Parser.INPUT - 64)) | (1 << (VisualBasic6Parser.IS - 64)) | (1 << (VisualBasic6Parser.INTEGER - 64)) | (1 << (VisualBasic6Parser.KILL - 64)) | (1 << (VisualBasic6Parser.LOAD - 64)) | (1 << (VisualBasic6Parser.LOCK - 64)) | (1 << (VisualBasic6Parser.LONG - 64)) | (1 << (VisualBasic6Parser.LOOP - 64)) | (1 << (VisualBasic6Parser.LEN - 64)) | (1 << (VisualBasic6Parser.LET - 64)) | (1 << (VisualBasic6Parser.LIB - 64)) | (1 << (VisualBasic6Parser.LIKE - 64)) | (1 << (VisualBasic6Parser.LINE_INPUT - 64)) | (1 << (VisualBasic6Parser.LSET - 64)) | (1 << (VisualBasic6Parser.MACRO_IF - 64)) | (1 << (VisualBasic6Parser.ME - 64)) | (1 << (VisualBasic6Parser.MID - 64)) | (1 << (VisualBasic6Parser.MKDIR - 64)) | (1 << (VisualBasic6Parser.MOD - 64)) | (1 << (VisualBasic6Parser.NAME - 64)) | (1 << (VisualBasic6Parser.NEXT - 64)) | (1 << (VisualBasic6Parser.NEW - 64)) | (1 << (VisualBasic6Parser.NOT - 64)) | (1 << (VisualBasic6Parser.NOTHING - 64)) | (1 << (VisualBasic6Parser.NULL - 64)) | (1 << (VisualBasic6Parser.OBJECT - 64)) | (1 << (VisualBasic6Parser.ON - 64)) | (1 << (VisualBasic6Parser.ON_ERROR - 64)) | (1 << (VisualBasic6Parser.ON_LOCAL_ERROR - 64)) | (1 << (VisualBasic6Parser.OPEN - 64)) | (1 << (VisualBasic6Parser.OPTIONAL - 64)) | (1 << (VisualBasic6Parser.OR - 64)) | (1 << (VisualBasic6Parser.OUTPUT - 64)) | (1 << (VisualBasic6Parser.PARAMARRAY - 64)) | (1 << (VisualBasic6Parser.PRESERVE - 64)) | (1 << (VisualBasic6Parser.PRINT - 64)) | (1 << (VisualBasic6Parser.PRIVATE - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualBasic6Parser.PUBLIC - 129)) | (1 << (VisualBasic6Parser.PUT - 129)) | (1 << (VisualBasic6Parser.RANDOM - 129)) | (1 << (VisualBasic6Parser.RANDOMIZE - 129)) | (1 << (VisualBasic6Parser.RAISEEVENT - 129)) | (1 << (VisualBasic6Parser.READ - 129)) | (1 << (VisualBasic6Parser.REDIM - 129)) | (1 << (VisualBasic6Parser.REM - 129)) | (1 << (VisualBasic6Parser.RESET - 129)) | (1 << (VisualBasic6Parser.RESUME - 129)) | (1 << (VisualBasic6Parser.RETURN - 129)) | (1 << (VisualBasic6Parser.RMDIR - 129)) | (1 << (VisualBasic6Parser.RSET - 129)) | (1 << (VisualBasic6Parser.SAVEPICTURE - 129)) | (1 << (VisualBasic6Parser.SAVESETTING - 129)) | (1 << (VisualBasic6Parser.SEEK - 129)) | (1 << (VisualBasic6Parser.SELECT - 129)) | (1 << (VisualBasic6Parser.SENDKEYS - 129)) | (1 << (VisualBasic6Parser.SET - 129)) | (1 << (VisualBasic6Parser.SETATTR - 129)) | (1 << (VisualBasic6Parser.SHARED - 129)) | (1 << (VisualBasic6Parser.SINGLE - 129)) | (1 << (VisualBasic6Parser.SPC - 129)) | (1 << (VisualBasic6Parser.STATIC - 129)) | (1 << (VisualBasic6Parser.STEP - 129)) | (1 << (VisualBasic6Parser.STOP - 129)) | (1 << (VisualBasic6Parser.STRING - 129)) | (1 << (VisualBasic6Parser.SUB - 129)) | (1 << (VisualBasic6Parser.TAB - 129)) | (1 << (VisualBasic6Parser.TEXT - 129)) | (1 << (VisualBasic6Parser.THEN - 129)) | (1 << (VisualBasic6Parser.TIME - 129)) | (1 << (VisualBasic6Parser.TO - 129)) | (1 << (VisualBasic6Parser.TRUE - 129)) | (1 << (VisualBasic6Parser.TYPE - 129)) | (1 << (VisualBasic6Parser.TYPEOF - 129)) | (1 << (VisualBasic6Parser.UNLOAD - 129)) | (1 << (VisualBasic6Parser.UNLOCK - 129)) | (1 << (VisualBasic6Parser.UNTIL - 129)) | (1 << (VisualBasic6Parser.VARIANT - 129)) | (1 << (VisualBasic6Parser.VERSION - 129)) | (1 << (VisualBasic6Parser.WEND - 129)) | (1 << (VisualBasic6Parser.WHILE - 129)) | (1 << (VisualBasic6Parser.WIDTH - 129)) | (1 << (VisualBasic6Parser.WITH - 129)) | (1 << (VisualBasic6Parser.WITHEVENTS - 129)) | (1 << (VisualBasic6Parser.WRITE - 129)) | (1 << (VisualBasic6Parser.XOR - 129)) | (1 << (VisualBasic6Parser.DOT - 129)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 129)))) != 0) or ((((_la - 206)) & ~0x3f) == 0 and ((1 << (_la - 206)) & ((1 << (VisualBasic6Parser.L_SQUARE_BRACKET - 206)) | (1 << (VisualBasic6Parser.IDENTIFIER - 206)) | (1 << (VisualBasic6Parser.WS - 206)))) != 0):
                self.state = 1667
                self.block()
                self.state = 1669 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1668
                    self.match(VisualBasic6Parser.NEWLINE)
                    self.state = 1671 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==VisualBasic6Parser.NEWLINE):
                        break



            self.state = 1675
            self.match(VisualBasic6Parser.END_PROPERTY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PropertyLetStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROPERTY_LET(self):
            return self.getToken(VisualBasic6Parser.PROPERTY_LET, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(VisualBasic6Parser.AmbiguousIdentifierContext,0)


        def END_PROPERTY(self):
            return self.getToken(VisualBasic6Parser.END_PROPERTY, 0)

        def visibility(self):
            return self.getTypedRuleContext(VisualBasic6Parser.VisibilityContext,0)


        def STATIC(self):
            return self.getToken(VisualBasic6Parser.STATIC, 0)

        def argList(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ArgListContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.NEWLINE)
            else:
                return self.getToken(VisualBasic6Parser.NEWLINE, i)

        def block(self):
            return self.getTypedRuleContext(VisualBasic6Parser.BlockContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_propertyLetStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyLetStmt" ):
                listener.enterPropertyLetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyLetStmt" ):
                listener.exitPropertyLetStmt(self)




    def propertyLetStmt(self):

        localctx = VisualBasic6Parser.PropertyLetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_propertyLetStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1680
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (VisualBasic6Parser.FRIEND - 68)) | (1 << (VisualBasic6Parser.GLOBAL - 68)) | (1 << (VisualBasic6Parser.PRIVATE - 68)) | (1 << (VisualBasic6Parser.PUBLIC - 68)))) != 0):
                self.state = 1677
                self.visibility()
                self.state = 1678
                self.match(VisualBasic6Parser.WS)


            self.state = 1684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.STATIC:
                self.state = 1682
                self.match(VisualBasic6Parser.STATIC)
                self.state = 1683
                self.match(VisualBasic6Parser.WS)


            self.state = 1686
            self.match(VisualBasic6Parser.PROPERTY_LET)
            self.state = 1687
            self.match(VisualBasic6Parser.WS)
            self.state = 1688
            self.ambiguousIdentifier()
            self.state = 1693
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.LPAREN or _la==VisualBasic6Parser.WS:
                self.state = 1690
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualBasic6Parser.WS:
                    self.state = 1689
                    self.match(VisualBasic6Parser.WS)


                self.state = 1692
                self.argList()


            self.state = 1696 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1695
                self.match(VisualBasic6Parser.NEWLINE)
                self.state = 1698 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==VisualBasic6Parser.NEWLINE):
                    break

            self.state = 1706
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualBasic6Parser.ACCESS) | (1 << VisualBasic6Parser.ADDRESSOF) | (1 << VisualBasic6Parser.ALIAS) | (1 << VisualBasic6Parser.AND) | (1 << VisualBasic6Parser.ATTRIBUTE) | (1 << VisualBasic6Parser.APPACTIVATE) | (1 << VisualBasic6Parser.APPEND) | (1 << VisualBasic6Parser.AS) | (1 << VisualBasic6Parser.BEEP) | (1 << VisualBasic6Parser.BEGIN) | (1 << VisualBasic6Parser.BINARY) | (1 << VisualBasic6Parser.BOOLEAN) | (1 << VisualBasic6Parser.BYVAL) | (1 << VisualBasic6Parser.BYREF) | (1 << VisualBasic6Parser.BYTE) | (1 << VisualBasic6Parser.CALL) | (1 << VisualBasic6Parser.CASE) | (1 << VisualBasic6Parser.CHDIR) | (1 << VisualBasic6Parser.CHDRIVE) | (1 << VisualBasic6Parser.CLASS) | (1 << VisualBasic6Parser.CLOSE) | (1 << VisualBasic6Parser.COLLECTION) | (1 << VisualBasic6Parser.CONST) | (1 << VisualBasic6Parser.DATE) | (1 << VisualBasic6Parser.DECLARE) | (1 << VisualBasic6Parser.DEFBOOL) | (1 << VisualBasic6Parser.DEFBYTE) | (1 << VisualBasic6Parser.DEFDATE) | (1 << VisualBasic6Parser.DEFDBL) | (1 << VisualBasic6Parser.DEFDEC) | (1 << VisualBasic6Parser.DEFCUR) | (1 << VisualBasic6Parser.DEFINT) | (1 << VisualBasic6Parser.DEFLNG) | (1 << VisualBasic6Parser.DEFOBJ) | (1 << VisualBasic6Parser.DEFSNG) | (1 << VisualBasic6Parser.DEFSTR) | (1 << VisualBasic6Parser.DEFVAR) | (1 << VisualBasic6Parser.DELETESETTING) | (1 << VisualBasic6Parser.DIM) | (1 << VisualBasic6Parser.DO) | (1 << VisualBasic6Parser.DOUBLE) | (1 << VisualBasic6Parser.EACH) | (1 << VisualBasic6Parser.ELSE) | (1 << VisualBasic6Parser.ELSEIF) | (1 << VisualBasic6Parser.END) | (1 << VisualBasic6Parser.ENUM) | (1 << VisualBasic6Parser.EQV) | (1 << VisualBasic6Parser.ERASE) | (1 << VisualBasic6Parser.ERROR) | (1 << VisualBasic6Parser.EVENT) | (1 << VisualBasic6Parser.EXIT_DO) | (1 << VisualBasic6Parser.EXIT_FOR) | (1 << VisualBasic6Parser.EXIT_FUNCTION))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualBasic6Parser.EXIT_PROPERTY - 64)) | (1 << (VisualBasic6Parser.EXIT_SUB - 64)) | (1 << (VisualBasic6Parser.FALSE - 64)) | (1 << (VisualBasic6Parser.FILECOPY - 64)) | (1 << (VisualBasic6Parser.FRIEND - 64)) | (1 << (VisualBasic6Parser.FOR - 64)) | (1 << (VisualBasic6Parser.FUNCTION - 64)) | (1 << (VisualBasic6Parser.GET - 64)) | (1 << (VisualBasic6Parser.GLOBAL - 64)) | (1 << (VisualBasic6Parser.GOSUB - 64)) | (1 << (VisualBasic6Parser.GOTO - 64)) | (1 << (VisualBasic6Parser.IF - 64)) | (1 << (VisualBasic6Parser.IMP - 64)) | (1 << (VisualBasic6Parser.IMPLEMENTS - 64)) | (1 << (VisualBasic6Parser.IN - 64)) | (1 << (VisualBasic6Parser.INPUT - 64)) | (1 << (VisualBasic6Parser.IS - 64)) | (1 << (VisualBasic6Parser.INTEGER - 64)) | (1 << (VisualBasic6Parser.KILL - 64)) | (1 << (VisualBasic6Parser.LOAD - 64)) | (1 << (VisualBasic6Parser.LOCK - 64)) | (1 << (VisualBasic6Parser.LONG - 64)) | (1 << (VisualBasic6Parser.LOOP - 64)) | (1 << (VisualBasic6Parser.LEN - 64)) | (1 << (VisualBasic6Parser.LET - 64)) | (1 << (VisualBasic6Parser.LIB - 64)) | (1 << (VisualBasic6Parser.LIKE - 64)) | (1 << (VisualBasic6Parser.LINE_INPUT - 64)) | (1 << (VisualBasic6Parser.LSET - 64)) | (1 << (VisualBasic6Parser.MACRO_IF - 64)) | (1 << (VisualBasic6Parser.ME - 64)) | (1 << (VisualBasic6Parser.MID - 64)) | (1 << (VisualBasic6Parser.MKDIR - 64)) | (1 << (VisualBasic6Parser.MOD - 64)) | (1 << (VisualBasic6Parser.NAME - 64)) | (1 << (VisualBasic6Parser.NEXT - 64)) | (1 << (VisualBasic6Parser.NEW - 64)) | (1 << (VisualBasic6Parser.NOT - 64)) | (1 << (VisualBasic6Parser.NOTHING - 64)) | (1 << (VisualBasic6Parser.NULL - 64)) | (1 << (VisualBasic6Parser.OBJECT - 64)) | (1 << (VisualBasic6Parser.ON - 64)) | (1 << (VisualBasic6Parser.ON_ERROR - 64)) | (1 << (VisualBasic6Parser.ON_LOCAL_ERROR - 64)) | (1 << (VisualBasic6Parser.OPEN - 64)) | (1 << (VisualBasic6Parser.OPTIONAL - 64)) | (1 << (VisualBasic6Parser.OR - 64)) | (1 << (VisualBasic6Parser.OUTPUT - 64)) | (1 << (VisualBasic6Parser.PARAMARRAY - 64)) | (1 << (VisualBasic6Parser.PRESERVE - 64)) | (1 << (VisualBasic6Parser.PRINT - 64)) | (1 << (VisualBasic6Parser.PRIVATE - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualBasic6Parser.PUBLIC - 129)) | (1 << (VisualBasic6Parser.PUT - 129)) | (1 << (VisualBasic6Parser.RANDOM - 129)) | (1 << (VisualBasic6Parser.RANDOMIZE - 129)) | (1 << (VisualBasic6Parser.RAISEEVENT - 129)) | (1 << (VisualBasic6Parser.READ - 129)) | (1 << (VisualBasic6Parser.REDIM - 129)) | (1 << (VisualBasic6Parser.REM - 129)) | (1 << (VisualBasic6Parser.RESET - 129)) | (1 << (VisualBasic6Parser.RESUME - 129)) | (1 << (VisualBasic6Parser.RETURN - 129)) | (1 << (VisualBasic6Parser.RMDIR - 129)) | (1 << (VisualBasic6Parser.RSET - 129)) | (1 << (VisualBasic6Parser.SAVEPICTURE - 129)) | (1 << (VisualBasic6Parser.SAVESETTING - 129)) | (1 << (VisualBasic6Parser.SEEK - 129)) | (1 << (VisualBasic6Parser.SELECT - 129)) | (1 << (VisualBasic6Parser.SENDKEYS - 129)) | (1 << (VisualBasic6Parser.SET - 129)) | (1 << (VisualBasic6Parser.SETATTR - 129)) | (1 << (VisualBasic6Parser.SHARED - 129)) | (1 << (VisualBasic6Parser.SINGLE - 129)) | (1 << (VisualBasic6Parser.SPC - 129)) | (1 << (VisualBasic6Parser.STATIC - 129)) | (1 << (VisualBasic6Parser.STEP - 129)) | (1 << (VisualBasic6Parser.STOP - 129)) | (1 << (VisualBasic6Parser.STRING - 129)) | (1 << (VisualBasic6Parser.SUB - 129)) | (1 << (VisualBasic6Parser.TAB - 129)) | (1 << (VisualBasic6Parser.TEXT - 129)) | (1 << (VisualBasic6Parser.THEN - 129)) | (1 << (VisualBasic6Parser.TIME - 129)) | (1 << (VisualBasic6Parser.TO - 129)) | (1 << (VisualBasic6Parser.TRUE - 129)) | (1 << (VisualBasic6Parser.TYPE - 129)) | (1 << (VisualBasic6Parser.TYPEOF - 129)) | (1 << (VisualBasic6Parser.UNLOAD - 129)) | (1 << (VisualBasic6Parser.UNLOCK - 129)) | (1 << (VisualBasic6Parser.UNTIL - 129)) | (1 << (VisualBasic6Parser.VARIANT - 129)) | (1 << (VisualBasic6Parser.VERSION - 129)) | (1 << (VisualBasic6Parser.WEND - 129)) | (1 << (VisualBasic6Parser.WHILE - 129)) | (1 << (VisualBasic6Parser.WIDTH - 129)) | (1 << (VisualBasic6Parser.WITH - 129)) | (1 << (VisualBasic6Parser.WITHEVENTS - 129)) | (1 << (VisualBasic6Parser.WRITE - 129)) | (1 << (VisualBasic6Parser.XOR - 129)) | (1 << (VisualBasic6Parser.DOT - 129)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 129)))) != 0) or ((((_la - 206)) & ~0x3f) == 0 and ((1 << (_la - 206)) & ((1 << (VisualBasic6Parser.L_SQUARE_BRACKET - 206)) | (1 << (VisualBasic6Parser.IDENTIFIER - 206)) | (1 << (VisualBasic6Parser.WS - 206)))) != 0):
                self.state = 1700
                self.block()
                self.state = 1702 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1701
                    self.match(VisualBasic6Parser.NEWLINE)
                    self.state = 1704 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==VisualBasic6Parser.NEWLINE):
                        break



            self.state = 1708
            self.match(VisualBasic6Parser.END_PROPERTY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PutStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUT(self):
            return self.getToken(VisualBasic6Parser.PUT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.COMMA)
            else:
                return self.getToken(VisualBasic6Parser.COMMA, i)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_putStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPutStmt" ):
                listener.enterPutStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPutStmt" ):
                listener.exitPutStmt(self)




    def putStmt(self):

        localctx = VisualBasic6Parser.PutStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_putStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1710
            self.match(VisualBasic6Parser.PUT)
            self.state = 1711
            self.match(VisualBasic6Parser.WS)
            self.state = 1712
            self.valueStmt(0)
            self.state = 1714
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 1713
                self.match(VisualBasic6Parser.WS)


            self.state = 1716
            self.match(VisualBasic6Parser.COMMA)
            self.state = 1718
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
            if la_ == 1:
                self.state = 1717
                self.match(VisualBasic6Parser.WS)


            self.state = 1721
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
            if la_ == 1:
                self.state = 1720
                self.valueStmt(0)


            self.state = 1724
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 1723
                self.match(VisualBasic6Parser.WS)


            self.state = 1726
            self.match(VisualBasic6Parser.COMMA)
            self.state = 1728
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,254,self._ctx)
            if la_ == 1:
                self.state = 1727
                self.match(VisualBasic6Parser.WS)


            self.state = 1730
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RaiseEventStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISEEVENT(self):
            return self.getToken(VisualBasic6Parser.RAISEEVENT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(VisualBasic6Parser.AmbiguousIdentifierContext,0)


        def LPAREN(self):
            return self.getToken(VisualBasic6Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(VisualBasic6Parser.RPAREN, 0)

        def argsCall(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ArgsCallContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_raiseEventStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaiseEventStmt" ):
                listener.enterRaiseEventStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaiseEventStmt" ):
                listener.exitRaiseEventStmt(self)




    def raiseEventStmt(self):

        localctx = VisualBasic6Parser.RaiseEventStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_raiseEventStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1732
            self.match(VisualBasic6Parser.RAISEEVENT)
            self.state = 1733
            self.match(VisualBasic6Parser.WS)
            self.state = 1734
            self.ambiguousIdentifier()
            self.state = 1749
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,259,self._ctx)
            if la_ == 1:
                self.state = 1736
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualBasic6Parser.WS:
                    self.state = 1735
                    self.match(VisualBasic6Parser.WS)


                self.state = 1738
                self.match(VisualBasic6Parser.LPAREN)
                self.state = 1740
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
                if la_ == 1:
                    self.state = 1739
                    self.match(VisualBasic6Parser.WS)


                self.state = 1746
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualBasic6Parser.ACCESS) | (1 << VisualBasic6Parser.ADDRESSOF) | (1 << VisualBasic6Parser.ALIAS) | (1 << VisualBasic6Parser.AND) | (1 << VisualBasic6Parser.ATTRIBUTE) | (1 << VisualBasic6Parser.APPACTIVATE) | (1 << VisualBasic6Parser.APPEND) | (1 << VisualBasic6Parser.AS) | (1 << VisualBasic6Parser.BEEP) | (1 << VisualBasic6Parser.BEGIN) | (1 << VisualBasic6Parser.BINARY) | (1 << VisualBasic6Parser.BOOLEAN) | (1 << VisualBasic6Parser.BYVAL) | (1 << VisualBasic6Parser.BYREF) | (1 << VisualBasic6Parser.BYTE) | (1 << VisualBasic6Parser.CALL) | (1 << VisualBasic6Parser.CASE) | (1 << VisualBasic6Parser.CHDIR) | (1 << VisualBasic6Parser.CHDRIVE) | (1 << VisualBasic6Parser.CLASS) | (1 << VisualBasic6Parser.CLOSE) | (1 << VisualBasic6Parser.COLLECTION) | (1 << VisualBasic6Parser.CONST) | (1 << VisualBasic6Parser.DATE) | (1 << VisualBasic6Parser.DECLARE) | (1 << VisualBasic6Parser.DEFBOOL) | (1 << VisualBasic6Parser.DEFBYTE) | (1 << VisualBasic6Parser.DEFDATE) | (1 << VisualBasic6Parser.DEFDBL) | (1 << VisualBasic6Parser.DEFDEC) | (1 << VisualBasic6Parser.DEFCUR) | (1 << VisualBasic6Parser.DEFINT) | (1 << VisualBasic6Parser.DEFLNG) | (1 << VisualBasic6Parser.DEFOBJ) | (1 << VisualBasic6Parser.DEFSNG) | (1 << VisualBasic6Parser.DEFSTR) | (1 << VisualBasic6Parser.DEFVAR) | (1 << VisualBasic6Parser.DELETESETTING) | (1 << VisualBasic6Parser.DIM) | (1 << VisualBasic6Parser.DO) | (1 << VisualBasic6Parser.DOUBLE) | (1 << VisualBasic6Parser.EACH) | (1 << VisualBasic6Parser.ELSE) | (1 << VisualBasic6Parser.ELSEIF) | (1 << VisualBasic6Parser.END) | (1 << VisualBasic6Parser.ENUM) | (1 << VisualBasic6Parser.EQV) | (1 << VisualBasic6Parser.ERASE) | (1 << VisualBasic6Parser.ERROR) | (1 << VisualBasic6Parser.EVENT))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (VisualBasic6Parser.FALSE - 66)) | (1 << (VisualBasic6Parser.FILECOPY - 66)) | (1 << (VisualBasic6Parser.FRIEND - 66)) | (1 << (VisualBasic6Parser.FOR - 66)) | (1 << (VisualBasic6Parser.FUNCTION - 66)) | (1 << (VisualBasic6Parser.GET - 66)) | (1 << (VisualBasic6Parser.GLOBAL - 66)) | (1 << (VisualBasic6Parser.GOSUB - 66)) | (1 << (VisualBasic6Parser.GOTO - 66)) | (1 << (VisualBasic6Parser.IF - 66)) | (1 << (VisualBasic6Parser.IMP - 66)) | (1 << (VisualBasic6Parser.IMPLEMENTS - 66)) | (1 << (VisualBasic6Parser.IN - 66)) | (1 << (VisualBasic6Parser.INPUT - 66)) | (1 << (VisualBasic6Parser.IS - 66)) | (1 << (VisualBasic6Parser.INTEGER - 66)) | (1 << (VisualBasic6Parser.KILL - 66)) | (1 << (VisualBasic6Parser.LOAD - 66)) | (1 << (VisualBasic6Parser.LOCK - 66)) | (1 << (VisualBasic6Parser.LONG - 66)) | (1 << (VisualBasic6Parser.LOOP - 66)) | (1 << (VisualBasic6Parser.LEN - 66)) | (1 << (VisualBasic6Parser.LET - 66)) | (1 << (VisualBasic6Parser.LIB - 66)) | (1 << (VisualBasic6Parser.LIKE - 66)) | (1 << (VisualBasic6Parser.LSET - 66)) | (1 << (VisualBasic6Parser.ME - 66)) | (1 << (VisualBasic6Parser.MID - 66)) | (1 << (VisualBasic6Parser.MKDIR - 66)) | (1 << (VisualBasic6Parser.MOD - 66)) | (1 << (VisualBasic6Parser.NAME - 66)) | (1 << (VisualBasic6Parser.NEXT - 66)) | (1 << (VisualBasic6Parser.NEW - 66)) | (1 << (VisualBasic6Parser.NOT - 66)) | (1 << (VisualBasic6Parser.NOTHING - 66)) | (1 << (VisualBasic6Parser.NULL - 66)) | (1 << (VisualBasic6Parser.OBJECT - 66)) | (1 << (VisualBasic6Parser.ON - 66)) | (1 << (VisualBasic6Parser.OPEN - 66)) | (1 << (VisualBasic6Parser.OPTIONAL - 66)) | (1 << (VisualBasic6Parser.OR - 66)) | (1 << (VisualBasic6Parser.OUTPUT - 66)) | (1 << (VisualBasic6Parser.PARAMARRAY - 66)) | (1 << (VisualBasic6Parser.PRESERVE - 66)) | (1 << (VisualBasic6Parser.PRINT - 66)) | (1 << (VisualBasic6Parser.PRIVATE - 66)) | (1 << (VisualBasic6Parser.PUBLIC - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (VisualBasic6Parser.PUT - 130)) | (1 << (VisualBasic6Parser.RANDOM - 130)) | (1 << (VisualBasic6Parser.RANDOMIZE - 130)) | (1 << (VisualBasic6Parser.RAISEEVENT - 130)) | (1 << (VisualBasic6Parser.READ - 130)) | (1 << (VisualBasic6Parser.REDIM - 130)) | (1 << (VisualBasic6Parser.REM - 130)) | (1 << (VisualBasic6Parser.RESET - 130)) | (1 << (VisualBasic6Parser.RESUME - 130)) | (1 << (VisualBasic6Parser.RETURN - 130)) | (1 << (VisualBasic6Parser.RMDIR - 130)) | (1 << (VisualBasic6Parser.RSET - 130)) | (1 << (VisualBasic6Parser.SAVEPICTURE - 130)) | (1 << (VisualBasic6Parser.SAVESETTING - 130)) | (1 << (VisualBasic6Parser.SEEK - 130)) | (1 << (VisualBasic6Parser.SELECT - 130)) | (1 << (VisualBasic6Parser.SENDKEYS - 130)) | (1 << (VisualBasic6Parser.SET - 130)) | (1 << (VisualBasic6Parser.SETATTR - 130)) | (1 << (VisualBasic6Parser.SHARED - 130)) | (1 << (VisualBasic6Parser.SINGLE - 130)) | (1 << (VisualBasic6Parser.SPC - 130)) | (1 << (VisualBasic6Parser.STATIC - 130)) | (1 << (VisualBasic6Parser.STEP - 130)) | (1 << (VisualBasic6Parser.STOP - 130)) | (1 << (VisualBasic6Parser.STRING - 130)) | (1 << (VisualBasic6Parser.SUB - 130)) | (1 << (VisualBasic6Parser.TAB - 130)) | (1 << (VisualBasic6Parser.TEXT - 130)) | (1 << (VisualBasic6Parser.THEN - 130)) | (1 << (VisualBasic6Parser.TIME - 130)) | (1 << (VisualBasic6Parser.TO - 130)) | (1 << (VisualBasic6Parser.TRUE - 130)) | (1 << (VisualBasic6Parser.TYPE - 130)) | (1 << (VisualBasic6Parser.TYPEOF - 130)) | (1 << (VisualBasic6Parser.UNLOAD - 130)) | (1 << (VisualBasic6Parser.UNLOCK - 130)) | (1 << (VisualBasic6Parser.UNTIL - 130)) | (1 << (VisualBasic6Parser.VARIANT - 130)) | (1 << (VisualBasic6Parser.VERSION - 130)) | (1 << (VisualBasic6Parser.WEND - 130)) | (1 << (VisualBasic6Parser.WHILE - 130)) | (1 << (VisualBasic6Parser.WIDTH - 130)) | (1 << (VisualBasic6Parser.WITH - 130)) | (1 << (VisualBasic6Parser.WITHEVENTS - 130)) | (1 << (VisualBasic6Parser.WRITE - 130)) | (1 << (VisualBasic6Parser.XOR - 130)) | (1 << (VisualBasic6Parser.COMMA - 130)) | (1 << (VisualBasic6Parser.DOT - 130)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 130)) | (1 << (VisualBasic6Parser.LPAREN - 130)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (VisualBasic6Parser.MINUS - 195)) | (1 << (VisualBasic6Parser.PLUS - 195)) | (1 << (VisualBasic6Parser.SEMICOLON - 195)) | (1 << (VisualBasic6Parser.L_SQUARE_BRACKET - 195)) | (1 << (VisualBasic6Parser.STRINGLITERAL - 195)) | (1 << (VisualBasic6Parser.DATELITERAL - 195)) | (1 << (VisualBasic6Parser.COLORLITERAL - 195)) | (1 << (VisualBasic6Parser.INTEGERLITERAL - 195)) | (1 << (VisualBasic6Parser.DOUBLELITERAL - 195)) | (1 << (VisualBasic6Parser.FILENUMBER - 195)) | (1 << (VisualBasic6Parser.OCTALLITERAL - 195)) | (1 << (VisualBasic6Parser.IDENTIFIER - 195)) | (1 << (VisualBasic6Parser.WS - 195)))) != 0):
                    self.state = 1742
                    self.argsCall()
                    self.state = 1744
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualBasic6Parser.WS:
                        self.state = 1743
                        self.match(VisualBasic6Parser.WS)




                self.state = 1748
                self.match(VisualBasic6Parser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RandomizeStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RANDOMIZE(self):
            return self.getToken(VisualBasic6Parser.RANDOMIZE, 0)

        def WS(self):
            return self.getToken(VisualBasic6Parser.WS, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_randomizeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRandomizeStmt" ):
                listener.enterRandomizeStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRandomizeStmt" ):
                listener.exitRandomizeStmt(self)




    def randomizeStmt(self):

        localctx = VisualBasic6Parser.RandomizeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_randomizeStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1751
            self.match(VisualBasic6Parser.RANDOMIZE)
            self.state = 1754
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,260,self._ctx)
            if la_ == 1:
                self.state = 1752
                self.match(VisualBasic6Parser.WS)
                self.state = 1753
                self.valueStmt(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RedimStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REDIM(self):
            return self.getToken(VisualBasic6Parser.REDIM, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def redimSubStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.RedimSubStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.RedimSubStmtContext,i)


        def PRESERVE(self):
            return self.getToken(VisualBasic6Parser.PRESERVE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.COMMA)
            else:
                return self.getToken(VisualBasic6Parser.COMMA, i)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_redimStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRedimStmt" ):
                listener.enterRedimStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRedimStmt" ):
                listener.exitRedimStmt(self)




    def redimStmt(self):

        localctx = VisualBasic6Parser.RedimStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_redimStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1756
            self.match(VisualBasic6Parser.REDIM)
            self.state = 1757
            self.match(VisualBasic6Parser.WS)
            self.state = 1760
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
            if la_ == 1:
                self.state = 1758
                self.match(VisualBasic6Parser.PRESERVE)
                self.state = 1759
                self.match(VisualBasic6Parser.WS)


            self.state = 1762
            self.redimSubStmt()
            self.state = 1773
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,264,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1764
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualBasic6Parser.WS:
                        self.state = 1763
                        self.match(VisualBasic6Parser.WS)


                    self.state = 1766
                    self.match(VisualBasic6Parser.COMMA)
                    self.state = 1768
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,263,self._ctx)
                    if la_ == 1:
                        self.state = 1767
                        self.match(VisualBasic6Parser.WS)


                    self.state = 1770
                    self.redimSubStmt() 
                self.state = 1775
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,264,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RedimSubStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ImplicitCallStmt_InStmtContext,0)


        def LPAREN(self):
            return self.getToken(VisualBasic6Parser.LPAREN, 0)

        def subscripts(self):
            return self.getTypedRuleContext(VisualBasic6Parser.SubscriptsContext,0)


        def RPAREN(self):
            return self.getToken(VisualBasic6Parser.RPAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def asTypeClause(self):
            return self.getTypedRuleContext(VisualBasic6Parser.AsTypeClauseContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_redimSubStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRedimSubStmt" ):
                listener.enterRedimSubStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRedimSubStmt" ):
                listener.exitRedimSubStmt(self)




    def redimSubStmt(self):

        localctx = VisualBasic6Parser.RedimSubStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_redimSubStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1776
            self.implicitCallStmt_InStmt()
            self.state = 1778
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 1777
                self.match(VisualBasic6Parser.WS)


            self.state = 1780
            self.match(VisualBasic6Parser.LPAREN)
            self.state = 1782
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
            if la_ == 1:
                self.state = 1781
                self.match(VisualBasic6Parser.WS)


            self.state = 1784
            self.subscripts()
            self.state = 1786
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 1785
                self.match(VisualBasic6Parser.WS)


            self.state = 1788
            self.match(VisualBasic6Parser.RPAREN)
            self.state = 1791
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,268,self._ctx)
            if la_ == 1:
                self.state = 1789
                self.match(VisualBasic6Parser.WS)
                self.state = 1790
                self.asTypeClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ResetStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(VisualBasic6Parser.RESET, 0)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_resetStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetStmt" ):
                listener.enterResetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetStmt" ):
                listener.exitResetStmt(self)




    def resetStmt(self):

        localctx = VisualBasic6Parser.ResetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_resetStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1793
            self.match(VisualBasic6Parser.RESET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ResumeStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESUME(self):
            return self.getToken(VisualBasic6Parser.RESUME, 0)

        def WS(self):
            return self.getToken(VisualBasic6Parser.WS, 0)

        def NEXT(self):
            return self.getToken(VisualBasic6Parser.NEXT, 0)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(VisualBasic6Parser.AmbiguousIdentifierContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_resumeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResumeStmt" ):
                listener.enterResumeStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResumeStmt" ):
                listener.exitResumeStmt(self)




    def resumeStmt(self):

        localctx = VisualBasic6Parser.ResumeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_resumeStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1795
            self.match(VisualBasic6Parser.RESUME)
            self.state = 1801
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
            if la_ == 1:
                self.state = 1796
                self.match(VisualBasic6Parser.WS)
                self.state = 1799
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,269,self._ctx)
                if la_ == 1:
                    self.state = 1797
                    self.match(VisualBasic6Parser.NEXT)
                    pass

                elif la_ == 2:
                    self.state = 1798
                    self.ambiguousIdentifier()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(VisualBasic6Parser.RETURN, 0)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_returnStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStmt" ):
                listener.enterReturnStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStmt" ):
                listener.exitReturnStmt(self)




    def returnStmt(self):

        localctx = VisualBasic6Parser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_returnStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1803
            self.match(VisualBasic6Parser.RETURN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RmdirStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RMDIR(self):
            return self.getToken(VisualBasic6Parser.RMDIR, 0)

        def WS(self):
            return self.getToken(VisualBasic6Parser.WS, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_rmdirStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRmdirStmt" ):
                listener.enterRmdirStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRmdirStmt" ):
                listener.exitRmdirStmt(self)




    def rmdirStmt(self):

        localctx = VisualBasic6Parser.RmdirStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_rmdirStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1805
            self.match(VisualBasic6Parser.RMDIR)
            self.state = 1806
            self.match(VisualBasic6Parser.WS)
            self.state = 1807
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RsetStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RSET(self):
            return self.getToken(VisualBasic6Parser.RSET, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ImplicitCallStmt_InStmtContext,0)


        def EQ(self):
            return self.getToken(VisualBasic6Parser.EQ, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_rsetStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRsetStmt" ):
                listener.enterRsetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRsetStmt" ):
                listener.exitRsetStmt(self)




    def rsetStmt(self):

        localctx = VisualBasic6Parser.RsetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_rsetStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1809
            self.match(VisualBasic6Parser.RSET)
            self.state = 1810
            self.match(VisualBasic6Parser.WS)
            self.state = 1811
            self.implicitCallStmt_InStmt()
            self.state = 1813
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 1812
                self.match(VisualBasic6Parser.WS)


            self.state = 1815
            self.match(VisualBasic6Parser.EQ)
            self.state = 1817
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
            if la_ == 1:
                self.state = 1816
                self.match(VisualBasic6Parser.WS)


            self.state = 1819
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SavepictureStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAVEPICTURE(self):
            return self.getToken(VisualBasic6Parser.SAVEPICTURE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,i)


        def COMMA(self):
            return self.getToken(VisualBasic6Parser.COMMA, 0)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_savepictureStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSavepictureStmt" ):
                listener.enterSavepictureStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSavepictureStmt" ):
                listener.exitSavepictureStmt(self)




    def savepictureStmt(self):

        localctx = VisualBasic6Parser.SavepictureStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_savepictureStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1821
            self.match(VisualBasic6Parser.SAVEPICTURE)
            self.state = 1822
            self.match(VisualBasic6Parser.WS)
            self.state = 1823
            self.valueStmt(0)
            self.state = 1825
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 1824
                self.match(VisualBasic6Parser.WS)


            self.state = 1827
            self.match(VisualBasic6Parser.COMMA)
            self.state = 1829
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
            if la_ == 1:
                self.state = 1828
                self.match(VisualBasic6Parser.WS)


            self.state = 1831
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SaveSettingStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAVESETTING(self):
            return self.getToken(VisualBasic6Parser.SAVESETTING, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.COMMA)
            else:
                return self.getToken(VisualBasic6Parser.COMMA, i)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_saveSettingStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSaveSettingStmt" ):
                listener.enterSaveSettingStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSaveSettingStmt" ):
                listener.exitSaveSettingStmt(self)




    def saveSettingStmt(self):

        localctx = VisualBasic6Parser.SaveSettingStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_saveSettingStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1833
            self.match(VisualBasic6Parser.SAVESETTING)
            self.state = 1834
            self.match(VisualBasic6Parser.WS)
            self.state = 1835
            self.valueStmt(0)
            self.state = 1837
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 1836
                self.match(VisualBasic6Parser.WS)


            self.state = 1839
            self.match(VisualBasic6Parser.COMMA)
            self.state = 1841
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,276,self._ctx)
            if la_ == 1:
                self.state = 1840
                self.match(VisualBasic6Parser.WS)


            self.state = 1843
            self.valueStmt(0)
            self.state = 1845
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 1844
                self.match(VisualBasic6Parser.WS)


            self.state = 1847
            self.match(VisualBasic6Parser.COMMA)
            self.state = 1849
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
            if la_ == 1:
                self.state = 1848
                self.match(VisualBasic6Parser.WS)


            self.state = 1851
            self.valueStmt(0)
            self.state = 1853
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 1852
                self.match(VisualBasic6Parser.WS)


            self.state = 1855
            self.match(VisualBasic6Parser.COMMA)
            self.state = 1857
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,280,self._ctx)
            if la_ == 1:
                self.state = 1856
                self.match(VisualBasic6Parser.WS)


            self.state = 1859
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SeekStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEEK(self):
            return self.getToken(VisualBasic6Parser.SEEK, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,i)


        def COMMA(self):
            return self.getToken(VisualBasic6Parser.COMMA, 0)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_seekStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSeekStmt" ):
                listener.enterSeekStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSeekStmt" ):
                listener.exitSeekStmt(self)




    def seekStmt(self):

        localctx = VisualBasic6Parser.SeekStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_seekStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1861
            self.match(VisualBasic6Parser.SEEK)
            self.state = 1862
            self.match(VisualBasic6Parser.WS)
            self.state = 1863
            self.valueStmt(0)
            self.state = 1865
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 1864
                self.match(VisualBasic6Parser.WS)


            self.state = 1867
            self.match(VisualBasic6Parser.COMMA)
            self.state = 1869
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,282,self._ctx)
            if la_ == 1:
                self.state = 1868
                self.match(VisualBasic6Parser.WS)


            self.state = 1871
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectCaseStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(VisualBasic6Parser.SELECT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def CASE(self):
            return self.getToken(VisualBasic6Parser.CASE, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,0)


        def END_SELECT(self):
            return self.getToken(VisualBasic6Parser.END_SELECT, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.NEWLINE)
            else:
                return self.getToken(VisualBasic6Parser.NEWLINE, i)

        def sC_Case(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.SC_CaseContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.SC_CaseContext,i)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_selectCaseStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectCaseStmt" ):
                listener.enterSelectCaseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectCaseStmt" ):
                listener.exitSelectCaseStmt(self)




    def selectCaseStmt(self):

        localctx = VisualBasic6Parser.SelectCaseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_selectCaseStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1873
            self.match(VisualBasic6Parser.SELECT)
            self.state = 1874
            self.match(VisualBasic6Parser.WS)
            self.state = 1875
            self.match(VisualBasic6Parser.CASE)
            self.state = 1876
            self.match(VisualBasic6Parser.WS)
            self.state = 1877
            self.valueStmt(0)
            self.state = 1879 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1878
                self.match(VisualBasic6Parser.NEWLINE)
                self.state = 1881 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==VisualBasic6Parser.NEWLINE):
                    break

            self.state = 1886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VisualBasic6Parser.CASE:
                self.state = 1883
                self.sC_Case()
                self.state = 1888
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1890
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 1889
                self.match(VisualBasic6Parser.WS)


            self.state = 1892
            self.match(VisualBasic6Parser.END_SELECT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SC_CaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(VisualBasic6Parser.CASE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def sC_Cond(self):
            return self.getTypedRuleContext(VisualBasic6Parser.SC_CondContext,0)


        def block(self):
            return self.getTypedRuleContext(VisualBasic6Parser.BlockContext,0)


        def COLON(self):
            return self.getToken(VisualBasic6Parser.COLON, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.NEWLINE)
            else:
                return self.getToken(VisualBasic6Parser.NEWLINE, i)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_sC_Case

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSC_Case" ):
                listener.enterSC_Case(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSC_Case" ):
                listener.exitSC_Case(self)




    def sC_Case(self):

        localctx = VisualBasic6Parser.SC_CaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_sC_Case)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1894
            self.match(VisualBasic6Parser.CASE)
            self.state = 1895
            self.match(VisualBasic6Parser.WS)
            self.state = 1896
            self.sC_Cond()
            self.state = 1898
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,286,self._ctx)
            if la_ == 1:
                self.state = 1897
                self.match(VisualBasic6Parser.WS)


            self.state = 1914
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,290,self._ctx)
            if la_ == 1:
                self.state = 1901
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualBasic6Parser.COLON:
                    self.state = 1900
                    self.match(VisualBasic6Parser.COLON)


                self.state = 1906
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VisualBasic6Parser.NEWLINE:
                    self.state = 1903
                    self.match(VisualBasic6Parser.NEWLINE)
                    self.state = 1908
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 1910 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1909
                    self.match(VisualBasic6Parser.NEWLINE)
                    self.state = 1912 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==VisualBasic6Parser.NEWLINE):
                        break

                pass


            self.state = 1922
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,292,self._ctx)
            if la_ == 1:
                self.state = 1916
                self.block()
                self.state = 1918 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1917
                    self.match(VisualBasic6Parser.NEWLINE)
                    self.state = 1920 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==VisualBasic6Parser.NEWLINE):
                        break



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SC_CondContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_sC_Cond

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CaseCondExprContext(SC_CondContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualBasic6Parser.SC_CondContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def sC_CondExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.SC_CondExprContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.SC_CondExprContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.COMMA)
            else:
                return self.getToken(VisualBasic6Parser.COMMA, i)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseCondExpr" ):
                listener.enterCaseCondExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseCondExpr" ):
                listener.exitCaseCondExpr(self)


    class CaseCondElseContext(SC_CondContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualBasic6Parser.SC_CondContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ELSE(self):
            return self.getToken(VisualBasic6Parser.ELSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseCondElse" ):
                listener.enterCaseCondElse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseCondElse" ):
                listener.exitCaseCondElse(self)



    def sC_Cond(self):

        localctx = VisualBasic6Parser.SC_CondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_sC_Cond)
        self._la = 0 # Token type
        try:
            self.state = 1939
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,296,self._ctx)
            if la_ == 1:
                localctx = VisualBasic6Parser.CaseCondElseContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1924
                self.match(VisualBasic6Parser.ELSE)
                pass

            elif la_ == 2:
                localctx = VisualBasic6Parser.CaseCondExprContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1925
                self.sC_CondExpr()
                self.state = 1936
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,295,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1927
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualBasic6Parser.WS:
                            self.state = 1926
                            self.match(VisualBasic6Parser.WS)


                        self.state = 1929
                        self.match(VisualBasic6Parser.COMMA)
                        self.state = 1931
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,294,self._ctx)
                        if la_ == 1:
                            self.state = 1930
                            self.match(VisualBasic6Parser.WS)


                        self.state = 1933
                        self.sC_CondExpr() 
                    self.state = 1938
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,295,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SC_CondExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_sC_CondExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CaseCondExprValueContext(SC_CondExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualBasic6Parser.SC_CondExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseCondExprValue" ):
                listener.enterCaseCondExprValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseCondExprValue" ):
                listener.exitCaseCondExprValue(self)


    class CaseCondExprIsContext(SC_CondExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualBasic6Parser.SC_CondExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IS(self):
            return self.getToken(VisualBasic6Parser.IS, 0)
        def comparisonOperator(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ComparisonOperatorContext,0)

        def valueStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseCondExprIs" ):
                listener.enterCaseCondExprIs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseCondExprIs" ):
                listener.exitCaseCondExprIs(self)


    class CaseCondExprToContext(SC_CondExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualBasic6Parser.SC_CondExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)
        def TO(self):
            return self.getToken(VisualBasic6Parser.TO, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseCondExprTo" ):
                listener.enterCaseCondExprTo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseCondExprTo" ):
                listener.exitCaseCondExprTo(self)



    def sC_CondExpr(self):

        localctx = VisualBasic6Parser.SC_CondExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_sC_CondExpr)
        self._la = 0 # Token type
        try:
            self.state = 1958
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,299,self._ctx)
            if la_ == 1:
                localctx = VisualBasic6Parser.CaseCondExprIsContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1941
                self.match(VisualBasic6Parser.IS)
                self.state = 1943
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualBasic6Parser.WS:
                    self.state = 1942
                    self.match(VisualBasic6Parser.WS)


                self.state = 1945
                self.comparisonOperator()
                self.state = 1947
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,298,self._ctx)
                if la_ == 1:
                    self.state = 1946
                    self.match(VisualBasic6Parser.WS)


                self.state = 1949
                self.valueStmt(0)
                pass

            elif la_ == 2:
                localctx = VisualBasic6Parser.CaseCondExprValueContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1951
                self.valueStmt(0)
                pass

            elif la_ == 3:
                localctx = VisualBasic6Parser.CaseCondExprToContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1952
                self.valueStmt(0)
                self.state = 1953
                self.match(VisualBasic6Parser.WS)
                self.state = 1954
                self.match(VisualBasic6Parser.TO)
                self.state = 1955
                self.match(VisualBasic6Parser.WS)
                self.state = 1956
                self.valueStmt(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SendkeysStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SENDKEYS(self):
            return self.getToken(VisualBasic6Parser.SENDKEYS, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,i)


        def COMMA(self):
            return self.getToken(VisualBasic6Parser.COMMA, 0)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_sendkeysStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSendkeysStmt" ):
                listener.enterSendkeysStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSendkeysStmt" ):
                listener.exitSendkeysStmt(self)




    def sendkeysStmt(self):

        localctx = VisualBasic6Parser.SendkeysStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_sendkeysStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1960
            self.match(VisualBasic6Parser.SENDKEYS)
            self.state = 1961
            self.match(VisualBasic6Parser.WS)
            self.state = 1962
            self.valueStmt(0)
            self.state = 1971
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,302,self._ctx)
            if la_ == 1:
                self.state = 1964
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualBasic6Parser.WS:
                    self.state = 1963
                    self.match(VisualBasic6Parser.WS)


                self.state = 1966
                self.match(VisualBasic6Parser.COMMA)
                self.state = 1968
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
                if la_ == 1:
                    self.state = 1967
                    self.match(VisualBasic6Parser.WS)


                self.state = 1970
                self.valueStmt(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetattrStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SETATTR(self):
            return self.getToken(VisualBasic6Parser.SETATTR, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,i)


        def COMMA(self):
            return self.getToken(VisualBasic6Parser.COMMA, 0)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_setattrStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetattrStmt" ):
                listener.enterSetattrStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetattrStmt" ):
                listener.exitSetattrStmt(self)




    def setattrStmt(self):

        localctx = VisualBasic6Parser.SetattrStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_setattrStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1973
            self.match(VisualBasic6Parser.SETATTR)
            self.state = 1974
            self.match(VisualBasic6Parser.WS)
            self.state = 1975
            self.valueStmt(0)
            self.state = 1977
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 1976
                self.match(VisualBasic6Parser.WS)


            self.state = 1979
            self.match(VisualBasic6Parser.COMMA)
            self.state = 1981
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,304,self._ctx)
            if la_ == 1:
                self.state = 1980
                self.match(VisualBasic6Parser.WS)


            self.state = 1983
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(VisualBasic6Parser.SET, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ImplicitCallStmt_InStmtContext,0)


        def EQ(self):
            return self.getToken(VisualBasic6Parser.EQ, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_setStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetStmt" ):
                listener.enterSetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetStmt" ):
                listener.exitSetStmt(self)




    def setStmt(self):

        localctx = VisualBasic6Parser.SetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_setStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1985
            self.match(VisualBasic6Parser.SET)
            self.state = 1986
            self.match(VisualBasic6Parser.WS)
            self.state = 1987
            self.implicitCallStmt_InStmt()
            self.state = 1989
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 1988
                self.match(VisualBasic6Parser.WS)


            self.state = 1991
            self.match(VisualBasic6Parser.EQ)
            self.state = 1993
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,306,self._ctx)
            if la_ == 1:
                self.state = 1992
                self.match(VisualBasic6Parser.WS)


            self.state = 1995
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StopStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STOP(self):
            return self.getToken(VisualBasic6Parser.STOP, 0)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_stopStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStopStmt" ):
                listener.enterStopStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStopStmt" ):
                listener.exitStopStmt(self)




    def stopStmt(self):

        localctx = VisualBasic6Parser.StopStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_stopStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1997
            self.match(VisualBasic6Parser.STOP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUB(self):
            return self.getToken(VisualBasic6Parser.SUB, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(VisualBasic6Parser.AmbiguousIdentifierContext,0)


        def END_SUB(self):
            return self.getToken(VisualBasic6Parser.END_SUB, 0)

        def visibility(self):
            return self.getTypedRuleContext(VisualBasic6Parser.VisibilityContext,0)


        def STATIC(self):
            return self.getToken(VisualBasic6Parser.STATIC, 0)

        def argList(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ArgListContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.NEWLINE)
            else:
                return self.getToken(VisualBasic6Parser.NEWLINE, i)

        def block(self):
            return self.getTypedRuleContext(VisualBasic6Parser.BlockContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_subStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubStmt" ):
                listener.enterSubStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubStmt" ):
                listener.exitSubStmt(self)




    def subStmt(self):

        localctx = VisualBasic6Parser.SubStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_subStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2002
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (VisualBasic6Parser.FRIEND - 68)) | (1 << (VisualBasic6Parser.GLOBAL - 68)) | (1 << (VisualBasic6Parser.PRIVATE - 68)) | (1 << (VisualBasic6Parser.PUBLIC - 68)))) != 0):
                self.state = 1999
                self.visibility()
                self.state = 2000
                self.match(VisualBasic6Parser.WS)


            self.state = 2006
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.STATIC:
                self.state = 2004
                self.match(VisualBasic6Parser.STATIC)
                self.state = 2005
                self.match(VisualBasic6Parser.WS)


            self.state = 2008
            self.match(VisualBasic6Parser.SUB)
            self.state = 2009
            self.match(VisualBasic6Parser.WS)
            self.state = 2010
            self.ambiguousIdentifier()
            self.state = 2015
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.LPAREN or _la==VisualBasic6Parser.WS:
                self.state = 2012
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualBasic6Parser.WS:
                    self.state = 2011
                    self.match(VisualBasic6Parser.WS)


                self.state = 2014
                self.argList()


            self.state = 2018 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2017
                self.match(VisualBasic6Parser.NEWLINE)
                self.state = 2020 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==VisualBasic6Parser.NEWLINE):
                    break

            self.state = 2028
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualBasic6Parser.ACCESS) | (1 << VisualBasic6Parser.ADDRESSOF) | (1 << VisualBasic6Parser.ALIAS) | (1 << VisualBasic6Parser.AND) | (1 << VisualBasic6Parser.ATTRIBUTE) | (1 << VisualBasic6Parser.APPACTIVATE) | (1 << VisualBasic6Parser.APPEND) | (1 << VisualBasic6Parser.AS) | (1 << VisualBasic6Parser.BEEP) | (1 << VisualBasic6Parser.BEGIN) | (1 << VisualBasic6Parser.BINARY) | (1 << VisualBasic6Parser.BOOLEAN) | (1 << VisualBasic6Parser.BYVAL) | (1 << VisualBasic6Parser.BYREF) | (1 << VisualBasic6Parser.BYTE) | (1 << VisualBasic6Parser.CALL) | (1 << VisualBasic6Parser.CASE) | (1 << VisualBasic6Parser.CHDIR) | (1 << VisualBasic6Parser.CHDRIVE) | (1 << VisualBasic6Parser.CLASS) | (1 << VisualBasic6Parser.CLOSE) | (1 << VisualBasic6Parser.COLLECTION) | (1 << VisualBasic6Parser.CONST) | (1 << VisualBasic6Parser.DATE) | (1 << VisualBasic6Parser.DECLARE) | (1 << VisualBasic6Parser.DEFBOOL) | (1 << VisualBasic6Parser.DEFBYTE) | (1 << VisualBasic6Parser.DEFDATE) | (1 << VisualBasic6Parser.DEFDBL) | (1 << VisualBasic6Parser.DEFDEC) | (1 << VisualBasic6Parser.DEFCUR) | (1 << VisualBasic6Parser.DEFINT) | (1 << VisualBasic6Parser.DEFLNG) | (1 << VisualBasic6Parser.DEFOBJ) | (1 << VisualBasic6Parser.DEFSNG) | (1 << VisualBasic6Parser.DEFSTR) | (1 << VisualBasic6Parser.DEFVAR) | (1 << VisualBasic6Parser.DELETESETTING) | (1 << VisualBasic6Parser.DIM) | (1 << VisualBasic6Parser.DO) | (1 << VisualBasic6Parser.DOUBLE) | (1 << VisualBasic6Parser.EACH) | (1 << VisualBasic6Parser.ELSE) | (1 << VisualBasic6Parser.ELSEIF) | (1 << VisualBasic6Parser.END) | (1 << VisualBasic6Parser.ENUM) | (1 << VisualBasic6Parser.EQV) | (1 << VisualBasic6Parser.ERASE) | (1 << VisualBasic6Parser.ERROR) | (1 << VisualBasic6Parser.EVENT) | (1 << VisualBasic6Parser.EXIT_DO) | (1 << VisualBasic6Parser.EXIT_FOR) | (1 << VisualBasic6Parser.EXIT_FUNCTION))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualBasic6Parser.EXIT_PROPERTY - 64)) | (1 << (VisualBasic6Parser.EXIT_SUB - 64)) | (1 << (VisualBasic6Parser.FALSE - 64)) | (1 << (VisualBasic6Parser.FILECOPY - 64)) | (1 << (VisualBasic6Parser.FRIEND - 64)) | (1 << (VisualBasic6Parser.FOR - 64)) | (1 << (VisualBasic6Parser.FUNCTION - 64)) | (1 << (VisualBasic6Parser.GET - 64)) | (1 << (VisualBasic6Parser.GLOBAL - 64)) | (1 << (VisualBasic6Parser.GOSUB - 64)) | (1 << (VisualBasic6Parser.GOTO - 64)) | (1 << (VisualBasic6Parser.IF - 64)) | (1 << (VisualBasic6Parser.IMP - 64)) | (1 << (VisualBasic6Parser.IMPLEMENTS - 64)) | (1 << (VisualBasic6Parser.IN - 64)) | (1 << (VisualBasic6Parser.INPUT - 64)) | (1 << (VisualBasic6Parser.IS - 64)) | (1 << (VisualBasic6Parser.INTEGER - 64)) | (1 << (VisualBasic6Parser.KILL - 64)) | (1 << (VisualBasic6Parser.LOAD - 64)) | (1 << (VisualBasic6Parser.LOCK - 64)) | (1 << (VisualBasic6Parser.LONG - 64)) | (1 << (VisualBasic6Parser.LOOP - 64)) | (1 << (VisualBasic6Parser.LEN - 64)) | (1 << (VisualBasic6Parser.LET - 64)) | (1 << (VisualBasic6Parser.LIB - 64)) | (1 << (VisualBasic6Parser.LIKE - 64)) | (1 << (VisualBasic6Parser.LINE_INPUT - 64)) | (1 << (VisualBasic6Parser.LSET - 64)) | (1 << (VisualBasic6Parser.MACRO_IF - 64)) | (1 << (VisualBasic6Parser.ME - 64)) | (1 << (VisualBasic6Parser.MID - 64)) | (1 << (VisualBasic6Parser.MKDIR - 64)) | (1 << (VisualBasic6Parser.MOD - 64)) | (1 << (VisualBasic6Parser.NAME - 64)) | (1 << (VisualBasic6Parser.NEXT - 64)) | (1 << (VisualBasic6Parser.NEW - 64)) | (1 << (VisualBasic6Parser.NOT - 64)) | (1 << (VisualBasic6Parser.NOTHING - 64)) | (1 << (VisualBasic6Parser.NULL - 64)) | (1 << (VisualBasic6Parser.OBJECT - 64)) | (1 << (VisualBasic6Parser.ON - 64)) | (1 << (VisualBasic6Parser.ON_ERROR - 64)) | (1 << (VisualBasic6Parser.ON_LOCAL_ERROR - 64)) | (1 << (VisualBasic6Parser.OPEN - 64)) | (1 << (VisualBasic6Parser.OPTIONAL - 64)) | (1 << (VisualBasic6Parser.OR - 64)) | (1 << (VisualBasic6Parser.OUTPUT - 64)) | (1 << (VisualBasic6Parser.PARAMARRAY - 64)) | (1 << (VisualBasic6Parser.PRESERVE - 64)) | (1 << (VisualBasic6Parser.PRINT - 64)) | (1 << (VisualBasic6Parser.PRIVATE - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualBasic6Parser.PUBLIC - 129)) | (1 << (VisualBasic6Parser.PUT - 129)) | (1 << (VisualBasic6Parser.RANDOM - 129)) | (1 << (VisualBasic6Parser.RANDOMIZE - 129)) | (1 << (VisualBasic6Parser.RAISEEVENT - 129)) | (1 << (VisualBasic6Parser.READ - 129)) | (1 << (VisualBasic6Parser.REDIM - 129)) | (1 << (VisualBasic6Parser.REM - 129)) | (1 << (VisualBasic6Parser.RESET - 129)) | (1 << (VisualBasic6Parser.RESUME - 129)) | (1 << (VisualBasic6Parser.RETURN - 129)) | (1 << (VisualBasic6Parser.RMDIR - 129)) | (1 << (VisualBasic6Parser.RSET - 129)) | (1 << (VisualBasic6Parser.SAVEPICTURE - 129)) | (1 << (VisualBasic6Parser.SAVESETTING - 129)) | (1 << (VisualBasic6Parser.SEEK - 129)) | (1 << (VisualBasic6Parser.SELECT - 129)) | (1 << (VisualBasic6Parser.SENDKEYS - 129)) | (1 << (VisualBasic6Parser.SET - 129)) | (1 << (VisualBasic6Parser.SETATTR - 129)) | (1 << (VisualBasic6Parser.SHARED - 129)) | (1 << (VisualBasic6Parser.SINGLE - 129)) | (1 << (VisualBasic6Parser.SPC - 129)) | (1 << (VisualBasic6Parser.STATIC - 129)) | (1 << (VisualBasic6Parser.STEP - 129)) | (1 << (VisualBasic6Parser.STOP - 129)) | (1 << (VisualBasic6Parser.STRING - 129)) | (1 << (VisualBasic6Parser.SUB - 129)) | (1 << (VisualBasic6Parser.TAB - 129)) | (1 << (VisualBasic6Parser.TEXT - 129)) | (1 << (VisualBasic6Parser.THEN - 129)) | (1 << (VisualBasic6Parser.TIME - 129)) | (1 << (VisualBasic6Parser.TO - 129)) | (1 << (VisualBasic6Parser.TRUE - 129)) | (1 << (VisualBasic6Parser.TYPE - 129)) | (1 << (VisualBasic6Parser.TYPEOF - 129)) | (1 << (VisualBasic6Parser.UNLOAD - 129)) | (1 << (VisualBasic6Parser.UNLOCK - 129)) | (1 << (VisualBasic6Parser.UNTIL - 129)) | (1 << (VisualBasic6Parser.VARIANT - 129)) | (1 << (VisualBasic6Parser.VERSION - 129)) | (1 << (VisualBasic6Parser.WEND - 129)) | (1 << (VisualBasic6Parser.WHILE - 129)) | (1 << (VisualBasic6Parser.WIDTH - 129)) | (1 << (VisualBasic6Parser.WITH - 129)) | (1 << (VisualBasic6Parser.WITHEVENTS - 129)) | (1 << (VisualBasic6Parser.WRITE - 129)) | (1 << (VisualBasic6Parser.XOR - 129)) | (1 << (VisualBasic6Parser.DOT - 129)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 129)))) != 0) or ((((_la - 206)) & ~0x3f) == 0 and ((1 << (_la - 206)) & ((1 << (VisualBasic6Parser.L_SQUARE_BRACKET - 206)) | (1 << (VisualBasic6Parser.IDENTIFIER - 206)) | (1 << (VisualBasic6Parser.WS - 206)))) != 0):
                self.state = 2022
                self.block()
                self.state = 2024 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2023
                    self.match(VisualBasic6Parser.NEWLINE)
                    self.state = 2026 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==VisualBasic6Parser.NEWLINE):
                        break



            self.state = 2030
            self.match(VisualBasic6Parser.END_SUB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimeStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIME(self):
            return self.getToken(VisualBasic6Parser.TIME, 0)

        def EQ(self):
            return self.getToken(VisualBasic6Parser.EQ, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_timeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeStmt" ):
                listener.enterTimeStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeStmt" ):
                listener.exitTimeStmt(self)




    def timeStmt(self):

        localctx = VisualBasic6Parser.TimeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_timeStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2032
            self.match(VisualBasic6Parser.TIME)
            self.state = 2034
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 2033
                self.match(VisualBasic6Parser.WS)


            self.state = 2036
            self.match(VisualBasic6Parser.EQ)
            self.state = 2038
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,315,self._ctx)
            if la_ == 1:
                self.state = 2037
                self.match(VisualBasic6Parser.WS)


            self.state = 2040
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(VisualBasic6Parser.TYPE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(VisualBasic6Parser.AmbiguousIdentifierContext,0)


        def END_TYPE(self):
            return self.getToken(VisualBasic6Parser.END_TYPE, 0)

        def visibility(self):
            return self.getTypedRuleContext(VisualBasic6Parser.VisibilityContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.NEWLINE)
            else:
                return self.getToken(VisualBasic6Parser.NEWLINE, i)

        def typeStmt_Element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.TypeStmt_ElementContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.TypeStmt_ElementContext,i)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_typeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeStmt" ):
                listener.enterTypeStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeStmt" ):
                listener.exitTypeStmt(self)




    def typeStmt(self):

        localctx = VisualBasic6Parser.TypeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_typeStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2045
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (VisualBasic6Parser.FRIEND - 68)) | (1 << (VisualBasic6Parser.GLOBAL - 68)) | (1 << (VisualBasic6Parser.PRIVATE - 68)) | (1 << (VisualBasic6Parser.PUBLIC - 68)))) != 0):
                self.state = 2042
                self.visibility()
                self.state = 2043
                self.match(VisualBasic6Parser.WS)


            self.state = 2047
            self.match(VisualBasic6Parser.TYPE)
            self.state = 2048
            self.match(VisualBasic6Parser.WS)
            self.state = 2049
            self.ambiguousIdentifier()
            self.state = 2051 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2050
                self.match(VisualBasic6Parser.NEWLINE)
                self.state = 2053 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==VisualBasic6Parser.NEWLINE):
                    break

            self.state = 2058
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualBasic6Parser.ACCESS) | (1 << VisualBasic6Parser.ADDRESSOF) | (1 << VisualBasic6Parser.ALIAS) | (1 << VisualBasic6Parser.AND) | (1 << VisualBasic6Parser.ATTRIBUTE) | (1 << VisualBasic6Parser.APPACTIVATE) | (1 << VisualBasic6Parser.APPEND) | (1 << VisualBasic6Parser.AS) | (1 << VisualBasic6Parser.BEEP) | (1 << VisualBasic6Parser.BEGIN) | (1 << VisualBasic6Parser.BINARY) | (1 << VisualBasic6Parser.BOOLEAN) | (1 << VisualBasic6Parser.BYVAL) | (1 << VisualBasic6Parser.BYREF) | (1 << VisualBasic6Parser.BYTE) | (1 << VisualBasic6Parser.CALL) | (1 << VisualBasic6Parser.CASE) | (1 << VisualBasic6Parser.CHDIR) | (1 << VisualBasic6Parser.CHDRIVE) | (1 << VisualBasic6Parser.CLASS) | (1 << VisualBasic6Parser.CLOSE) | (1 << VisualBasic6Parser.COLLECTION) | (1 << VisualBasic6Parser.CONST) | (1 << VisualBasic6Parser.DATE) | (1 << VisualBasic6Parser.DECLARE) | (1 << VisualBasic6Parser.DEFBOOL) | (1 << VisualBasic6Parser.DEFBYTE) | (1 << VisualBasic6Parser.DEFDATE) | (1 << VisualBasic6Parser.DEFDBL) | (1 << VisualBasic6Parser.DEFDEC) | (1 << VisualBasic6Parser.DEFCUR) | (1 << VisualBasic6Parser.DEFINT) | (1 << VisualBasic6Parser.DEFLNG) | (1 << VisualBasic6Parser.DEFOBJ) | (1 << VisualBasic6Parser.DEFSNG) | (1 << VisualBasic6Parser.DEFSTR) | (1 << VisualBasic6Parser.DEFVAR) | (1 << VisualBasic6Parser.DELETESETTING) | (1 << VisualBasic6Parser.DIM) | (1 << VisualBasic6Parser.DO) | (1 << VisualBasic6Parser.DOUBLE) | (1 << VisualBasic6Parser.EACH) | (1 << VisualBasic6Parser.ELSE) | (1 << VisualBasic6Parser.ELSEIF) | (1 << VisualBasic6Parser.END) | (1 << VisualBasic6Parser.ENUM) | (1 << VisualBasic6Parser.EQV) | (1 << VisualBasic6Parser.ERASE) | (1 << VisualBasic6Parser.ERROR) | (1 << VisualBasic6Parser.EVENT))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (VisualBasic6Parser.FALSE - 66)) | (1 << (VisualBasic6Parser.FILECOPY - 66)) | (1 << (VisualBasic6Parser.FRIEND - 66)) | (1 << (VisualBasic6Parser.FOR - 66)) | (1 << (VisualBasic6Parser.FUNCTION - 66)) | (1 << (VisualBasic6Parser.GET - 66)) | (1 << (VisualBasic6Parser.GLOBAL - 66)) | (1 << (VisualBasic6Parser.GOSUB - 66)) | (1 << (VisualBasic6Parser.GOTO - 66)) | (1 << (VisualBasic6Parser.IF - 66)) | (1 << (VisualBasic6Parser.IMP - 66)) | (1 << (VisualBasic6Parser.IMPLEMENTS - 66)) | (1 << (VisualBasic6Parser.IN - 66)) | (1 << (VisualBasic6Parser.INPUT - 66)) | (1 << (VisualBasic6Parser.IS - 66)) | (1 << (VisualBasic6Parser.INTEGER - 66)) | (1 << (VisualBasic6Parser.KILL - 66)) | (1 << (VisualBasic6Parser.LOAD - 66)) | (1 << (VisualBasic6Parser.LOCK - 66)) | (1 << (VisualBasic6Parser.LONG - 66)) | (1 << (VisualBasic6Parser.LOOP - 66)) | (1 << (VisualBasic6Parser.LEN - 66)) | (1 << (VisualBasic6Parser.LET - 66)) | (1 << (VisualBasic6Parser.LIB - 66)) | (1 << (VisualBasic6Parser.LIKE - 66)) | (1 << (VisualBasic6Parser.LSET - 66)) | (1 << (VisualBasic6Parser.ME - 66)) | (1 << (VisualBasic6Parser.MID - 66)) | (1 << (VisualBasic6Parser.MKDIR - 66)) | (1 << (VisualBasic6Parser.MOD - 66)) | (1 << (VisualBasic6Parser.NAME - 66)) | (1 << (VisualBasic6Parser.NEXT - 66)) | (1 << (VisualBasic6Parser.NEW - 66)) | (1 << (VisualBasic6Parser.NOT - 66)) | (1 << (VisualBasic6Parser.NOTHING - 66)) | (1 << (VisualBasic6Parser.NULL - 66)) | (1 << (VisualBasic6Parser.OBJECT - 66)) | (1 << (VisualBasic6Parser.ON - 66)) | (1 << (VisualBasic6Parser.OPEN - 66)) | (1 << (VisualBasic6Parser.OPTIONAL - 66)) | (1 << (VisualBasic6Parser.OR - 66)) | (1 << (VisualBasic6Parser.OUTPUT - 66)) | (1 << (VisualBasic6Parser.PARAMARRAY - 66)) | (1 << (VisualBasic6Parser.PRESERVE - 66)) | (1 << (VisualBasic6Parser.PRINT - 66)) | (1 << (VisualBasic6Parser.PRIVATE - 66)) | (1 << (VisualBasic6Parser.PUBLIC - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (VisualBasic6Parser.PUT - 130)) | (1 << (VisualBasic6Parser.RANDOM - 130)) | (1 << (VisualBasic6Parser.RANDOMIZE - 130)) | (1 << (VisualBasic6Parser.RAISEEVENT - 130)) | (1 << (VisualBasic6Parser.READ - 130)) | (1 << (VisualBasic6Parser.REDIM - 130)) | (1 << (VisualBasic6Parser.REM - 130)) | (1 << (VisualBasic6Parser.RESET - 130)) | (1 << (VisualBasic6Parser.RESUME - 130)) | (1 << (VisualBasic6Parser.RETURN - 130)) | (1 << (VisualBasic6Parser.RMDIR - 130)) | (1 << (VisualBasic6Parser.RSET - 130)) | (1 << (VisualBasic6Parser.SAVEPICTURE - 130)) | (1 << (VisualBasic6Parser.SAVESETTING - 130)) | (1 << (VisualBasic6Parser.SEEK - 130)) | (1 << (VisualBasic6Parser.SELECT - 130)) | (1 << (VisualBasic6Parser.SENDKEYS - 130)) | (1 << (VisualBasic6Parser.SET - 130)) | (1 << (VisualBasic6Parser.SETATTR - 130)) | (1 << (VisualBasic6Parser.SHARED - 130)) | (1 << (VisualBasic6Parser.SINGLE - 130)) | (1 << (VisualBasic6Parser.SPC - 130)) | (1 << (VisualBasic6Parser.STATIC - 130)) | (1 << (VisualBasic6Parser.STEP - 130)) | (1 << (VisualBasic6Parser.STOP - 130)) | (1 << (VisualBasic6Parser.STRING - 130)) | (1 << (VisualBasic6Parser.SUB - 130)) | (1 << (VisualBasic6Parser.TAB - 130)) | (1 << (VisualBasic6Parser.TEXT - 130)) | (1 << (VisualBasic6Parser.THEN - 130)) | (1 << (VisualBasic6Parser.TIME - 130)) | (1 << (VisualBasic6Parser.TO - 130)) | (1 << (VisualBasic6Parser.TRUE - 130)) | (1 << (VisualBasic6Parser.TYPE - 130)) | (1 << (VisualBasic6Parser.TYPEOF - 130)) | (1 << (VisualBasic6Parser.UNLOAD - 130)) | (1 << (VisualBasic6Parser.UNLOCK - 130)) | (1 << (VisualBasic6Parser.UNTIL - 130)) | (1 << (VisualBasic6Parser.VARIANT - 130)) | (1 << (VisualBasic6Parser.VERSION - 130)) | (1 << (VisualBasic6Parser.WEND - 130)) | (1 << (VisualBasic6Parser.WHILE - 130)) | (1 << (VisualBasic6Parser.WIDTH - 130)) | (1 << (VisualBasic6Parser.WITH - 130)) | (1 << (VisualBasic6Parser.WITHEVENTS - 130)) | (1 << (VisualBasic6Parser.WRITE - 130)) | (1 << (VisualBasic6Parser.XOR - 130)))) != 0) or _la==VisualBasic6Parser.L_SQUARE_BRACKET or _la==VisualBasic6Parser.IDENTIFIER:
                self.state = 2055
                self.typeStmt_Element()
                self.state = 2060
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2061
            self.match(VisualBasic6Parser.END_TYPE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeStmt_ElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(VisualBasic6Parser.AmbiguousIdentifierContext,0)


        def LPAREN(self):
            return self.getToken(VisualBasic6Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(VisualBasic6Parser.RPAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def asTypeClause(self):
            return self.getTypedRuleContext(VisualBasic6Parser.AsTypeClauseContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.NEWLINE)
            else:
                return self.getToken(VisualBasic6Parser.NEWLINE, i)

        def subscripts(self):
            return self.getTypedRuleContext(VisualBasic6Parser.SubscriptsContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_typeStmt_Element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeStmt_Element" ):
                listener.enterTypeStmt_Element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeStmt_Element" ):
                listener.exitTypeStmt_Element(self)




    def typeStmt_Element(self):

        localctx = VisualBasic6Parser.TypeStmt_ElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_typeStmt_Element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2063
            self.ambiguousIdentifier()
            self.state = 2078
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,323,self._ctx)
            if la_ == 1:
                self.state = 2065
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualBasic6Parser.WS:
                    self.state = 2064
                    self.match(VisualBasic6Parser.WS)


                self.state = 2067
                self.match(VisualBasic6Parser.LPAREN)
                self.state = 2072
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,321,self._ctx)
                if la_ == 1:
                    self.state = 2069
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,320,self._ctx)
                    if la_ == 1:
                        self.state = 2068
                        self.match(VisualBasic6Parser.WS)


                    self.state = 2071
                    self.subscripts()


                self.state = 2075
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualBasic6Parser.WS:
                    self.state = 2074
                    self.match(VisualBasic6Parser.WS)


                self.state = 2077
                self.match(VisualBasic6Parser.RPAREN)


            self.state = 2082
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 2080
                self.match(VisualBasic6Parser.WS)
                self.state = 2081
                self.asTypeClause()


            self.state = 2085 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2084
                self.match(VisualBasic6Parser.NEWLINE)
                self.state = 2087 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==VisualBasic6Parser.NEWLINE):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeOfStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPEOF(self):
            return self.getToken(VisualBasic6Parser.TYPEOF, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def valueStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,0)


        def IS(self):
            return self.getToken(VisualBasic6Parser.IS, 0)

        def type(self):
            return self.getTypedRuleContext(VisualBasic6Parser.TypeContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_typeOfStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeOfStmt" ):
                listener.enterTypeOfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeOfStmt" ):
                listener.exitTypeOfStmt(self)




    def typeOfStmt(self):

        localctx = VisualBasic6Parser.TypeOfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_typeOfStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2089
            self.match(VisualBasic6Parser.TYPEOF)
            self.state = 2090
            self.match(VisualBasic6Parser.WS)
            self.state = 2091
            self.valueStmt(0)
            self.state = 2096
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,326,self._ctx)
            if la_ == 1:
                self.state = 2092
                self.match(VisualBasic6Parser.WS)
                self.state = 2093
                self.match(VisualBasic6Parser.IS)
                self.state = 2094
                self.match(VisualBasic6Parser.WS)
                self.state = 2095
                self.type()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnloadStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNLOAD(self):
            return self.getToken(VisualBasic6Parser.UNLOAD, 0)

        def WS(self):
            return self.getToken(VisualBasic6Parser.WS, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_unloadStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnloadStmt" ):
                listener.enterUnloadStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnloadStmt" ):
                listener.exitUnloadStmt(self)




    def unloadStmt(self):

        localctx = VisualBasic6Parser.UnloadStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_unloadStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2098
            self.match(VisualBasic6Parser.UNLOAD)
            self.state = 2099
            self.match(VisualBasic6Parser.WS)
            self.state = 2100
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnlockStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNLOCK(self):
            return self.getToken(VisualBasic6Parser.UNLOCK, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,i)


        def COMMA(self):
            return self.getToken(VisualBasic6Parser.COMMA, 0)

        def TO(self):
            return self.getToken(VisualBasic6Parser.TO, 0)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_unlockStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnlockStmt" ):
                listener.enterUnlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnlockStmt" ):
                listener.exitUnlockStmt(self)




    def unlockStmt(self):

        localctx = VisualBasic6Parser.UnlockStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_unlockStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2102
            self.match(VisualBasic6Parser.UNLOCK)
            self.state = 2103
            self.match(VisualBasic6Parser.WS)
            self.state = 2104
            self.valueStmt(0)
            self.state = 2119
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,330,self._ctx)
            if la_ == 1:
                self.state = 2106
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualBasic6Parser.WS:
                    self.state = 2105
                    self.match(VisualBasic6Parser.WS)


                self.state = 2108
                self.match(VisualBasic6Parser.COMMA)
                self.state = 2110
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,328,self._ctx)
                if la_ == 1:
                    self.state = 2109
                    self.match(VisualBasic6Parser.WS)


                self.state = 2112
                self.valueStmt(0)
                self.state = 2117
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,329,self._ctx)
                if la_ == 1:
                    self.state = 2113
                    self.match(VisualBasic6Parser.WS)
                    self.state = 2114
                    self.match(VisualBasic6Parser.TO)
                    self.state = 2115
                    self.match(VisualBasic6Parser.WS)
                    self.state = 2116
                    self.valueStmt(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ValueStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_valueStmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class VsStructContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualBasic6Parser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(VisualBasic6Parser.LPAREN, 0)
        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,i)

        def RPAREN(self):
            return self.getToken(VisualBasic6Parser.RPAREN, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.COMMA)
            else:
                return self.getToken(VisualBasic6Parser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsStruct" ):
                listener.enterVsStruct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsStruct" ):
                listener.exitVsStruct(self)


    class VsAddContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualBasic6Parser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,i)

        def PLUS(self):
            return self.getToken(VisualBasic6Parser.PLUS, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsAdd" ):
                listener.enterVsAdd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsAdd" ):
                listener.exitVsAdd(self)


    class VsLtContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualBasic6Parser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,i)

        def LT(self):
            return self.getToken(VisualBasic6Parser.LT, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsLt" ):
                listener.enterVsLt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsLt" ):
                listener.exitVsLt(self)


    class VsAddressOfContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualBasic6Parser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ADDRESSOF(self):
            return self.getToken(VisualBasic6Parser.ADDRESSOF, 0)
        def WS(self):
            return self.getToken(VisualBasic6Parser.WS, 0)
        def valueStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsAddressOf" ):
                listener.enterVsAddressOf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsAddressOf" ):
                listener.exitVsAddressOf(self)


    class VsNewContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualBasic6Parser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(VisualBasic6Parser.NEW, 0)
        def WS(self):
            return self.getToken(VisualBasic6Parser.WS, 0)
        def valueStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsNew" ):
                listener.enterVsNew(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsNew" ):
                listener.exitVsNew(self)


    class VsMultContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualBasic6Parser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,i)

        def MULT(self):
            return self.getToken(VisualBasic6Parser.MULT, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsMult" ):
                listener.enterVsMult(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsMult" ):
                listener.exitVsMult(self)


    class VsNegationContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualBasic6Parser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MINUS(self):
            return self.getToken(VisualBasic6Parser.MINUS, 0)
        def valueStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,0)

        def WS(self):
            return self.getToken(VisualBasic6Parser.WS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsNegation" ):
                listener.enterVsNegation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsNegation" ):
                listener.exitVsNegation(self)


    class VsAssignContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualBasic6Parser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ImplicitCallStmt_InStmtContext,0)

        def ASSIGN(self):
            return self.getToken(VisualBasic6Parser.ASSIGN, 0)
        def valueStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsAssign" ):
                listener.enterVsAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsAssign" ):
                listener.exitVsAssign(self)


    class VsDivContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualBasic6Parser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,i)

        def DIV(self):
            return self.getToken(VisualBasic6Parser.DIV, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsDiv" ):
                listener.enterVsDiv(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsDiv" ):
                listener.exitVsDiv(self)


    class VsLikeContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualBasic6Parser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)
        def LIKE(self):
            return self.getToken(VisualBasic6Parser.LIKE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsLike" ):
                listener.enterVsLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsLike" ):
                listener.exitVsLike(self)


    class VsPlusContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualBasic6Parser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PLUS(self):
            return self.getToken(VisualBasic6Parser.PLUS, 0)
        def valueStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,0)

        def WS(self):
            return self.getToken(VisualBasic6Parser.WS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsPlus" ):
                listener.enterVsPlus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsPlus" ):
                listener.exitVsPlus(self)


    class VsNotContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualBasic6Parser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(VisualBasic6Parser.NOT, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)
        def valueStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,0)

        def LPAREN(self):
            return self.getToken(VisualBasic6Parser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(VisualBasic6Parser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsNot" ):
                listener.enterVsNot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsNot" ):
                listener.exitVsNot(self)


    class VsGeqContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualBasic6Parser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,i)

        def GEQ(self):
            return self.getToken(VisualBasic6Parser.GEQ, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsGeq" ):
                listener.enterVsGeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsGeq" ):
                listener.exitVsGeq(self)


    class VsTypeOfContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualBasic6Parser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typeOfStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.TypeOfStmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsTypeOf" ):
                listener.enterVsTypeOf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsTypeOf" ):
                listener.exitVsTypeOf(self)


    class VsICSContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualBasic6Parser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ImplicitCallStmt_InStmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsICS" ):
                listener.enterVsICS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsICS" ):
                listener.exitVsICS(self)


    class VsNeqContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualBasic6Parser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,i)

        def NEQ(self):
            return self.getToken(VisualBasic6Parser.NEQ, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsNeq" ):
                listener.enterVsNeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsNeq" ):
                listener.exitVsNeq(self)


    class VsXorContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualBasic6Parser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,i)

        def XOR(self):
            return self.getToken(VisualBasic6Parser.XOR, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsXor" ):
                listener.enterVsXor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsXor" ):
                listener.exitVsXor(self)


    class VsAndContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualBasic6Parser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,i)

        def AND(self):
            return self.getToken(VisualBasic6Parser.AND, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsAnd" ):
                listener.enterVsAnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsAnd" ):
                listener.exitVsAnd(self)


    class VsPowContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualBasic6Parser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,i)

        def POW(self):
            return self.getToken(VisualBasic6Parser.POW, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsPow" ):
                listener.enterVsPow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsPow" ):
                listener.exitVsPow(self)


    class VsLeqContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualBasic6Parser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,i)

        def LEQ(self):
            return self.getToken(VisualBasic6Parser.LEQ, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsLeq" ):
                listener.enterVsLeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsLeq" ):
                listener.exitVsLeq(self)


    class VsIsContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualBasic6Parser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)
        def IS(self):
            return self.getToken(VisualBasic6Parser.IS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsIs" ):
                listener.enterVsIs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsIs" ):
                listener.exitVsIs(self)


    class VsModContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualBasic6Parser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,i)

        def MOD(self):
            return self.getToken(VisualBasic6Parser.MOD, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsMod" ):
                listener.enterVsMod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsMod" ):
                listener.exitVsMod(self)


    class VsAmpContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualBasic6Parser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,i)

        def AMPERSAND(self):
            return self.getToken(VisualBasic6Parser.AMPERSAND, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsAmp" ):
                listener.enterVsAmp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsAmp" ):
                listener.exitVsAmp(self)


    class VsOrContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualBasic6Parser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,i)

        def OR(self):
            return self.getToken(VisualBasic6Parser.OR, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsOr" ):
                listener.enterVsOr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsOr" ):
                listener.exitVsOr(self)


    class VsMinusContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualBasic6Parser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,i)

        def MINUS(self):
            return self.getToken(VisualBasic6Parser.MINUS, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsMinus" ):
                listener.enterVsMinus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsMinus" ):
                listener.exitVsMinus(self)


    class VsLiteralContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualBasic6Parser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(VisualBasic6Parser.LiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsLiteral" ):
                listener.enterVsLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsLiteral" ):
                listener.exitVsLiteral(self)


    class VsEqvContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualBasic6Parser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,i)

        def EQV(self):
            return self.getToken(VisualBasic6Parser.EQV, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsEqv" ):
                listener.enterVsEqv(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsEqv" ):
                listener.exitVsEqv(self)


    class VsImpContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualBasic6Parser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,i)

        def IMP(self):
            return self.getToken(VisualBasic6Parser.IMP, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsImp" ):
                listener.enterVsImp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsImp" ):
                listener.exitVsImp(self)


    class VsGtContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualBasic6Parser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,i)

        def GT(self):
            return self.getToken(VisualBasic6Parser.GT, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsGt" ):
                listener.enterVsGt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsGt" ):
                listener.exitVsGt(self)


    class VsEqContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualBasic6Parser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,i)

        def EQ(self):
            return self.getToken(VisualBasic6Parser.EQ, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsEq" ):
                listener.enterVsEq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsEq" ):
                listener.exitVsEq(self)


    class VsMidContext(ValueStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VisualBasic6Parser.ValueStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def midStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.MidStmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVsMid" ):
                listener.enterVsMid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVsMid" ):
                listener.exitVsMid(self)



    def valueStmt(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = VisualBasic6Parser.ValueStmtContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 220
        self.enterRecursionRule(localctx, 220, self.RULE_valueStmt, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2190
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,343,self._ctx)
            if la_ == 1:
                localctx = VisualBasic6Parser.VsLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2122
                self.literal()
                pass

            elif la_ == 2:
                localctx = VisualBasic6Parser.VsStructContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2123
                self.match(VisualBasic6Parser.LPAREN)
                self.state = 2125
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,331,self._ctx)
                if la_ == 1:
                    self.state = 2124
                    self.match(VisualBasic6Parser.WS)


                self.state = 2127
                self.valueStmt(0)
                self.state = 2138
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,334,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2129
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualBasic6Parser.WS:
                            self.state = 2128
                            self.match(VisualBasic6Parser.WS)


                        self.state = 2131
                        self.match(VisualBasic6Parser.COMMA)
                        self.state = 2133
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,333,self._ctx)
                        if la_ == 1:
                            self.state = 2132
                            self.match(VisualBasic6Parser.WS)


                        self.state = 2135
                        self.valueStmt(0) 
                    self.state = 2140
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,334,self._ctx)

                self.state = 2142
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualBasic6Parser.WS:
                    self.state = 2141
                    self.match(VisualBasic6Parser.WS)


                self.state = 2144
                self.match(VisualBasic6Parser.RPAREN)
                pass

            elif la_ == 3:
                localctx = VisualBasic6Parser.VsNewContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2146
                self.match(VisualBasic6Parser.NEW)
                self.state = 2147
                self.match(VisualBasic6Parser.WS)
                self.state = 2148
                self.valueStmt(29)
                pass

            elif la_ == 4:
                localctx = VisualBasic6Parser.VsTypeOfContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2149
                self.typeOfStmt()
                pass

            elif la_ == 5:
                localctx = VisualBasic6Parser.VsAddressOfContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2150
                self.match(VisualBasic6Parser.ADDRESSOF)
                self.state = 2151
                self.match(VisualBasic6Parser.WS)
                self.state = 2152
                self.valueStmt(27)
                pass

            elif la_ == 6:
                localctx = VisualBasic6Parser.VsAssignContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2153
                self.implicitCallStmt_InStmt()
                self.state = 2155
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualBasic6Parser.WS:
                    self.state = 2154
                    self.match(VisualBasic6Parser.WS)


                self.state = 2157
                self.match(VisualBasic6Parser.ASSIGN)
                self.state = 2159
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,337,self._ctx)
                if la_ == 1:
                    self.state = 2158
                    self.match(VisualBasic6Parser.WS)


                self.state = 2161
                self.valueStmt(26)
                pass

            elif la_ == 7:
                localctx = VisualBasic6Parser.VsNegationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2163
                self.match(VisualBasic6Parser.MINUS)
                self.state = 2165
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,338,self._ctx)
                if la_ == 1:
                    self.state = 2164
                    self.match(VisualBasic6Parser.WS)


                self.state = 2167
                self.valueStmt(24)
                pass

            elif la_ == 8:
                localctx = VisualBasic6Parser.VsPlusContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2168
                self.match(VisualBasic6Parser.PLUS)
                self.state = 2170
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,339,self._ctx)
                if la_ == 1:
                    self.state = 2169
                    self.match(VisualBasic6Parser.WS)


                self.state = 2172
                self.valueStmt(23)
                pass

            elif la_ == 9:
                localctx = VisualBasic6Parser.VsNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2173
                self.match(VisualBasic6Parser.NOT)
                self.state = 2186
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VisualBasic6Parser.WS]:
                    self.state = 2174
                    self.match(VisualBasic6Parser.WS)
                    self.state = 2175
                    self.valueStmt(0)
                    pass
                elif token in [VisualBasic6Parser.LPAREN]:
                    self.state = 2176
                    self.match(VisualBasic6Parser.LPAREN)
                    self.state = 2178
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,340,self._ctx)
                    if la_ == 1:
                        self.state = 2177
                        self.match(VisualBasic6Parser.WS)


                    self.state = 2180
                    self.valueStmt(0)
                    self.state = 2182
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualBasic6Parser.WS:
                        self.state = 2181
                        self.match(VisualBasic6Parser.WS)


                    self.state = 2184
                    self.match(VisualBasic6Parser.RPAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 10:
                localctx = VisualBasic6Parser.VsICSContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2188
                self.implicitCallStmt_InStmt()
                pass

            elif la_ == 11:
                localctx = VisualBasic6Parser.VsMidContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2189
                self.midStmt()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2366
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,381,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2364
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,380,self._ctx)
                    if la_ == 1:
                        localctx = VisualBasic6Parser.VsPowContext(self, VisualBasic6Parser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 2192
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 2194
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualBasic6Parser.WS:
                            self.state = 2193
                            self.match(VisualBasic6Parser.WS)


                        self.state = 2196
                        self.match(VisualBasic6Parser.POW)
                        self.state = 2198
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,345,self._ctx)
                        if la_ == 1:
                            self.state = 2197
                            self.match(VisualBasic6Parser.WS)


                        self.state = 2200
                        self.valueStmt(26)
                        pass

                    elif la_ == 2:
                        localctx = VisualBasic6Parser.VsDivContext(self, VisualBasic6Parser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 2201
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 2203
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualBasic6Parser.WS:
                            self.state = 2202
                            self.match(VisualBasic6Parser.WS)


                        self.state = 2205
                        self.match(VisualBasic6Parser.DIV)
                        self.state = 2207
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,347,self._ctx)
                        if la_ == 1:
                            self.state = 2206
                            self.match(VisualBasic6Parser.WS)


                        self.state = 2209
                        self.valueStmt(23)
                        pass

                    elif la_ == 3:
                        localctx = VisualBasic6Parser.VsMultContext(self, VisualBasic6Parser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 2210
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 2212
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualBasic6Parser.WS:
                            self.state = 2211
                            self.match(VisualBasic6Parser.WS)


                        self.state = 2214
                        self.match(VisualBasic6Parser.MULT)
                        self.state = 2216
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,349,self._ctx)
                        if la_ == 1:
                            self.state = 2215
                            self.match(VisualBasic6Parser.WS)


                        self.state = 2218
                        self.valueStmt(22)
                        pass

                    elif la_ == 4:
                        localctx = VisualBasic6Parser.VsModContext(self, VisualBasic6Parser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 2219
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 2221
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualBasic6Parser.WS:
                            self.state = 2220
                            self.match(VisualBasic6Parser.WS)


                        self.state = 2223
                        self.match(VisualBasic6Parser.MOD)
                        self.state = 2225
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,351,self._ctx)
                        if la_ == 1:
                            self.state = 2224
                            self.match(VisualBasic6Parser.WS)


                        self.state = 2227
                        self.valueStmt(21)
                        pass

                    elif la_ == 5:
                        localctx = VisualBasic6Parser.VsAddContext(self, VisualBasic6Parser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 2228
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 2230
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualBasic6Parser.WS:
                            self.state = 2229
                            self.match(VisualBasic6Parser.WS)


                        self.state = 2232
                        self.match(VisualBasic6Parser.PLUS)
                        self.state = 2234
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,353,self._ctx)
                        if la_ == 1:
                            self.state = 2233
                            self.match(VisualBasic6Parser.WS)


                        self.state = 2236
                        self.valueStmt(20)
                        pass

                    elif la_ == 6:
                        localctx = VisualBasic6Parser.VsMinusContext(self, VisualBasic6Parser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 2237
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 2239
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualBasic6Parser.WS:
                            self.state = 2238
                            self.match(VisualBasic6Parser.WS)


                        self.state = 2241
                        self.match(VisualBasic6Parser.MINUS)
                        self.state = 2243
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,355,self._ctx)
                        if la_ == 1:
                            self.state = 2242
                            self.match(VisualBasic6Parser.WS)


                        self.state = 2245
                        self.valueStmt(19)
                        pass

                    elif la_ == 7:
                        localctx = VisualBasic6Parser.VsAmpContext(self, VisualBasic6Parser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 2246
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 2248
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualBasic6Parser.WS:
                            self.state = 2247
                            self.match(VisualBasic6Parser.WS)


                        self.state = 2250
                        self.match(VisualBasic6Parser.AMPERSAND)
                        self.state = 2252
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,357,self._ctx)
                        if la_ == 1:
                            self.state = 2251
                            self.match(VisualBasic6Parser.WS)


                        self.state = 2254
                        self.valueStmt(18)
                        pass

                    elif la_ == 8:
                        localctx = VisualBasic6Parser.VsEqContext(self, VisualBasic6Parser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 2255
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 2257
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualBasic6Parser.WS:
                            self.state = 2256
                            self.match(VisualBasic6Parser.WS)


                        self.state = 2259
                        self.match(VisualBasic6Parser.EQ)
                        self.state = 2261
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,359,self._ctx)
                        if la_ == 1:
                            self.state = 2260
                            self.match(VisualBasic6Parser.WS)


                        self.state = 2263
                        self.valueStmt(17)
                        pass

                    elif la_ == 9:
                        localctx = VisualBasic6Parser.VsNeqContext(self, VisualBasic6Parser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 2264
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 2266
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualBasic6Parser.WS:
                            self.state = 2265
                            self.match(VisualBasic6Parser.WS)


                        self.state = 2268
                        self.match(VisualBasic6Parser.NEQ)
                        self.state = 2270
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,361,self._ctx)
                        if la_ == 1:
                            self.state = 2269
                            self.match(VisualBasic6Parser.WS)


                        self.state = 2272
                        self.valueStmt(16)
                        pass

                    elif la_ == 10:
                        localctx = VisualBasic6Parser.VsLtContext(self, VisualBasic6Parser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 2273
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 2275
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualBasic6Parser.WS:
                            self.state = 2274
                            self.match(VisualBasic6Parser.WS)


                        self.state = 2277
                        self.match(VisualBasic6Parser.LT)
                        self.state = 2279
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,363,self._ctx)
                        if la_ == 1:
                            self.state = 2278
                            self.match(VisualBasic6Parser.WS)


                        self.state = 2281
                        self.valueStmt(15)
                        pass

                    elif la_ == 11:
                        localctx = VisualBasic6Parser.VsGtContext(self, VisualBasic6Parser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 2282
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 2284
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualBasic6Parser.WS:
                            self.state = 2283
                            self.match(VisualBasic6Parser.WS)


                        self.state = 2286
                        self.match(VisualBasic6Parser.GT)
                        self.state = 2288
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,365,self._ctx)
                        if la_ == 1:
                            self.state = 2287
                            self.match(VisualBasic6Parser.WS)


                        self.state = 2290
                        self.valueStmt(14)
                        pass

                    elif la_ == 12:
                        localctx = VisualBasic6Parser.VsLeqContext(self, VisualBasic6Parser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 2291
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 2293
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualBasic6Parser.WS:
                            self.state = 2292
                            self.match(VisualBasic6Parser.WS)


                        self.state = 2295
                        self.match(VisualBasic6Parser.LEQ)
                        self.state = 2297
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,367,self._ctx)
                        if la_ == 1:
                            self.state = 2296
                            self.match(VisualBasic6Parser.WS)


                        self.state = 2299
                        self.valueStmt(13)
                        pass

                    elif la_ == 13:
                        localctx = VisualBasic6Parser.VsGeqContext(self, VisualBasic6Parser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 2300
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 2302
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualBasic6Parser.WS:
                            self.state = 2301
                            self.match(VisualBasic6Parser.WS)


                        self.state = 2304
                        self.match(VisualBasic6Parser.GEQ)
                        self.state = 2306
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,369,self._ctx)
                        if la_ == 1:
                            self.state = 2305
                            self.match(VisualBasic6Parser.WS)


                        self.state = 2308
                        self.valueStmt(12)
                        pass

                    elif la_ == 14:
                        localctx = VisualBasic6Parser.VsLikeContext(self, VisualBasic6Parser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 2309
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 2310
                        self.match(VisualBasic6Parser.WS)
                        self.state = 2311
                        self.match(VisualBasic6Parser.LIKE)
                        self.state = 2312
                        self.match(VisualBasic6Parser.WS)
                        self.state = 2313
                        self.valueStmt(11)
                        pass

                    elif la_ == 15:
                        localctx = VisualBasic6Parser.VsIsContext(self, VisualBasic6Parser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 2314
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 2315
                        self.match(VisualBasic6Parser.WS)
                        self.state = 2316
                        self.match(VisualBasic6Parser.IS)
                        self.state = 2317
                        self.match(VisualBasic6Parser.WS)
                        self.state = 2318
                        self.valueStmt(10)
                        pass

                    elif la_ == 16:
                        localctx = VisualBasic6Parser.VsAndContext(self, VisualBasic6Parser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 2319
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 2321
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualBasic6Parser.WS:
                            self.state = 2320
                            self.match(VisualBasic6Parser.WS)


                        self.state = 2323
                        self.match(VisualBasic6Parser.AND)
                        self.state = 2325
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,371,self._ctx)
                        if la_ == 1:
                            self.state = 2324
                            self.match(VisualBasic6Parser.WS)


                        self.state = 2327
                        self.valueStmt(8)
                        pass

                    elif la_ == 17:
                        localctx = VisualBasic6Parser.VsOrContext(self, VisualBasic6Parser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 2328
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 2330
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualBasic6Parser.WS:
                            self.state = 2329
                            self.match(VisualBasic6Parser.WS)


                        self.state = 2332
                        self.match(VisualBasic6Parser.OR)
                        self.state = 2334
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,373,self._ctx)
                        if la_ == 1:
                            self.state = 2333
                            self.match(VisualBasic6Parser.WS)


                        self.state = 2336
                        self.valueStmt(7)
                        pass

                    elif la_ == 18:
                        localctx = VisualBasic6Parser.VsXorContext(self, VisualBasic6Parser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 2337
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 2339
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualBasic6Parser.WS:
                            self.state = 2338
                            self.match(VisualBasic6Parser.WS)


                        self.state = 2341
                        self.match(VisualBasic6Parser.XOR)
                        self.state = 2343
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,375,self._ctx)
                        if la_ == 1:
                            self.state = 2342
                            self.match(VisualBasic6Parser.WS)


                        self.state = 2345
                        self.valueStmt(6)
                        pass

                    elif la_ == 19:
                        localctx = VisualBasic6Parser.VsEqvContext(self, VisualBasic6Parser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 2346
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 2348
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualBasic6Parser.WS:
                            self.state = 2347
                            self.match(VisualBasic6Parser.WS)


                        self.state = 2350
                        self.match(VisualBasic6Parser.EQV)
                        self.state = 2352
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,377,self._ctx)
                        if la_ == 1:
                            self.state = 2351
                            self.match(VisualBasic6Parser.WS)


                        self.state = 2354
                        self.valueStmt(5)
                        pass

                    elif la_ == 20:
                        localctx = VisualBasic6Parser.VsImpContext(self, VisualBasic6Parser.ValueStmtContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueStmt)
                        self.state = 2355
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 2357
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualBasic6Parser.WS:
                            self.state = 2356
                            self.match(VisualBasic6Parser.WS)


                        self.state = 2359
                        self.match(VisualBasic6Parser.IMP)
                        self.state = 2361
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,379,self._ctx)
                        if la_ == 1:
                            self.state = 2360
                            self.match(VisualBasic6Parser.WS)


                        self.state = 2363
                        self.valueStmt(4)
                        pass

             
                self.state = 2368
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,381,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class VariableStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def variableListStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.VariableListStmtContext,0)


        def DIM(self):
            return self.getToken(VisualBasic6Parser.DIM, 0)

        def STATIC(self):
            return self.getToken(VisualBasic6Parser.STATIC, 0)

        def visibility(self):
            return self.getTypedRuleContext(VisualBasic6Parser.VisibilityContext,0)


        def WITHEVENTS(self):
            return self.getToken(VisualBasic6Parser.WITHEVENTS, 0)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_variableStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableStmt" ):
                listener.enterVariableStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableStmt" ):
                listener.exitVariableStmt(self)




    def variableStmt(self):

        localctx = VisualBasic6Parser.VariableStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_variableStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2372
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualBasic6Parser.DIM]:
                self.state = 2369
                self.match(VisualBasic6Parser.DIM)
                pass
            elif token in [VisualBasic6Parser.STATIC]:
                self.state = 2370
                self.match(VisualBasic6Parser.STATIC)
                pass
            elif token in [VisualBasic6Parser.FRIEND, VisualBasic6Parser.GLOBAL, VisualBasic6Parser.PRIVATE, VisualBasic6Parser.PUBLIC]:
                self.state = 2371
                self.visibility()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2374
            self.match(VisualBasic6Parser.WS)
            self.state = 2377
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,383,self._ctx)
            if la_ == 1:
                self.state = 2375
                self.match(VisualBasic6Parser.WITHEVENTS)
                self.state = 2376
                self.match(VisualBasic6Parser.WS)


            self.state = 2379
            self.variableListStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableListStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableSubStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.VariableSubStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.VariableSubStmtContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.COMMA)
            else:
                return self.getToken(VisualBasic6Parser.COMMA, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_variableListStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableListStmt" ):
                listener.enterVariableListStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableListStmt" ):
                listener.exitVariableListStmt(self)




    def variableListStmt(self):

        localctx = VisualBasic6Parser.VariableListStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_variableListStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2381
            self.variableSubStmt()
            self.state = 2392
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,386,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2383
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualBasic6Parser.WS:
                        self.state = 2382
                        self.match(VisualBasic6Parser.WS)


                    self.state = 2385
                    self.match(VisualBasic6Parser.COMMA)
                    self.state = 2387
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualBasic6Parser.WS:
                        self.state = 2386
                        self.match(VisualBasic6Parser.WS)


                    self.state = 2389
                    self.variableSubStmt() 
                self.state = 2394
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,386,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableSubStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(VisualBasic6Parser.AmbiguousIdentifierContext,0)


        def typeHint(self):
            return self.getTypedRuleContext(VisualBasic6Parser.TypeHintContext,0)


        def LPAREN(self):
            return self.getToken(VisualBasic6Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(VisualBasic6Parser.RPAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def asTypeClause(self):
            return self.getTypedRuleContext(VisualBasic6Parser.AsTypeClauseContext,0)


        def subscripts(self):
            return self.getTypedRuleContext(VisualBasic6Parser.SubscriptsContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_variableSubStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableSubStmt" ):
                listener.enterVariableSubStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableSubStmt" ):
                listener.exitVariableSubStmt(self)




    def variableSubStmt(self):

        localctx = VisualBasic6Parser.VariableSubStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_variableSubStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2395
            self.ambiguousIdentifier()
            self.state = 2397
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,387,self._ctx)
            if la_ == 1:
                self.state = 2396
                self.typeHint()


            self.state = 2416
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,393,self._ctx)
            if la_ == 1:
                self.state = 2400
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualBasic6Parser.WS:
                    self.state = 2399
                    self.match(VisualBasic6Parser.WS)


                self.state = 2402
                self.match(VisualBasic6Parser.LPAREN)
                self.state = 2404
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,389,self._ctx)
                if la_ == 1:
                    self.state = 2403
                    self.match(VisualBasic6Parser.WS)


                self.state = 2410
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualBasic6Parser.ACCESS) | (1 << VisualBasic6Parser.ADDRESSOF) | (1 << VisualBasic6Parser.ALIAS) | (1 << VisualBasic6Parser.AND) | (1 << VisualBasic6Parser.ATTRIBUTE) | (1 << VisualBasic6Parser.APPACTIVATE) | (1 << VisualBasic6Parser.APPEND) | (1 << VisualBasic6Parser.AS) | (1 << VisualBasic6Parser.BEEP) | (1 << VisualBasic6Parser.BEGIN) | (1 << VisualBasic6Parser.BINARY) | (1 << VisualBasic6Parser.BOOLEAN) | (1 << VisualBasic6Parser.BYVAL) | (1 << VisualBasic6Parser.BYREF) | (1 << VisualBasic6Parser.BYTE) | (1 << VisualBasic6Parser.CALL) | (1 << VisualBasic6Parser.CASE) | (1 << VisualBasic6Parser.CHDIR) | (1 << VisualBasic6Parser.CHDRIVE) | (1 << VisualBasic6Parser.CLASS) | (1 << VisualBasic6Parser.CLOSE) | (1 << VisualBasic6Parser.COLLECTION) | (1 << VisualBasic6Parser.CONST) | (1 << VisualBasic6Parser.DATE) | (1 << VisualBasic6Parser.DECLARE) | (1 << VisualBasic6Parser.DEFBOOL) | (1 << VisualBasic6Parser.DEFBYTE) | (1 << VisualBasic6Parser.DEFDATE) | (1 << VisualBasic6Parser.DEFDBL) | (1 << VisualBasic6Parser.DEFDEC) | (1 << VisualBasic6Parser.DEFCUR) | (1 << VisualBasic6Parser.DEFINT) | (1 << VisualBasic6Parser.DEFLNG) | (1 << VisualBasic6Parser.DEFOBJ) | (1 << VisualBasic6Parser.DEFSNG) | (1 << VisualBasic6Parser.DEFSTR) | (1 << VisualBasic6Parser.DEFVAR) | (1 << VisualBasic6Parser.DELETESETTING) | (1 << VisualBasic6Parser.DIM) | (1 << VisualBasic6Parser.DO) | (1 << VisualBasic6Parser.DOUBLE) | (1 << VisualBasic6Parser.EACH) | (1 << VisualBasic6Parser.ELSE) | (1 << VisualBasic6Parser.ELSEIF) | (1 << VisualBasic6Parser.END) | (1 << VisualBasic6Parser.ENUM) | (1 << VisualBasic6Parser.EQV) | (1 << VisualBasic6Parser.ERASE) | (1 << VisualBasic6Parser.ERROR) | (1 << VisualBasic6Parser.EVENT))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (VisualBasic6Parser.FALSE - 66)) | (1 << (VisualBasic6Parser.FILECOPY - 66)) | (1 << (VisualBasic6Parser.FRIEND - 66)) | (1 << (VisualBasic6Parser.FOR - 66)) | (1 << (VisualBasic6Parser.FUNCTION - 66)) | (1 << (VisualBasic6Parser.GET - 66)) | (1 << (VisualBasic6Parser.GLOBAL - 66)) | (1 << (VisualBasic6Parser.GOSUB - 66)) | (1 << (VisualBasic6Parser.GOTO - 66)) | (1 << (VisualBasic6Parser.IF - 66)) | (1 << (VisualBasic6Parser.IMP - 66)) | (1 << (VisualBasic6Parser.IMPLEMENTS - 66)) | (1 << (VisualBasic6Parser.IN - 66)) | (1 << (VisualBasic6Parser.INPUT - 66)) | (1 << (VisualBasic6Parser.IS - 66)) | (1 << (VisualBasic6Parser.INTEGER - 66)) | (1 << (VisualBasic6Parser.KILL - 66)) | (1 << (VisualBasic6Parser.LOAD - 66)) | (1 << (VisualBasic6Parser.LOCK - 66)) | (1 << (VisualBasic6Parser.LONG - 66)) | (1 << (VisualBasic6Parser.LOOP - 66)) | (1 << (VisualBasic6Parser.LEN - 66)) | (1 << (VisualBasic6Parser.LET - 66)) | (1 << (VisualBasic6Parser.LIB - 66)) | (1 << (VisualBasic6Parser.LIKE - 66)) | (1 << (VisualBasic6Parser.LSET - 66)) | (1 << (VisualBasic6Parser.ME - 66)) | (1 << (VisualBasic6Parser.MID - 66)) | (1 << (VisualBasic6Parser.MKDIR - 66)) | (1 << (VisualBasic6Parser.MOD - 66)) | (1 << (VisualBasic6Parser.NAME - 66)) | (1 << (VisualBasic6Parser.NEXT - 66)) | (1 << (VisualBasic6Parser.NEW - 66)) | (1 << (VisualBasic6Parser.NOT - 66)) | (1 << (VisualBasic6Parser.NOTHING - 66)) | (1 << (VisualBasic6Parser.NULL - 66)) | (1 << (VisualBasic6Parser.OBJECT - 66)) | (1 << (VisualBasic6Parser.ON - 66)) | (1 << (VisualBasic6Parser.OPEN - 66)) | (1 << (VisualBasic6Parser.OPTIONAL - 66)) | (1 << (VisualBasic6Parser.OR - 66)) | (1 << (VisualBasic6Parser.OUTPUT - 66)) | (1 << (VisualBasic6Parser.PARAMARRAY - 66)) | (1 << (VisualBasic6Parser.PRESERVE - 66)) | (1 << (VisualBasic6Parser.PRINT - 66)) | (1 << (VisualBasic6Parser.PRIVATE - 66)) | (1 << (VisualBasic6Parser.PUBLIC - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (VisualBasic6Parser.PUT - 130)) | (1 << (VisualBasic6Parser.RANDOM - 130)) | (1 << (VisualBasic6Parser.RANDOMIZE - 130)) | (1 << (VisualBasic6Parser.RAISEEVENT - 130)) | (1 << (VisualBasic6Parser.READ - 130)) | (1 << (VisualBasic6Parser.REDIM - 130)) | (1 << (VisualBasic6Parser.REM - 130)) | (1 << (VisualBasic6Parser.RESET - 130)) | (1 << (VisualBasic6Parser.RESUME - 130)) | (1 << (VisualBasic6Parser.RETURN - 130)) | (1 << (VisualBasic6Parser.RMDIR - 130)) | (1 << (VisualBasic6Parser.RSET - 130)) | (1 << (VisualBasic6Parser.SAVEPICTURE - 130)) | (1 << (VisualBasic6Parser.SAVESETTING - 130)) | (1 << (VisualBasic6Parser.SEEK - 130)) | (1 << (VisualBasic6Parser.SELECT - 130)) | (1 << (VisualBasic6Parser.SENDKEYS - 130)) | (1 << (VisualBasic6Parser.SET - 130)) | (1 << (VisualBasic6Parser.SETATTR - 130)) | (1 << (VisualBasic6Parser.SHARED - 130)) | (1 << (VisualBasic6Parser.SINGLE - 130)) | (1 << (VisualBasic6Parser.SPC - 130)) | (1 << (VisualBasic6Parser.STATIC - 130)) | (1 << (VisualBasic6Parser.STEP - 130)) | (1 << (VisualBasic6Parser.STOP - 130)) | (1 << (VisualBasic6Parser.STRING - 130)) | (1 << (VisualBasic6Parser.SUB - 130)) | (1 << (VisualBasic6Parser.TAB - 130)) | (1 << (VisualBasic6Parser.TEXT - 130)) | (1 << (VisualBasic6Parser.THEN - 130)) | (1 << (VisualBasic6Parser.TIME - 130)) | (1 << (VisualBasic6Parser.TO - 130)) | (1 << (VisualBasic6Parser.TRUE - 130)) | (1 << (VisualBasic6Parser.TYPE - 130)) | (1 << (VisualBasic6Parser.TYPEOF - 130)) | (1 << (VisualBasic6Parser.UNLOAD - 130)) | (1 << (VisualBasic6Parser.UNLOCK - 130)) | (1 << (VisualBasic6Parser.UNTIL - 130)) | (1 << (VisualBasic6Parser.VARIANT - 130)) | (1 << (VisualBasic6Parser.VERSION - 130)) | (1 << (VisualBasic6Parser.WEND - 130)) | (1 << (VisualBasic6Parser.WHILE - 130)) | (1 << (VisualBasic6Parser.WIDTH - 130)) | (1 << (VisualBasic6Parser.WITH - 130)) | (1 << (VisualBasic6Parser.WITHEVENTS - 130)) | (1 << (VisualBasic6Parser.WRITE - 130)) | (1 << (VisualBasic6Parser.XOR - 130)) | (1 << (VisualBasic6Parser.DOT - 130)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 130)) | (1 << (VisualBasic6Parser.LPAREN - 130)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (VisualBasic6Parser.MINUS - 195)) | (1 << (VisualBasic6Parser.PLUS - 195)) | (1 << (VisualBasic6Parser.L_SQUARE_BRACKET - 195)) | (1 << (VisualBasic6Parser.STRINGLITERAL - 195)) | (1 << (VisualBasic6Parser.DATELITERAL - 195)) | (1 << (VisualBasic6Parser.COLORLITERAL - 195)) | (1 << (VisualBasic6Parser.INTEGERLITERAL - 195)) | (1 << (VisualBasic6Parser.DOUBLELITERAL - 195)) | (1 << (VisualBasic6Parser.FILENUMBER - 195)) | (1 << (VisualBasic6Parser.OCTALLITERAL - 195)) | (1 << (VisualBasic6Parser.IDENTIFIER - 195)) | (1 << (VisualBasic6Parser.WS - 195)))) != 0):
                    self.state = 2406
                    self.subscripts()
                    self.state = 2408
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualBasic6Parser.WS:
                        self.state = 2407
                        self.match(VisualBasic6Parser.WS)




                self.state = 2412
                self.match(VisualBasic6Parser.RPAREN)
                self.state = 2414
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,392,self._ctx)
                if la_ == 1:
                    self.state = 2413
                    self.match(VisualBasic6Parser.WS)




            self.state = 2420
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,394,self._ctx)
            if la_ == 1:
                self.state = 2418
                self.match(VisualBasic6Parser.WS)
                self.state = 2419
                self.asTypeClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhileWendStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(VisualBasic6Parser.WHILE, 0)

        def WS(self):
            return self.getToken(VisualBasic6Parser.WS, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,0)


        def WEND(self):
            return self.getToken(VisualBasic6Parser.WEND, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.NEWLINE)
            else:
                return self.getToken(VisualBasic6Parser.NEWLINE, i)

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.BlockContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.BlockContext,i)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_whileWendStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileWendStmt" ):
                listener.enterWhileWendStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileWendStmt" ):
                listener.exitWhileWendStmt(self)




    def whileWendStmt(self):

        localctx = VisualBasic6Parser.WhileWendStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_whileWendStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2422
            self.match(VisualBasic6Parser.WHILE)
            self.state = 2423
            self.match(VisualBasic6Parser.WS)
            self.state = 2424
            self.valueStmt(0)
            self.state = 2426 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2425
                    self.match(VisualBasic6Parser.NEWLINE)

                else:
                    raise NoViableAltException(self)
                self.state = 2428 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,395,self._ctx)

            self.state = 2433
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,396,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2430
                    self.block() 
                self.state = 2435
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,396,self._ctx)

            self.state = 2439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VisualBasic6Parser.NEWLINE:
                self.state = 2436
                self.match(VisualBasic6Parser.NEWLINE)
                self.state = 2441
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2442
            self.match(VisualBasic6Parser.WEND)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WidthStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WIDTH(self):
            return self.getToken(VisualBasic6Parser.WIDTH, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,i)


        def COMMA(self):
            return self.getToken(VisualBasic6Parser.COMMA, 0)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_widthStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWidthStmt" ):
                listener.enterWidthStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWidthStmt" ):
                listener.exitWidthStmt(self)




    def widthStmt(self):

        localctx = VisualBasic6Parser.WidthStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_widthStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2444
            self.match(VisualBasic6Parser.WIDTH)
            self.state = 2445
            self.match(VisualBasic6Parser.WS)
            self.state = 2446
            self.valueStmt(0)
            self.state = 2448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 2447
                self.match(VisualBasic6Parser.WS)


            self.state = 2450
            self.match(VisualBasic6Parser.COMMA)
            self.state = 2452
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,399,self._ctx)
            if la_ == 1:
                self.state = 2451
                self.match(VisualBasic6Parser.WS)


            self.state = 2454
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WithStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(VisualBasic6Parser.WITH, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ImplicitCallStmt_InStmtContext,0)


        def END_WITH(self):
            return self.getToken(VisualBasic6Parser.END_WITH, 0)

        def NEW(self):
            return self.getToken(VisualBasic6Parser.NEW, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.NEWLINE)
            else:
                return self.getToken(VisualBasic6Parser.NEWLINE, i)

        def block(self):
            return self.getTypedRuleContext(VisualBasic6Parser.BlockContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_withStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithStmt" ):
                listener.enterWithStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithStmt" ):
                listener.exitWithStmt(self)




    def withStmt(self):

        localctx = VisualBasic6Parser.WithStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_withStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2456
            self.match(VisualBasic6Parser.WITH)
            self.state = 2457
            self.match(VisualBasic6Parser.WS)
            self.state = 2460
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,400,self._ctx)
            if la_ == 1:
                self.state = 2458
                self.match(VisualBasic6Parser.NEW)
                self.state = 2459
                self.match(VisualBasic6Parser.WS)


            self.state = 2462
            self.implicitCallStmt_InStmt()
            self.state = 2464 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2463
                self.match(VisualBasic6Parser.NEWLINE)
                self.state = 2466 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==VisualBasic6Parser.NEWLINE):
                    break

            self.state = 2474
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualBasic6Parser.ACCESS) | (1 << VisualBasic6Parser.ADDRESSOF) | (1 << VisualBasic6Parser.ALIAS) | (1 << VisualBasic6Parser.AND) | (1 << VisualBasic6Parser.ATTRIBUTE) | (1 << VisualBasic6Parser.APPACTIVATE) | (1 << VisualBasic6Parser.APPEND) | (1 << VisualBasic6Parser.AS) | (1 << VisualBasic6Parser.BEEP) | (1 << VisualBasic6Parser.BEGIN) | (1 << VisualBasic6Parser.BINARY) | (1 << VisualBasic6Parser.BOOLEAN) | (1 << VisualBasic6Parser.BYVAL) | (1 << VisualBasic6Parser.BYREF) | (1 << VisualBasic6Parser.BYTE) | (1 << VisualBasic6Parser.CALL) | (1 << VisualBasic6Parser.CASE) | (1 << VisualBasic6Parser.CHDIR) | (1 << VisualBasic6Parser.CHDRIVE) | (1 << VisualBasic6Parser.CLASS) | (1 << VisualBasic6Parser.CLOSE) | (1 << VisualBasic6Parser.COLLECTION) | (1 << VisualBasic6Parser.CONST) | (1 << VisualBasic6Parser.DATE) | (1 << VisualBasic6Parser.DECLARE) | (1 << VisualBasic6Parser.DEFBOOL) | (1 << VisualBasic6Parser.DEFBYTE) | (1 << VisualBasic6Parser.DEFDATE) | (1 << VisualBasic6Parser.DEFDBL) | (1 << VisualBasic6Parser.DEFDEC) | (1 << VisualBasic6Parser.DEFCUR) | (1 << VisualBasic6Parser.DEFINT) | (1 << VisualBasic6Parser.DEFLNG) | (1 << VisualBasic6Parser.DEFOBJ) | (1 << VisualBasic6Parser.DEFSNG) | (1 << VisualBasic6Parser.DEFSTR) | (1 << VisualBasic6Parser.DEFVAR) | (1 << VisualBasic6Parser.DELETESETTING) | (1 << VisualBasic6Parser.DIM) | (1 << VisualBasic6Parser.DO) | (1 << VisualBasic6Parser.DOUBLE) | (1 << VisualBasic6Parser.EACH) | (1 << VisualBasic6Parser.ELSE) | (1 << VisualBasic6Parser.ELSEIF) | (1 << VisualBasic6Parser.END) | (1 << VisualBasic6Parser.ENUM) | (1 << VisualBasic6Parser.EQV) | (1 << VisualBasic6Parser.ERASE) | (1 << VisualBasic6Parser.ERROR) | (1 << VisualBasic6Parser.EVENT) | (1 << VisualBasic6Parser.EXIT_DO) | (1 << VisualBasic6Parser.EXIT_FOR) | (1 << VisualBasic6Parser.EXIT_FUNCTION))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VisualBasic6Parser.EXIT_PROPERTY - 64)) | (1 << (VisualBasic6Parser.EXIT_SUB - 64)) | (1 << (VisualBasic6Parser.FALSE - 64)) | (1 << (VisualBasic6Parser.FILECOPY - 64)) | (1 << (VisualBasic6Parser.FRIEND - 64)) | (1 << (VisualBasic6Parser.FOR - 64)) | (1 << (VisualBasic6Parser.FUNCTION - 64)) | (1 << (VisualBasic6Parser.GET - 64)) | (1 << (VisualBasic6Parser.GLOBAL - 64)) | (1 << (VisualBasic6Parser.GOSUB - 64)) | (1 << (VisualBasic6Parser.GOTO - 64)) | (1 << (VisualBasic6Parser.IF - 64)) | (1 << (VisualBasic6Parser.IMP - 64)) | (1 << (VisualBasic6Parser.IMPLEMENTS - 64)) | (1 << (VisualBasic6Parser.IN - 64)) | (1 << (VisualBasic6Parser.INPUT - 64)) | (1 << (VisualBasic6Parser.IS - 64)) | (1 << (VisualBasic6Parser.INTEGER - 64)) | (1 << (VisualBasic6Parser.KILL - 64)) | (1 << (VisualBasic6Parser.LOAD - 64)) | (1 << (VisualBasic6Parser.LOCK - 64)) | (1 << (VisualBasic6Parser.LONG - 64)) | (1 << (VisualBasic6Parser.LOOP - 64)) | (1 << (VisualBasic6Parser.LEN - 64)) | (1 << (VisualBasic6Parser.LET - 64)) | (1 << (VisualBasic6Parser.LIB - 64)) | (1 << (VisualBasic6Parser.LIKE - 64)) | (1 << (VisualBasic6Parser.LINE_INPUT - 64)) | (1 << (VisualBasic6Parser.LSET - 64)) | (1 << (VisualBasic6Parser.MACRO_IF - 64)) | (1 << (VisualBasic6Parser.ME - 64)) | (1 << (VisualBasic6Parser.MID - 64)) | (1 << (VisualBasic6Parser.MKDIR - 64)) | (1 << (VisualBasic6Parser.MOD - 64)) | (1 << (VisualBasic6Parser.NAME - 64)) | (1 << (VisualBasic6Parser.NEXT - 64)) | (1 << (VisualBasic6Parser.NEW - 64)) | (1 << (VisualBasic6Parser.NOT - 64)) | (1 << (VisualBasic6Parser.NOTHING - 64)) | (1 << (VisualBasic6Parser.NULL - 64)) | (1 << (VisualBasic6Parser.OBJECT - 64)) | (1 << (VisualBasic6Parser.ON - 64)) | (1 << (VisualBasic6Parser.ON_ERROR - 64)) | (1 << (VisualBasic6Parser.ON_LOCAL_ERROR - 64)) | (1 << (VisualBasic6Parser.OPEN - 64)) | (1 << (VisualBasic6Parser.OPTIONAL - 64)) | (1 << (VisualBasic6Parser.OR - 64)) | (1 << (VisualBasic6Parser.OUTPUT - 64)) | (1 << (VisualBasic6Parser.PARAMARRAY - 64)) | (1 << (VisualBasic6Parser.PRESERVE - 64)) | (1 << (VisualBasic6Parser.PRINT - 64)) | (1 << (VisualBasic6Parser.PRIVATE - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (VisualBasic6Parser.PUBLIC - 129)) | (1 << (VisualBasic6Parser.PUT - 129)) | (1 << (VisualBasic6Parser.RANDOM - 129)) | (1 << (VisualBasic6Parser.RANDOMIZE - 129)) | (1 << (VisualBasic6Parser.RAISEEVENT - 129)) | (1 << (VisualBasic6Parser.READ - 129)) | (1 << (VisualBasic6Parser.REDIM - 129)) | (1 << (VisualBasic6Parser.REM - 129)) | (1 << (VisualBasic6Parser.RESET - 129)) | (1 << (VisualBasic6Parser.RESUME - 129)) | (1 << (VisualBasic6Parser.RETURN - 129)) | (1 << (VisualBasic6Parser.RMDIR - 129)) | (1 << (VisualBasic6Parser.RSET - 129)) | (1 << (VisualBasic6Parser.SAVEPICTURE - 129)) | (1 << (VisualBasic6Parser.SAVESETTING - 129)) | (1 << (VisualBasic6Parser.SEEK - 129)) | (1 << (VisualBasic6Parser.SELECT - 129)) | (1 << (VisualBasic6Parser.SENDKEYS - 129)) | (1 << (VisualBasic6Parser.SET - 129)) | (1 << (VisualBasic6Parser.SETATTR - 129)) | (1 << (VisualBasic6Parser.SHARED - 129)) | (1 << (VisualBasic6Parser.SINGLE - 129)) | (1 << (VisualBasic6Parser.SPC - 129)) | (1 << (VisualBasic6Parser.STATIC - 129)) | (1 << (VisualBasic6Parser.STEP - 129)) | (1 << (VisualBasic6Parser.STOP - 129)) | (1 << (VisualBasic6Parser.STRING - 129)) | (1 << (VisualBasic6Parser.SUB - 129)) | (1 << (VisualBasic6Parser.TAB - 129)) | (1 << (VisualBasic6Parser.TEXT - 129)) | (1 << (VisualBasic6Parser.THEN - 129)) | (1 << (VisualBasic6Parser.TIME - 129)) | (1 << (VisualBasic6Parser.TO - 129)) | (1 << (VisualBasic6Parser.TRUE - 129)) | (1 << (VisualBasic6Parser.TYPE - 129)) | (1 << (VisualBasic6Parser.TYPEOF - 129)) | (1 << (VisualBasic6Parser.UNLOAD - 129)) | (1 << (VisualBasic6Parser.UNLOCK - 129)) | (1 << (VisualBasic6Parser.UNTIL - 129)) | (1 << (VisualBasic6Parser.VARIANT - 129)) | (1 << (VisualBasic6Parser.VERSION - 129)) | (1 << (VisualBasic6Parser.WEND - 129)) | (1 << (VisualBasic6Parser.WHILE - 129)) | (1 << (VisualBasic6Parser.WIDTH - 129)) | (1 << (VisualBasic6Parser.WITH - 129)) | (1 << (VisualBasic6Parser.WITHEVENTS - 129)) | (1 << (VisualBasic6Parser.WRITE - 129)) | (1 << (VisualBasic6Parser.XOR - 129)) | (1 << (VisualBasic6Parser.DOT - 129)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 129)))) != 0) or ((((_la - 206)) & ~0x3f) == 0 and ((1 << (_la - 206)) & ((1 << (VisualBasic6Parser.L_SQUARE_BRACKET - 206)) | (1 << (VisualBasic6Parser.IDENTIFIER - 206)) | (1 << (VisualBasic6Parser.WS - 206)))) != 0):
                self.state = 2468
                self.block()
                self.state = 2470 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2469
                    self.match(VisualBasic6Parser.NEWLINE)
                    self.state = 2472 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==VisualBasic6Parser.NEWLINE):
                        break



            self.state = 2476
            self.match(VisualBasic6Parser.END_WITH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WriteStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WRITE(self):
            return self.getToken(VisualBasic6Parser.WRITE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def valueStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,0)


        def COMMA(self):
            return self.getToken(VisualBasic6Parser.COMMA, 0)

        def outputList(self):
            return self.getTypedRuleContext(VisualBasic6Parser.OutputListContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_writeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWriteStmt" ):
                listener.enterWriteStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWriteStmt" ):
                listener.exitWriteStmt(self)




    def writeStmt(self):

        localctx = VisualBasic6Parser.WriteStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_writeStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2478
            self.match(VisualBasic6Parser.WRITE)
            self.state = 2479
            self.match(VisualBasic6Parser.WS)
            self.state = 2480
            self.valueStmt(0)
            self.state = 2482
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 2481
                self.match(VisualBasic6Parser.WS)


            self.state = 2484
            self.match(VisualBasic6Parser.COMMA)
            self.state = 2489
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,406,self._ctx)
            if la_ == 1:
                self.state = 2486
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,405,self._ctx)
                if la_ == 1:
                    self.state = 2485
                    self.match(VisualBasic6Parser.WS)


                self.state = 2488
                self.outputList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExplicitCallStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eCS_ProcedureCall(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ECS_ProcedureCallContext,0)


        def eCS_MemberProcedureCall(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ECS_MemberProcedureCallContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_explicitCallStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitCallStmt" ):
                listener.enterExplicitCallStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitCallStmt" ):
                listener.exitExplicitCallStmt(self)




    def explicitCallStmt(self):

        localctx = VisualBasic6Parser.ExplicitCallStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_explicitCallStmt)
        try:
            self.state = 2493
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,407,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2491
                self.eCS_ProcedureCall()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2492
                self.eCS_MemberProcedureCall()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ECS_ProcedureCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(VisualBasic6Parser.CALL, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(VisualBasic6Parser.AmbiguousIdentifierContext,0)


        def typeHint(self):
            return self.getTypedRuleContext(VisualBasic6Parser.TypeHintContext,0)


        def LPAREN(self):
            return self.getToken(VisualBasic6Parser.LPAREN, 0)

        def argsCall(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ArgsCallContext,0)


        def RPAREN(self):
            return self.getToken(VisualBasic6Parser.RPAREN, 0)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_eCS_ProcedureCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterECS_ProcedureCall" ):
                listener.enterECS_ProcedureCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitECS_ProcedureCall" ):
                listener.exitECS_ProcedureCall(self)




    def eCS_ProcedureCall(self):

        localctx = VisualBasic6Parser.ECS_ProcedureCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_eCS_ProcedureCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2495
            self.match(VisualBasic6Parser.CALL)
            self.state = 2496
            self.match(VisualBasic6Parser.WS)
            self.state = 2497
            self.ambiguousIdentifier()
            self.state = 2499
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,408,self._ctx)
            if la_ == 1:
                self.state = 2498
                self.typeHint()


            self.state = 2514
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,412,self._ctx)
            if la_ == 1:
                self.state = 2502
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualBasic6Parser.WS:
                    self.state = 2501
                    self.match(VisualBasic6Parser.WS)


                self.state = 2504
                self.match(VisualBasic6Parser.LPAREN)
                self.state = 2506
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,410,self._ctx)
                if la_ == 1:
                    self.state = 2505
                    self.match(VisualBasic6Parser.WS)


                self.state = 2508
                self.argsCall()
                self.state = 2510
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualBasic6Parser.WS:
                    self.state = 2509
                    self.match(VisualBasic6Parser.WS)


                self.state = 2512
                self.match(VisualBasic6Parser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ECS_MemberProcedureCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(VisualBasic6Parser.CALL, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def DOT(self):
            return self.getToken(VisualBasic6Parser.DOT, 0)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(VisualBasic6Parser.AmbiguousIdentifierContext,0)


        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ImplicitCallStmt_InStmtContext,0)


        def typeHint(self):
            return self.getTypedRuleContext(VisualBasic6Parser.TypeHintContext,0)


        def LPAREN(self):
            return self.getToken(VisualBasic6Parser.LPAREN, 0)

        def argsCall(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ArgsCallContext,0)


        def RPAREN(self):
            return self.getToken(VisualBasic6Parser.RPAREN, 0)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_eCS_MemberProcedureCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterECS_MemberProcedureCall" ):
                listener.enterECS_MemberProcedureCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitECS_MemberProcedureCall" ):
                listener.exitECS_MemberProcedureCall(self)




    def eCS_MemberProcedureCall(self):

        localctx = VisualBasic6Parser.ECS_MemberProcedureCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_eCS_MemberProcedureCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2516
            self.match(VisualBasic6Parser.CALL)
            self.state = 2517
            self.match(VisualBasic6Parser.WS)
            self.state = 2519
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,413,self._ctx)
            if la_ == 1:
                self.state = 2518
                self.implicitCallStmt_InStmt()


            self.state = 2521
            self.match(VisualBasic6Parser.DOT)
            self.state = 2523
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 2522
                self.match(VisualBasic6Parser.WS)


            self.state = 2525
            self.ambiguousIdentifier()
            self.state = 2527
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,415,self._ctx)
            if la_ == 1:
                self.state = 2526
                self.typeHint()


            self.state = 2542
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,419,self._ctx)
            if la_ == 1:
                self.state = 2530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualBasic6Parser.WS:
                    self.state = 2529
                    self.match(VisualBasic6Parser.WS)


                self.state = 2532
                self.match(VisualBasic6Parser.LPAREN)
                self.state = 2534
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,417,self._ctx)
                if la_ == 1:
                    self.state = 2533
                    self.match(VisualBasic6Parser.WS)


                self.state = 2536
                self.argsCall()
                self.state = 2538
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualBasic6Parser.WS:
                    self.state = 2537
                    self.match(VisualBasic6Parser.WS)


                self.state = 2540
                self.match(VisualBasic6Parser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImplicitCallStmt_InBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def iCS_B_ProcedureCall(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ICS_B_ProcedureCallContext,0)


        def iCS_B_MemberProcedureCall(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ICS_B_MemberProcedureCallContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_implicitCallStmt_InBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplicitCallStmt_InBlock" ):
                listener.enterImplicitCallStmt_InBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplicitCallStmt_InBlock" ):
                listener.exitImplicitCallStmt_InBlock(self)




    def implicitCallStmt_InBlock(self):

        localctx = VisualBasic6Parser.ImplicitCallStmt_InBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_implicitCallStmt_InBlock)
        try:
            self.state = 2546
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,420,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2544
                self.iCS_B_ProcedureCall()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2545
                self.iCS_B_MemberProcedureCall()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ICS_B_ProcedureCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def certainIdentifier(self):
            return self.getTypedRuleContext(VisualBasic6Parser.CertainIdentifierContext,0)


        def WS(self):
            return self.getToken(VisualBasic6Parser.WS, 0)

        def argsCall(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ArgsCallContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_iCS_B_ProcedureCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterICS_B_ProcedureCall" ):
                listener.enterICS_B_ProcedureCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitICS_B_ProcedureCall" ):
                listener.exitICS_B_ProcedureCall(self)




    def iCS_B_ProcedureCall(self):

        localctx = VisualBasic6Parser.ICS_B_ProcedureCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_iCS_B_ProcedureCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2548
            self.certainIdentifier()
            self.state = 2551
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,421,self._ctx)
            if la_ == 1:
                self.state = 2549
                self.match(VisualBasic6Parser.WS)
                self.state = 2550
                self.argsCall()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ICS_B_MemberProcedureCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(VisualBasic6Parser.DOT, 0)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(VisualBasic6Parser.AmbiguousIdentifierContext,0)


        def implicitCallStmt_InStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ImplicitCallStmt_InStmtContext,0)


        def typeHint(self):
            return self.getTypedRuleContext(VisualBasic6Parser.TypeHintContext,0)


        def WS(self):
            return self.getToken(VisualBasic6Parser.WS, 0)

        def argsCall(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ArgsCallContext,0)


        def dictionaryCallStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.DictionaryCallStmtContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_iCS_B_MemberProcedureCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterICS_B_MemberProcedureCall" ):
                listener.enterICS_B_MemberProcedureCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitICS_B_MemberProcedureCall" ):
                listener.exitICS_B_MemberProcedureCall(self)




    def iCS_B_MemberProcedureCall(self):

        localctx = VisualBasic6Parser.ICS_B_MemberProcedureCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_iCS_B_MemberProcedureCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2554
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,422,self._ctx)
            if la_ == 1:
                self.state = 2553
                self.implicitCallStmt_InStmt()


            self.state = 2556
            self.match(VisualBasic6Parser.DOT)
            self.state = 2557
            self.ambiguousIdentifier()
            self.state = 2559
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,423,self._ctx)
            if la_ == 1:
                self.state = 2558
                self.typeHint()


            self.state = 2563
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,424,self._ctx)
            if la_ == 1:
                self.state = 2561
                self.match(VisualBasic6Parser.WS)
                self.state = 2562
                self.argsCall()


            self.state = 2566
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,425,self._ctx)
            if la_ == 1:
                self.state = 2565
                self.dictionaryCallStmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImplicitCallStmt_InStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def iCS_S_MembersCall(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ICS_S_MembersCallContext,0)


        def iCS_S_VariableOrProcedureCall(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ICS_S_VariableOrProcedureCallContext,0)


        def iCS_S_ProcedureOrArrayCall(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ICS_S_ProcedureOrArrayCallContext,0)


        def iCS_S_DictionaryCall(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ICS_S_DictionaryCallContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_implicitCallStmt_InStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplicitCallStmt_InStmt" ):
                listener.enterImplicitCallStmt_InStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplicitCallStmt_InStmt" ):
                listener.exitImplicitCallStmt_InStmt(self)




    def implicitCallStmt_InStmt(self):

        localctx = VisualBasic6Parser.ImplicitCallStmt_InStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_implicitCallStmt_InStmt)
        try:
            self.state = 2572
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,426,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2568
                self.iCS_S_MembersCall()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2569
                self.iCS_S_VariableOrProcedureCall()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2570
                self.iCS_S_ProcedureOrArrayCall()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2571
                self.iCS_S_DictionaryCall()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ICS_S_VariableOrProcedureCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(VisualBasic6Parser.AmbiguousIdentifierContext,0)


        def typeHint(self):
            return self.getTypedRuleContext(VisualBasic6Parser.TypeHintContext,0)


        def dictionaryCallStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.DictionaryCallStmtContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_iCS_S_VariableOrProcedureCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterICS_S_VariableOrProcedureCall" ):
                listener.enterICS_S_VariableOrProcedureCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitICS_S_VariableOrProcedureCall" ):
                listener.exitICS_S_VariableOrProcedureCall(self)




    def iCS_S_VariableOrProcedureCall(self):

        localctx = VisualBasic6Parser.ICS_S_VariableOrProcedureCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_iCS_S_VariableOrProcedureCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2574
            self.ambiguousIdentifier()
            self.state = 2576
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,427,self._ctx)
            if la_ == 1:
                self.state = 2575
                self.typeHint()


            self.state = 2579
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,428,self._ctx)
            if la_ == 1:
                self.state = 2578
                self.dictionaryCallStmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ICS_S_ProcedureOrArrayCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(VisualBasic6Parser.AmbiguousIdentifierContext,0)


        def baseType(self):
            return self.getTypedRuleContext(VisualBasic6Parser.BaseTypeContext,0)


        def iCS_S_NestedProcedureCall(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ICS_S_NestedProcedureCallContext,0)


        def typeHint(self):
            return self.getTypedRuleContext(VisualBasic6Parser.TypeHintContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.LPAREN)
            else:
                return self.getToken(VisualBasic6Parser.LPAREN, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.RPAREN)
            else:
                return self.getToken(VisualBasic6Parser.RPAREN, i)

        def dictionaryCallStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.DictionaryCallStmtContext,0)


        def argsCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ArgsCallContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ArgsCallContext,i)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_iCS_S_ProcedureOrArrayCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterICS_S_ProcedureOrArrayCall" ):
                listener.enterICS_S_ProcedureOrArrayCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitICS_S_ProcedureOrArrayCall" ):
                listener.exitICS_S_ProcedureOrArrayCall(self)




    def iCS_S_ProcedureOrArrayCall(self):

        localctx = VisualBasic6Parser.ICS_S_ProcedureOrArrayCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_iCS_S_ProcedureOrArrayCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2584
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,429,self._ctx)
            if la_ == 1:
                self.state = 2581
                self.ambiguousIdentifier()
                pass

            elif la_ == 2:
                self.state = 2582
                self.baseType()
                pass

            elif la_ == 3:
                self.state = 2583
                self.iCS_S_NestedProcedureCall()
                pass


            self.state = 2587
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & ((1 << (VisualBasic6Parser.AMPERSAND - 178)) | (1 << (VisualBasic6Parser.AT - 178)) | (1 << (VisualBasic6Parser.DOLLAR - 178)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 178)) | (1 << (VisualBasic6Parser.HASH - 178)) | (1 << (VisualBasic6Parser.PERCENT - 178)))) != 0):
                self.state = 2586
                self.typeHint()


            self.state = 2590
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 2589
                self.match(VisualBasic6Parser.WS)


            self.state = 2603 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2592
                    self.match(VisualBasic6Parser.LPAREN)
                    self.state = 2594
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,432,self._ctx)
                    if la_ == 1:
                        self.state = 2593
                        self.match(VisualBasic6Parser.WS)


                    self.state = 2600
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualBasic6Parser.ACCESS) | (1 << VisualBasic6Parser.ADDRESSOF) | (1 << VisualBasic6Parser.ALIAS) | (1 << VisualBasic6Parser.AND) | (1 << VisualBasic6Parser.ATTRIBUTE) | (1 << VisualBasic6Parser.APPACTIVATE) | (1 << VisualBasic6Parser.APPEND) | (1 << VisualBasic6Parser.AS) | (1 << VisualBasic6Parser.BEEP) | (1 << VisualBasic6Parser.BEGIN) | (1 << VisualBasic6Parser.BINARY) | (1 << VisualBasic6Parser.BOOLEAN) | (1 << VisualBasic6Parser.BYVAL) | (1 << VisualBasic6Parser.BYREF) | (1 << VisualBasic6Parser.BYTE) | (1 << VisualBasic6Parser.CALL) | (1 << VisualBasic6Parser.CASE) | (1 << VisualBasic6Parser.CHDIR) | (1 << VisualBasic6Parser.CHDRIVE) | (1 << VisualBasic6Parser.CLASS) | (1 << VisualBasic6Parser.CLOSE) | (1 << VisualBasic6Parser.COLLECTION) | (1 << VisualBasic6Parser.CONST) | (1 << VisualBasic6Parser.DATE) | (1 << VisualBasic6Parser.DECLARE) | (1 << VisualBasic6Parser.DEFBOOL) | (1 << VisualBasic6Parser.DEFBYTE) | (1 << VisualBasic6Parser.DEFDATE) | (1 << VisualBasic6Parser.DEFDBL) | (1 << VisualBasic6Parser.DEFDEC) | (1 << VisualBasic6Parser.DEFCUR) | (1 << VisualBasic6Parser.DEFINT) | (1 << VisualBasic6Parser.DEFLNG) | (1 << VisualBasic6Parser.DEFOBJ) | (1 << VisualBasic6Parser.DEFSNG) | (1 << VisualBasic6Parser.DEFSTR) | (1 << VisualBasic6Parser.DEFVAR) | (1 << VisualBasic6Parser.DELETESETTING) | (1 << VisualBasic6Parser.DIM) | (1 << VisualBasic6Parser.DO) | (1 << VisualBasic6Parser.DOUBLE) | (1 << VisualBasic6Parser.EACH) | (1 << VisualBasic6Parser.ELSE) | (1 << VisualBasic6Parser.ELSEIF) | (1 << VisualBasic6Parser.END) | (1 << VisualBasic6Parser.ENUM) | (1 << VisualBasic6Parser.EQV) | (1 << VisualBasic6Parser.ERASE) | (1 << VisualBasic6Parser.ERROR) | (1 << VisualBasic6Parser.EVENT))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (VisualBasic6Parser.FALSE - 66)) | (1 << (VisualBasic6Parser.FILECOPY - 66)) | (1 << (VisualBasic6Parser.FRIEND - 66)) | (1 << (VisualBasic6Parser.FOR - 66)) | (1 << (VisualBasic6Parser.FUNCTION - 66)) | (1 << (VisualBasic6Parser.GET - 66)) | (1 << (VisualBasic6Parser.GLOBAL - 66)) | (1 << (VisualBasic6Parser.GOSUB - 66)) | (1 << (VisualBasic6Parser.GOTO - 66)) | (1 << (VisualBasic6Parser.IF - 66)) | (1 << (VisualBasic6Parser.IMP - 66)) | (1 << (VisualBasic6Parser.IMPLEMENTS - 66)) | (1 << (VisualBasic6Parser.IN - 66)) | (1 << (VisualBasic6Parser.INPUT - 66)) | (1 << (VisualBasic6Parser.IS - 66)) | (1 << (VisualBasic6Parser.INTEGER - 66)) | (1 << (VisualBasic6Parser.KILL - 66)) | (1 << (VisualBasic6Parser.LOAD - 66)) | (1 << (VisualBasic6Parser.LOCK - 66)) | (1 << (VisualBasic6Parser.LONG - 66)) | (1 << (VisualBasic6Parser.LOOP - 66)) | (1 << (VisualBasic6Parser.LEN - 66)) | (1 << (VisualBasic6Parser.LET - 66)) | (1 << (VisualBasic6Parser.LIB - 66)) | (1 << (VisualBasic6Parser.LIKE - 66)) | (1 << (VisualBasic6Parser.LSET - 66)) | (1 << (VisualBasic6Parser.ME - 66)) | (1 << (VisualBasic6Parser.MID - 66)) | (1 << (VisualBasic6Parser.MKDIR - 66)) | (1 << (VisualBasic6Parser.MOD - 66)) | (1 << (VisualBasic6Parser.NAME - 66)) | (1 << (VisualBasic6Parser.NEXT - 66)) | (1 << (VisualBasic6Parser.NEW - 66)) | (1 << (VisualBasic6Parser.NOT - 66)) | (1 << (VisualBasic6Parser.NOTHING - 66)) | (1 << (VisualBasic6Parser.NULL - 66)) | (1 << (VisualBasic6Parser.OBJECT - 66)) | (1 << (VisualBasic6Parser.ON - 66)) | (1 << (VisualBasic6Parser.OPEN - 66)) | (1 << (VisualBasic6Parser.OPTIONAL - 66)) | (1 << (VisualBasic6Parser.OR - 66)) | (1 << (VisualBasic6Parser.OUTPUT - 66)) | (1 << (VisualBasic6Parser.PARAMARRAY - 66)) | (1 << (VisualBasic6Parser.PRESERVE - 66)) | (1 << (VisualBasic6Parser.PRINT - 66)) | (1 << (VisualBasic6Parser.PRIVATE - 66)) | (1 << (VisualBasic6Parser.PUBLIC - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (VisualBasic6Parser.PUT - 130)) | (1 << (VisualBasic6Parser.RANDOM - 130)) | (1 << (VisualBasic6Parser.RANDOMIZE - 130)) | (1 << (VisualBasic6Parser.RAISEEVENT - 130)) | (1 << (VisualBasic6Parser.READ - 130)) | (1 << (VisualBasic6Parser.REDIM - 130)) | (1 << (VisualBasic6Parser.REM - 130)) | (1 << (VisualBasic6Parser.RESET - 130)) | (1 << (VisualBasic6Parser.RESUME - 130)) | (1 << (VisualBasic6Parser.RETURN - 130)) | (1 << (VisualBasic6Parser.RMDIR - 130)) | (1 << (VisualBasic6Parser.RSET - 130)) | (1 << (VisualBasic6Parser.SAVEPICTURE - 130)) | (1 << (VisualBasic6Parser.SAVESETTING - 130)) | (1 << (VisualBasic6Parser.SEEK - 130)) | (1 << (VisualBasic6Parser.SELECT - 130)) | (1 << (VisualBasic6Parser.SENDKEYS - 130)) | (1 << (VisualBasic6Parser.SET - 130)) | (1 << (VisualBasic6Parser.SETATTR - 130)) | (1 << (VisualBasic6Parser.SHARED - 130)) | (1 << (VisualBasic6Parser.SINGLE - 130)) | (1 << (VisualBasic6Parser.SPC - 130)) | (1 << (VisualBasic6Parser.STATIC - 130)) | (1 << (VisualBasic6Parser.STEP - 130)) | (1 << (VisualBasic6Parser.STOP - 130)) | (1 << (VisualBasic6Parser.STRING - 130)) | (1 << (VisualBasic6Parser.SUB - 130)) | (1 << (VisualBasic6Parser.TAB - 130)) | (1 << (VisualBasic6Parser.TEXT - 130)) | (1 << (VisualBasic6Parser.THEN - 130)) | (1 << (VisualBasic6Parser.TIME - 130)) | (1 << (VisualBasic6Parser.TO - 130)) | (1 << (VisualBasic6Parser.TRUE - 130)) | (1 << (VisualBasic6Parser.TYPE - 130)) | (1 << (VisualBasic6Parser.TYPEOF - 130)) | (1 << (VisualBasic6Parser.UNLOAD - 130)) | (1 << (VisualBasic6Parser.UNLOCK - 130)) | (1 << (VisualBasic6Parser.UNTIL - 130)) | (1 << (VisualBasic6Parser.VARIANT - 130)) | (1 << (VisualBasic6Parser.VERSION - 130)) | (1 << (VisualBasic6Parser.WEND - 130)) | (1 << (VisualBasic6Parser.WHILE - 130)) | (1 << (VisualBasic6Parser.WIDTH - 130)) | (1 << (VisualBasic6Parser.WITH - 130)) | (1 << (VisualBasic6Parser.WITHEVENTS - 130)) | (1 << (VisualBasic6Parser.WRITE - 130)) | (1 << (VisualBasic6Parser.XOR - 130)) | (1 << (VisualBasic6Parser.COMMA - 130)) | (1 << (VisualBasic6Parser.DOT - 130)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 130)) | (1 << (VisualBasic6Parser.LPAREN - 130)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (VisualBasic6Parser.MINUS - 195)) | (1 << (VisualBasic6Parser.PLUS - 195)) | (1 << (VisualBasic6Parser.SEMICOLON - 195)) | (1 << (VisualBasic6Parser.L_SQUARE_BRACKET - 195)) | (1 << (VisualBasic6Parser.STRINGLITERAL - 195)) | (1 << (VisualBasic6Parser.DATELITERAL - 195)) | (1 << (VisualBasic6Parser.COLORLITERAL - 195)) | (1 << (VisualBasic6Parser.INTEGERLITERAL - 195)) | (1 << (VisualBasic6Parser.DOUBLELITERAL - 195)) | (1 << (VisualBasic6Parser.FILENUMBER - 195)) | (1 << (VisualBasic6Parser.OCTALLITERAL - 195)) | (1 << (VisualBasic6Parser.IDENTIFIER - 195)) | (1 << (VisualBasic6Parser.WS - 195)))) != 0):
                        self.state = 2596
                        self.argsCall()
                        self.state = 2598
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualBasic6Parser.WS:
                            self.state = 2597
                            self.match(VisualBasic6Parser.WS)




                    self.state = 2602
                    self.match(VisualBasic6Parser.RPAREN)

                else:
                    raise NoViableAltException(self)
                self.state = 2605 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,435,self._ctx)

            self.state = 2608
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,436,self._ctx)
            if la_ == 1:
                self.state = 2607
                self.dictionaryCallStmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ICS_S_NestedProcedureCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(VisualBasic6Parser.AmbiguousIdentifierContext,0)


        def LPAREN(self):
            return self.getToken(VisualBasic6Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(VisualBasic6Parser.RPAREN, 0)

        def typeHint(self):
            return self.getTypedRuleContext(VisualBasic6Parser.TypeHintContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def argsCall(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ArgsCallContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_iCS_S_NestedProcedureCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterICS_S_NestedProcedureCall" ):
                listener.enterICS_S_NestedProcedureCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitICS_S_NestedProcedureCall" ):
                listener.exitICS_S_NestedProcedureCall(self)




    def iCS_S_NestedProcedureCall(self):

        localctx = VisualBasic6Parser.ICS_S_NestedProcedureCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_iCS_S_NestedProcedureCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2610
            self.ambiguousIdentifier()
            self.state = 2612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & ((1 << (VisualBasic6Parser.AMPERSAND - 178)) | (1 << (VisualBasic6Parser.AT - 178)) | (1 << (VisualBasic6Parser.DOLLAR - 178)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 178)) | (1 << (VisualBasic6Parser.HASH - 178)) | (1 << (VisualBasic6Parser.PERCENT - 178)))) != 0):
                self.state = 2611
                self.typeHint()


            self.state = 2615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 2614
                self.match(VisualBasic6Parser.WS)


            self.state = 2617
            self.match(VisualBasic6Parser.LPAREN)
            self.state = 2619
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,439,self._ctx)
            if la_ == 1:
                self.state = 2618
                self.match(VisualBasic6Parser.WS)


            self.state = 2625
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualBasic6Parser.ACCESS) | (1 << VisualBasic6Parser.ADDRESSOF) | (1 << VisualBasic6Parser.ALIAS) | (1 << VisualBasic6Parser.AND) | (1 << VisualBasic6Parser.ATTRIBUTE) | (1 << VisualBasic6Parser.APPACTIVATE) | (1 << VisualBasic6Parser.APPEND) | (1 << VisualBasic6Parser.AS) | (1 << VisualBasic6Parser.BEEP) | (1 << VisualBasic6Parser.BEGIN) | (1 << VisualBasic6Parser.BINARY) | (1 << VisualBasic6Parser.BOOLEAN) | (1 << VisualBasic6Parser.BYVAL) | (1 << VisualBasic6Parser.BYREF) | (1 << VisualBasic6Parser.BYTE) | (1 << VisualBasic6Parser.CALL) | (1 << VisualBasic6Parser.CASE) | (1 << VisualBasic6Parser.CHDIR) | (1 << VisualBasic6Parser.CHDRIVE) | (1 << VisualBasic6Parser.CLASS) | (1 << VisualBasic6Parser.CLOSE) | (1 << VisualBasic6Parser.COLLECTION) | (1 << VisualBasic6Parser.CONST) | (1 << VisualBasic6Parser.DATE) | (1 << VisualBasic6Parser.DECLARE) | (1 << VisualBasic6Parser.DEFBOOL) | (1 << VisualBasic6Parser.DEFBYTE) | (1 << VisualBasic6Parser.DEFDATE) | (1 << VisualBasic6Parser.DEFDBL) | (1 << VisualBasic6Parser.DEFDEC) | (1 << VisualBasic6Parser.DEFCUR) | (1 << VisualBasic6Parser.DEFINT) | (1 << VisualBasic6Parser.DEFLNG) | (1 << VisualBasic6Parser.DEFOBJ) | (1 << VisualBasic6Parser.DEFSNG) | (1 << VisualBasic6Parser.DEFSTR) | (1 << VisualBasic6Parser.DEFVAR) | (1 << VisualBasic6Parser.DELETESETTING) | (1 << VisualBasic6Parser.DIM) | (1 << VisualBasic6Parser.DO) | (1 << VisualBasic6Parser.DOUBLE) | (1 << VisualBasic6Parser.EACH) | (1 << VisualBasic6Parser.ELSE) | (1 << VisualBasic6Parser.ELSEIF) | (1 << VisualBasic6Parser.END) | (1 << VisualBasic6Parser.ENUM) | (1 << VisualBasic6Parser.EQV) | (1 << VisualBasic6Parser.ERASE) | (1 << VisualBasic6Parser.ERROR) | (1 << VisualBasic6Parser.EVENT))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (VisualBasic6Parser.FALSE - 66)) | (1 << (VisualBasic6Parser.FILECOPY - 66)) | (1 << (VisualBasic6Parser.FRIEND - 66)) | (1 << (VisualBasic6Parser.FOR - 66)) | (1 << (VisualBasic6Parser.FUNCTION - 66)) | (1 << (VisualBasic6Parser.GET - 66)) | (1 << (VisualBasic6Parser.GLOBAL - 66)) | (1 << (VisualBasic6Parser.GOSUB - 66)) | (1 << (VisualBasic6Parser.GOTO - 66)) | (1 << (VisualBasic6Parser.IF - 66)) | (1 << (VisualBasic6Parser.IMP - 66)) | (1 << (VisualBasic6Parser.IMPLEMENTS - 66)) | (1 << (VisualBasic6Parser.IN - 66)) | (1 << (VisualBasic6Parser.INPUT - 66)) | (1 << (VisualBasic6Parser.IS - 66)) | (1 << (VisualBasic6Parser.INTEGER - 66)) | (1 << (VisualBasic6Parser.KILL - 66)) | (1 << (VisualBasic6Parser.LOAD - 66)) | (1 << (VisualBasic6Parser.LOCK - 66)) | (1 << (VisualBasic6Parser.LONG - 66)) | (1 << (VisualBasic6Parser.LOOP - 66)) | (1 << (VisualBasic6Parser.LEN - 66)) | (1 << (VisualBasic6Parser.LET - 66)) | (1 << (VisualBasic6Parser.LIB - 66)) | (1 << (VisualBasic6Parser.LIKE - 66)) | (1 << (VisualBasic6Parser.LSET - 66)) | (1 << (VisualBasic6Parser.ME - 66)) | (1 << (VisualBasic6Parser.MID - 66)) | (1 << (VisualBasic6Parser.MKDIR - 66)) | (1 << (VisualBasic6Parser.MOD - 66)) | (1 << (VisualBasic6Parser.NAME - 66)) | (1 << (VisualBasic6Parser.NEXT - 66)) | (1 << (VisualBasic6Parser.NEW - 66)) | (1 << (VisualBasic6Parser.NOT - 66)) | (1 << (VisualBasic6Parser.NOTHING - 66)) | (1 << (VisualBasic6Parser.NULL - 66)) | (1 << (VisualBasic6Parser.OBJECT - 66)) | (1 << (VisualBasic6Parser.ON - 66)) | (1 << (VisualBasic6Parser.OPEN - 66)) | (1 << (VisualBasic6Parser.OPTIONAL - 66)) | (1 << (VisualBasic6Parser.OR - 66)) | (1 << (VisualBasic6Parser.OUTPUT - 66)) | (1 << (VisualBasic6Parser.PARAMARRAY - 66)) | (1 << (VisualBasic6Parser.PRESERVE - 66)) | (1 << (VisualBasic6Parser.PRINT - 66)) | (1 << (VisualBasic6Parser.PRIVATE - 66)) | (1 << (VisualBasic6Parser.PUBLIC - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (VisualBasic6Parser.PUT - 130)) | (1 << (VisualBasic6Parser.RANDOM - 130)) | (1 << (VisualBasic6Parser.RANDOMIZE - 130)) | (1 << (VisualBasic6Parser.RAISEEVENT - 130)) | (1 << (VisualBasic6Parser.READ - 130)) | (1 << (VisualBasic6Parser.REDIM - 130)) | (1 << (VisualBasic6Parser.REM - 130)) | (1 << (VisualBasic6Parser.RESET - 130)) | (1 << (VisualBasic6Parser.RESUME - 130)) | (1 << (VisualBasic6Parser.RETURN - 130)) | (1 << (VisualBasic6Parser.RMDIR - 130)) | (1 << (VisualBasic6Parser.RSET - 130)) | (1 << (VisualBasic6Parser.SAVEPICTURE - 130)) | (1 << (VisualBasic6Parser.SAVESETTING - 130)) | (1 << (VisualBasic6Parser.SEEK - 130)) | (1 << (VisualBasic6Parser.SELECT - 130)) | (1 << (VisualBasic6Parser.SENDKEYS - 130)) | (1 << (VisualBasic6Parser.SET - 130)) | (1 << (VisualBasic6Parser.SETATTR - 130)) | (1 << (VisualBasic6Parser.SHARED - 130)) | (1 << (VisualBasic6Parser.SINGLE - 130)) | (1 << (VisualBasic6Parser.SPC - 130)) | (1 << (VisualBasic6Parser.STATIC - 130)) | (1 << (VisualBasic6Parser.STEP - 130)) | (1 << (VisualBasic6Parser.STOP - 130)) | (1 << (VisualBasic6Parser.STRING - 130)) | (1 << (VisualBasic6Parser.SUB - 130)) | (1 << (VisualBasic6Parser.TAB - 130)) | (1 << (VisualBasic6Parser.TEXT - 130)) | (1 << (VisualBasic6Parser.THEN - 130)) | (1 << (VisualBasic6Parser.TIME - 130)) | (1 << (VisualBasic6Parser.TO - 130)) | (1 << (VisualBasic6Parser.TRUE - 130)) | (1 << (VisualBasic6Parser.TYPE - 130)) | (1 << (VisualBasic6Parser.TYPEOF - 130)) | (1 << (VisualBasic6Parser.UNLOAD - 130)) | (1 << (VisualBasic6Parser.UNLOCK - 130)) | (1 << (VisualBasic6Parser.UNTIL - 130)) | (1 << (VisualBasic6Parser.VARIANT - 130)) | (1 << (VisualBasic6Parser.VERSION - 130)) | (1 << (VisualBasic6Parser.WEND - 130)) | (1 << (VisualBasic6Parser.WHILE - 130)) | (1 << (VisualBasic6Parser.WIDTH - 130)) | (1 << (VisualBasic6Parser.WITH - 130)) | (1 << (VisualBasic6Parser.WITHEVENTS - 130)) | (1 << (VisualBasic6Parser.WRITE - 130)) | (1 << (VisualBasic6Parser.XOR - 130)) | (1 << (VisualBasic6Parser.COMMA - 130)) | (1 << (VisualBasic6Parser.DOT - 130)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 130)) | (1 << (VisualBasic6Parser.LPAREN - 130)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (VisualBasic6Parser.MINUS - 195)) | (1 << (VisualBasic6Parser.PLUS - 195)) | (1 << (VisualBasic6Parser.SEMICOLON - 195)) | (1 << (VisualBasic6Parser.L_SQUARE_BRACKET - 195)) | (1 << (VisualBasic6Parser.STRINGLITERAL - 195)) | (1 << (VisualBasic6Parser.DATELITERAL - 195)) | (1 << (VisualBasic6Parser.COLORLITERAL - 195)) | (1 << (VisualBasic6Parser.INTEGERLITERAL - 195)) | (1 << (VisualBasic6Parser.DOUBLELITERAL - 195)) | (1 << (VisualBasic6Parser.FILENUMBER - 195)) | (1 << (VisualBasic6Parser.OCTALLITERAL - 195)) | (1 << (VisualBasic6Parser.IDENTIFIER - 195)) | (1 << (VisualBasic6Parser.WS - 195)))) != 0):
                self.state = 2621
                self.argsCall()
                self.state = 2623
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualBasic6Parser.WS:
                    self.state = 2622
                    self.match(VisualBasic6Parser.WS)




            self.state = 2627
            self.match(VisualBasic6Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ICS_S_MembersCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def iCS_S_VariableOrProcedureCall(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ICS_S_VariableOrProcedureCallContext,0)


        def iCS_S_ProcedureOrArrayCall(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ICS_S_ProcedureOrArrayCallContext,0)


        def iCS_S_MemberCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ICS_S_MemberCallContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ICS_S_MemberCallContext,i)


        def dictionaryCallStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.DictionaryCallStmtContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_iCS_S_MembersCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterICS_S_MembersCall" ):
                listener.enterICS_S_MembersCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitICS_S_MembersCall" ):
                listener.exitICS_S_MembersCall(self)




    def iCS_S_MembersCall(self):

        localctx = VisualBasic6Parser.ICS_S_MembersCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_iCS_S_MembersCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2631
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,442,self._ctx)
            if la_ == 1:
                self.state = 2629
                self.iCS_S_VariableOrProcedureCall()

            elif la_ == 2:
                self.state = 2630
                self.iCS_S_ProcedureOrArrayCall()


            self.state = 2634 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2633
                    self.iCS_S_MemberCall()

                else:
                    raise NoViableAltException(self)
                self.state = 2636 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,443,self._ctx)

            self.state = 2639
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,444,self._ctx)
            if la_ == 1:
                self.state = 2638
                self.dictionaryCallStmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ICS_S_MemberCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(VisualBasic6Parser.DOT, 0)

        def iCS_S_VariableOrProcedureCall(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ICS_S_VariableOrProcedureCallContext,0)


        def iCS_S_ProcedureOrArrayCall(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ICS_S_ProcedureOrArrayCallContext,0)


        def WS(self):
            return self.getToken(VisualBasic6Parser.WS, 0)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_iCS_S_MemberCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterICS_S_MemberCall" ):
                listener.enterICS_S_MemberCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitICS_S_MemberCall" ):
                listener.exitICS_S_MemberCall(self)




    def iCS_S_MemberCall(self):

        localctx = VisualBasic6Parser.ICS_S_MemberCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_iCS_S_MemberCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 2641
                self.match(VisualBasic6Parser.WS)


            self.state = 2644
            self.match(VisualBasic6Parser.DOT)
            self.state = 2647
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,446,self._ctx)
            if la_ == 1:
                self.state = 2645
                self.iCS_S_VariableOrProcedureCall()
                pass

            elif la_ == 2:
                self.state = 2646
                self.iCS_S_ProcedureOrArrayCall()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ICS_S_DictionaryCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dictionaryCallStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.DictionaryCallStmtContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_iCS_S_DictionaryCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterICS_S_DictionaryCall" ):
                listener.enterICS_S_DictionaryCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitICS_S_DictionaryCall" ):
                listener.exitICS_S_DictionaryCall(self)




    def iCS_S_DictionaryCall(self):

        localctx = VisualBasic6Parser.ICS_S_DictionaryCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_iCS_S_DictionaryCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2649
            self.dictionaryCallStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgsCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ArgCallContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ArgCallContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.COMMA)
            else:
                return self.getToken(VisualBasic6Parser.COMMA, i)

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.SEMICOLON)
            else:
                return self.getToken(VisualBasic6Parser.SEMICOLON, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_argsCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgsCall" ):
                listener.enterArgsCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgsCall" ):
                listener.exitArgsCall(self)




    def argsCall(self):

        localctx = VisualBasic6Parser.ArgsCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_argsCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2663
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,450,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2652
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,447,self._ctx)
                    if la_ == 1:
                        self.state = 2651
                        self.argCall()


                    self.state = 2655
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualBasic6Parser.WS:
                        self.state = 2654
                        self.match(VisualBasic6Parser.WS)


                    self.state = 2657
                    _la = self._input.LA(1)
                    if not(_la==VisualBasic6Parser.COMMA or _la==VisualBasic6Parser.SEMICOLON):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2659
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,449,self._ctx)
                    if la_ == 1:
                        self.state = 2658
                        self.match(VisualBasic6Parser.WS)

             
                self.state = 2665
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,450,self._ctx)

            self.state = 2666
            self.argCall()
            self.state = 2679
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,454,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2668
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualBasic6Parser.WS:
                        self.state = 2667
                        self.match(VisualBasic6Parser.WS)


                    self.state = 2670
                    _la = self._input.LA(1)
                    if not(_la==VisualBasic6Parser.COMMA or _la==VisualBasic6Parser.SEMICOLON):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2672
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,452,self._ctx)
                    if la_ == 1:
                        self.state = 2671
                        self.match(VisualBasic6Parser.WS)


                    self.state = 2675
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,453,self._ctx)
                    if la_ == 1:
                        self.state = 2674
                        self.argCall()

             
                self.state = 2681
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,454,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,0)


        def WS(self):
            return self.getToken(VisualBasic6Parser.WS, 0)

        def BYVAL(self):
            return self.getToken(VisualBasic6Parser.BYVAL, 0)

        def BYREF(self):
            return self.getToken(VisualBasic6Parser.BYREF, 0)

        def PARAMARRAY(self):
            return self.getToken(VisualBasic6Parser.PARAMARRAY, 0)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_argCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgCall" ):
                listener.enterArgCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgCall" ):
                listener.exitArgCall(self)




    def argCall(self):

        localctx = VisualBasic6Parser.ArgCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_argCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2684
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,455,self._ctx)
            if la_ == 1:
                self.state = 2682
                _la = self._input.LA(1)
                if not(_la==VisualBasic6Parser.BYVAL or _la==VisualBasic6Parser.BYREF or _la==VisualBasic6Parser.PARAMARRAY):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2683
                self.match(VisualBasic6Parser.WS)


            self.state = 2686
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DictionaryCallStmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCLAMATIONMARK(self):
            return self.getToken(VisualBasic6Parser.EXCLAMATIONMARK, 0)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(VisualBasic6Parser.AmbiguousIdentifierContext,0)


        def typeHint(self):
            return self.getTypedRuleContext(VisualBasic6Parser.TypeHintContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_dictionaryCallStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictionaryCallStmt" ):
                listener.enterDictionaryCallStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictionaryCallStmt" ):
                listener.exitDictionaryCallStmt(self)




    def dictionaryCallStmt(self):

        localctx = VisualBasic6Parser.DictionaryCallStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_dictionaryCallStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2688
            self.match(VisualBasic6Parser.EXCLAMATIONMARK)
            self.state = 2689
            self.ambiguousIdentifier()
            self.state = 2691
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,456,self._ctx)
            if la_ == 1:
                self.state = 2690
                self.typeHint()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(VisualBasic6Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(VisualBasic6Parser.RPAREN, 0)

        def arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ArgContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ArgContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.COMMA)
            else:
                return self.getToken(VisualBasic6Parser.COMMA, i)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_argList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgList" ):
                listener.enterArgList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgList" ):
                listener.exitArgList(self)




    def argList(self):

        localctx = VisualBasic6Parser.ArgListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_argList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2693
            self.match(VisualBasic6Parser.LPAREN)
            self.state = 2711
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,461,self._ctx)
            if la_ == 1:
                self.state = 2695
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualBasic6Parser.WS:
                    self.state = 2694
                    self.match(VisualBasic6Parser.WS)


                self.state = 2697
                self.arg()
                self.state = 2708
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,460,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2699
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualBasic6Parser.WS:
                            self.state = 2698
                            self.match(VisualBasic6Parser.WS)


                        self.state = 2701
                        self.match(VisualBasic6Parser.COMMA)
                        self.state = 2703
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==VisualBasic6Parser.WS:
                            self.state = 2702
                            self.match(VisualBasic6Parser.WS)


                        self.state = 2705
                        self.arg() 
                    self.state = 2710
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,460,self._ctx)



            self.state = 2714
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 2713
                self.match(VisualBasic6Parser.WS)


            self.state = 2716
            self.match(VisualBasic6Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(VisualBasic6Parser.AmbiguousIdentifierContext,0)


        def OPTIONAL(self):
            return self.getToken(VisualBasic6Parser.OPTIONAL, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def PARAMARRAY(self):
            return self.getToken(VisualBasic6Parser.PARAMARRAY, 0)

        def typeHint(self):
            return self.getTypedRuleContext(VisualBasic6Parser.TypeHintContext,0)


        def LPAREN(self):
            return self.getToken(VisualBasic6Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(VisualBasic6Parser.RPAREN, 0)

        def asTypeClause(self):
            return self.getTypedRuleContext(VisualBasic6Parser.AsTypeClauseContext,0)


        def argDefaultValue(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ArgDefaultValueContext,0)


        def BYVAL(self):
            return self.getToken(VisualBasic6Parser.BYVAL, 0)

        def BYREF(self):
            return self.getToken(VisualBasic6Parser.BYREF, 0)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArg" ):
                listener.enterArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArg" ):
                listener.exitArg(self)




    def arg(self):

        localctx = VisualBasic6Parser.ArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_arg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2720
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,463,self._ctx)
            if la_ == 1:
                self.state = 2718
                self.match(VisualBasic6Parser.OPTIONAL)
                self.state = 2719
                self.match(VisualBasic6Parser.WS)


            self.state = 2724
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,464,self._ctx)
            if la_ == 1:
                self.state = 2722
                _la = self._input.LA(1)
                if not(_la==VisualBasic6Parser.BYVAL or _la==VisualBasic6Parser.BYREF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2723
                self.match(VisualBasic6Parser.WS)


            self.state = 2728
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,465,self._ctx)
            if la_ == 1:
                self.state = 2726
                self.match(VisualBasic6Parser.PARAMARRAY)
                self.state = 2727
                self.match(VisualBasic6Parser.WS)


            self.state = 2730
            self.ambiguousIdentifier()
            self.state = 2732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & ((1 << (VisualBasic6Parser.AMPERSAND - 178)) | (1 << (VisualBasic6Parser.AT - 178)) | (1 << (VisualBasic6Parser.DOLLAR - 178)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 178)) | (1 << (VisualBasic6Parser.HASH - 178)) | (1 << (VisualBasic6Parser.PERCENT - 178)))) != 0):
                self.state = 2731
                self.typeHint()


            self.state = 2742
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,469,self._ctx)
            if la_ == 1:
                self.state = 2735
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualBasic6Parser.WS:
                    self.state = 2734
                    self.match(VisualBasic6Parser.WS)


                self.state = 2737
                self.match(VisualBasic6Parser.LPAREN)
                self.state = 2739
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualBasic6Parser.WS:
                    self.state = 2738
                    self.match(VisualBasic6Parser.WS)


                self.state = 2741
                self.match(VisualBasic6Parser.RPAREN)


            self.state = 2746
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,470,self._ctx)
            if la_ == 1:
                self.state = 2744
                self.match(VisualBasic6Parser.WS)
                self.state = 2745
                self.asTypeClause()


            self.state = 2752
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,472,self._ctx)
            if la_ == 1:
                self.state = 2749
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualBasic6Parser.WS:
                    self.state = 2748
                    self.match(VisualBasic6Parser.WS)


                self.state = 2751
                self.argDefaultValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgDefaultValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(VisualBasic6Parser.EQ, 0)

        def valueStmt(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,0)


        def WS(self):
            return self.getToken(VisualBasic6Parser.WS, 0)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_argDefaultValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgDefaultValue" ):
                listener.enterArgDefaultValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgDefaultValue" ):
                listener.exitArgDefaultValue(self)




    def argDefaultValue(self):

        localctx = VisualBasic6Parser.ArgDefaultValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_argDefaultValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2754
            self.match(VisualBasic6Parser.EQ)
            self.state = 2756
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,473,self._ctx)
            if la_ == 1:
                self.state = 2755
                self.match(VisualBasic6Parser.WS)


            self.state = 2758
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubscriptsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.SubscriptContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.SubscriptContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.COMMA)
            else:
                return self.getToken(VisualBasic6Parser.COMMA, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_subscripts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscripts" ):
                listener.enterSubscripts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscripts" ):
                listener.exitSubscripts(self)




    def subscripts(self):

        localctx = VisualBasic6Parser.SubscriptsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_subscripts)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2760
            self.subscript()
            self.state = 2771
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,476,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2762
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VisualBasic6Parser.WS:
                        self.state = 2761
                        self.match(VisualBasic6Parser.WS)


                    self.state = 2764
                    self.match(VisualBasic6Parser.COMMA)
                    self.state = 2766
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,475,self._ctx)
                    if la_ == 1:
                        self.state = 2765
                        self.match(VisualBasic6Parser.WS)


                    self.state = 2768
                    self.subscript() 
                self.state = 2773
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,476,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubscriptContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.ValueStmtContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.ValueStmtContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def TO(self):
            return self.getToken(VisualBasic6Parser.TO, 0)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_subscript

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)




    def subscript(self):

        localctx = VisualBasic6Parser.SubscriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_subscript)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2779
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,477,self._ctx)
            if la_ == 1:
                self.state = 2774
                self.valueStmt(0)
                self.state = 2775
                self.match(VisualBasic6Parser.WS)
                self.state = 2776
                self.match(VisualBasic6Parser.TO)
                self.state = 2777
                self.match(VisualBasic6Parser.WS)


            self.state = 2781
            self.valueStmt(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AmbiguousIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.IDENTIFIER)
            else:
                return self.getToken(VisualBasic6Parser.IDENTIFIER, i)

        def ambiguousKeyword(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.AmbiguousKeywordContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.AmbiguousKeywordContext,i)


        def L_SQUARE_BRACKET(self):
            return self.getToken(VisualBasic6Parser.L_SQUARE_BRACKET, 0)

        def R_SQUARE_BRACKET(self):
            return self.getToken(VisualBasic6Parser.R_SQUARE_BRACKET, 0)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_ambiguousIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAmbiguousIdentifier" ):
                listener.enterAmbiguousIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAmbiguousIdentifier" ):
                listener.exitAmbiguousIdentifier(self)




    def ambiguousIdentifier(self):

        localctx = VisualBasic6Parser.AmbiguousIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_ambiguousIdentifier)
        self._la = 0 # Token type
        try:
            self.state = 2797
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualBasic6Parser.ACCESS, VisualBasic6Parser.ADDRESSOF, VisualBasic6Parser.ALIAS, VisualBasic6Parser.AND, VisualBasic6Parser.ATTRIBUTE, VisualBasic6Parser.APPACTIVATE, VisualBasic6Parser.APPEND, VisualBasic6Parser.AS, VisualBasic6Parser.BEEP, VisualBasic6Parser.BEGIN, VisualBasic6Parser.BINARY, VisualBasic6Parser.BOOLEAN, VisualBasic6Parser.BYVAL, VisualBasic6Parser.BYREF, VisualBasic6Parser.BYTE, VisualBasic6Parser.CALL, VisualBasic6Parser.CASE, VisualBasic6Parser.CHDIR, VisualBasic6Parser.CHDRIVE, VisualBasic6Parser.CLASS, VisualBasic6Parser.CLOSE, VisualBasic6Parser.COLLECTION, VisualBasic6Parser.CONST, VisualBasic6Parser.DATE, VisualBasic6Parser.DECLARE, VisualBasic6Parser.DEFBOOL, VisualBasic6Parser.DEFBYTE, VisualBasic6Parser.DEFDATE, VisualBasic6Parser.DEFDBL, VisualBasic6Parser.DEFDEC, VisualBasic6Parser.DEFCUR, VisualBasic6Parser.DEFINT, VisualBasic6Parser.DEFLNG, VisualBasic6Parser.DEFOBJ, VisualBasic6Parser.DEFSNG, VisualBasic6Parser.DEFSTR, VisualBasic6Parser.DEFVAR, VisualBasic6Parser.DELETESETTING, VisualBasic6Parser.DIM, VisualBasic6Parser.DO, VisualBasic6Parser.DOUBLE, VisualBasic6Parser.EACH, VisualBasic6Parser.ELSE, VisualBasic6Parser.ELSEIF, VisualBasic6Parser.END, VisualBasic6Parser.ENUM, VisualBasic6Parser.EQV, VisualBasic6Parser.ERASE, VisualBasic6Parser.ERROR, VisualBasic6Parser.EVENT, VisualBasic6Parser.FALSE, VisualBasic6Parser.FILECOPY, VisualBasic6Parser.FRIEND, VisualBasic6Parser.FOR, VisualBasic6Parser.FUNCTION, VisualBasic6Parser.GET, VisualBasic6Parser.GLOBAL, VisualBasic6Parser.GOSUB, VisualBasic6Parser.GOTO, VisualBasic6Parser.IF, VisualBasic6Parser.IMP, VisualBasic6Parser.IMPLEMENTS, VisualBasic6Parser.IN, VisualBasic6Parser.INPUT, VisualBasic6Parser.IS, VisualBasic6Parser.INTEGER, VisualBasic6Parser.KILL, VisualBasic6Parser.LOAD, VisualBasic6Parser.LOCK, VisualBasic6Parser.LONG, VisualBasic6Parser.LOOP, VisualBasic6Parser.LEN, VisualBasic6Parser.LET, VisualBasic6Parser.LIB, VisualBasic6Parser.LIKE, VisualBasic6Parser.LSET, VisualBasic6Parser.ME, VisualBasic6Parser.MID, VisualBasic6Parser.MKDIR, VisualBasic6Parser.MOD, VisualBasic6Parser.NAME, VisualBasic6Parser.NEXT, VisualBasic6Parser.NEW, VisualBasic6Parser.NOT, VisualBasic6Parser.NOTHING, VisualBasic6Parser.NULL, VisualBasic6Parser.OBJECT, VisualBasic6Parser.ON, VisualBasic6Parser.OPEN, VisualBasic6Parser.OPTIONAL, VisualBasic6Parser.OR, VisualBasic6Parser.OUTPUT, VisualBasic6Parser.PARAMARRAY, VisualBasic6Parser.PRESERVE, VisualBasic6Parser.PRINT, VisualBasic6Parser.PRIVATE, VisualBasic6Parser.PUBLIC, VisualBasic6Parser.PUT, VisualBasic6Parser.RANDOM, VisualBasic6Parser.RANDOMIZE, VisualBasic6Parser.RAISEEVENT, VisualBasic6Parser.READ, VisualBasic6Parser.REDIM, VisualBasic6Parser.REM, VisualBasic6Parser.RESET, VisualBasic6Parser.RESUME, VisualBasic6Parser.RETURN, VisualBasic6Parser.RMDIR, VisualBasic6Parser.RSET, VisualBasic6Parser.SAVEPICTURE, VisualBasic6Parser.SAVESETTING, VisualBasic6Parser.SEEK, VisualBasic6Parser.SELECT, VisualBasic6Parser.SENDKEYS, VisualBasic6Parser.SET, VisualBasic6Parser.SETATTR, VisualBasic6Parser.SHARED, VisualBasic6Parser.SINGLE, VisualBasic6Parser.SPC, VisualBasic6Parser.STATIC, VisualBasic6Parser.STEP, VisualBasic6Parser.STOP, VisualBasic6Parser.STRING, VisualBasic6Parser.SUB, VisualBasic6Parser.TAB, VisualBasic6Parser.TEXT, VisualBasic6Parser.THEN, VisualBasic6Parser.TIME, VisualBasic6Parser.TO, VisualBasic6Parser.TRUE, VisualBasic6Parser.TYPE, VisualBasic6Parser.TYPEOF, VisualBasic6Parser.UNLOAD, VisualBasic6Parser.UNLOCK, VisualBasic6Parser.UNTIL, VisualBasic6Parser.VARIANT, VisualBasic6Parser.VERSION, VisualBasic6Parser.WEND, VisualBasic6Parser.WHILE, VisualBasic6Parser.WIDTH, VisualBasic6Parser.WITH, VisualBasic6Parser.WITHEVENTS, VisualBasic6Parser.WRITE, VisualBasic6Parser.XOR, VisualBasic6Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2785 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2785
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [VisualBasic6Parser.IDENTIFIER]:
                            self.state = 2783
                            self.match(VisualBasic6Parser.IDENTIFIER)
                            pass
                        elif token in [VisualBasic6Parser.ACCESS, VisualBasic6Parser.ADDRESSOF, VisualBasic6Parser.ALIAS, VisualBasic6Parser.AND, VisualBasic6Parser.ATTRIBUTE, VisualBasic6Parser.APPACTIVATE, VisualBasic6Parser.APPEND, VisualBasic6Parser.AS, VisualBasic6Parser.BEEP, VisualBasic6Parser.BEGIN, VisualBasic6Parser.BINARY, VisualBasic6Parser.BOOLEAN, VisualBasic6Parser.BYVAL, VisualBasic6Parser.BYREF, VisualBasic6Parser.BYTE, VisualBasic6Parser.CALL, VisualBasic6Parser.CASE, VisualBasic6Parser.CHDIR, VisualBasic6Parser.CHDRIVE, VisualBasic6Parser.CLASS, VisualBasic6Parser.CLOSE, VisualBasic6Parser.COLLECTION, VisualBasic6Parser.CONST, VisualBasic6Parser.DATE, VisualBasic6Parser.DECLARE, VisualBasic6Parser.DEFBOOL, VisualBasic6Parser.DEFBYTE, VisualBasic6Parser.DEFDATE, VisualBasic6Parser.DEFDBL, VisualBasic6Parser.DEFDEC, VisualBasic6Parser.DEFCUR, VisualBasic6Parser.DEFINT, VisualBasic6Parser.DEFLNG, VisualBasic6Parser.DEFOBJ, VisualBasic6Parser.DEFSNG, VisualBasic6Parser.DEFSTR, VisualBasic6Parser.DEFVAR, VisualBasic6Parser.DELETESETTING, VisualBasic6Parser.DIM, VisualBasic6Parser.DO, VisualBasic6Parser.DOUBLE, VisualBasic6Parser.EACH, VisualBasic6Parser.ELSE, VisualBasic6Parser.ELSEIF, VisualBasic6Parser.END, VisualBasic6Parser.ENUM, VisualBasic6Parser.EQV, VisualBasic6Parser.ERASE, VisualBasic6Parser.ERROR, VisualBasic6Parser.EVENT, VisualBasic6Parser.FALSE, VisualBasic6Parser.FILECOPY, VisualBasic6Parser.FRIEND, VisualBasic6Parser.FOR, VisualBasic6Parser.FUNCTION, VisualBasic6Parser.GET, VisualBasic6Parser.GLOBAL, VisualBasic6Parser.GOSUB, VisualBasic6Parser.GOTO, VisualBasic6Parser.IF, VisualBasic6Parser.IMP, VisualBasic6Parser.IMPLEMENTS, VisualBasic6Parser.IN, VisualBasic6Parser.INPUT, VisualBasic6Parser.IS, VisualBasic6Parser.INTEGER, VisualBasic6Parser.KILL, VisualBasic6Parser.LOAD, VisualBasic6Parser.LOCK, VisualBasic6Parser.LONG, VisualBasic6Parser.LOOP, VisualBasic6Parser.LEN, VisualBasic6Parser.LET, VisualBasic6Parser.LIB, VisualBasic6Parser.LIKE, VisualBasic6Parser.LSET, VisualBasic6Parser.ME, VisualBasic6Parser.MID, VisualBasic6Parser.MKDIR, VisualBasic6Parser.MOD, VisualBasic6Parser.NAME, VisualBasic6Parser.NEXT, VisualBasic6Parser.NEW, VisualBasic6Parser.NOT, VisualBasic6Parser.NOTHING, VisualBasic6Parser.NULL, VisualBasic6Parser.OBJECT, VisualBasic6Parser.ON, VisualBasic6Parser.OPEN, VisualBasic6Parser.OPTIONAL, VisualBasic6Parser.OR, VisualBasic6Parser.OUTPUT, VisualBasic6Parser.PARAMARRAY, VisualBasic6Parser.PRESERVE, VisualBasic6Parser.PRINT, VisualBasic6Parser.PRIVATE, VisualBasic6Parser.PUBLIC, VisualBasic6Parser.PUT, VisualBasic6Parser.RANDOM, VisualBasic6Parser.RANDOMIZE, VisualBasic6Parser.RAISEEVENT, VisualBasic6Parser.READ, VisualBasic6Parser.REDIM, VisualBasic6Parser.REM, VisualBasic6Parser.RESET, VisualBasic6Parser.RESUME, VisualBasic6Parser.RETURN, VisualBasic6Parser.RMDIR, VisualBasic6Parser.RSET, VisualBasic6Parser.SAVEPICTURE, VisualBasic6Parser.SAVESETTING, VisualBasic6Parser.SEEK, VisualBasic6Parser.SELECT, VisualBasic6Parser.SENDKEYS, VisualBasic6Parser.SET, VisualBasic6Parser.SETATTR, VisualBasic6Parser.SHARED, VisualBasic6Parser.SINGLE, VisualBasic6Parser.SPC, VisualBasic6Parser.STATIC, VisualBasic6Parser.STEP, VisualBasic6Parser.STOP, VisualBasic6Parser.STRING, VisualBasic6Parser.SUB, VisualBasic6Parser.TAB, VisualBasic6Parser.TEXT, VisualBasic6Parser.THEN, VisualBasic6Parser.TIME, VisualBasic6Parser.TO, VisualBasic6Parser.TRUE, VisualBasic6Parser.TYPE, VisualBasic6Parser.TYPEOF, VisualBasic6Parser.UNLOAD, VisualBasic6Parser.UNLOCK, VisualBasic6Parser.UNTIL, VisualBasic6Parser.VARIANT, VisualBasic6Parser.VERSION, VisualBasic6Parser.WEND, VisualBasic6Parser.WHILE, VisualBasic6Parser.WIDTH, VisualBasic6Parser.WITH, VisualBasic6Parser.WITHEVENTS, VisualBasic6Parser.WRITE, VisualBasic6Parser.XOR]:
                            self.state = 2784
                            self.ambiguousKeyword()
                            pass
                        else:
                            raise NoViableAltException(self)


                    else:
                        raise NoViableAltException(self)
                    self.state = 2787 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,479,self._ctx)

                pass
            elif token in [VisualBasic6Parser.L_SQUARE_BRACKET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2789
                self.match(VisualBasic6Parser.L_SQUARE_BRACKET)
                self.state = 2792 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2792
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VisualBasic6Parser.IDENTIFIER]:
                        self.state = 2790
                        self.match(VisualBasic6Parser.IDENTIFIER)
                        pass
                    elif token in [VisualBasic6Parser.ACCESS, VisualBasic6Parser.ADDRESSOF, VisualBasic6Parser.ALIAS, VisualBasic6Parser.AND, VisualBasic6Parser.ATTRIBUTE, VisualBasic6Parser.APPACTIVATE, VisualBasic6Parser.APPEND, VisualBasic6Parser.AS, VisualBasic6Parser.BEEP, VisualBasic6Parser.BEGIN, VisualBasic6Parser.BINARY, VisualBasic6Parser.BOOLEAN, VisualBasic6Parser.BYVAL, VisualBasic6Parser.BYREF, VisualBasic6Parser.BYTE, VisualBasic6Parser.CALL, VisualBasic6Parser.CASE, VisualBasic6Parser.CHDIR, VisualBasic6Parser.CHDRIVE, VisualBasic6Parser.CLASS, VisualBasic6Parser.CLOSE, VisualBasic6Parser.COLLECTION, VisualBasic6Parser.CONST, VisualBasic6Parser.DATE, VisualBasic6Parser.DECLARE, VisualBasic6Parser.DEFBOOL, VisualBasic6Parser.DEFBYTE, VisualBasic6Parser.DEFDATE, VisualBasic6Parser.DEFDBL, VisualBasic6Parser.DEFDEC, VisualBasic6Parser.DEFCUR, VisualBasic6Parser.DEFINT, VisualBasic6Parser.DEFLNG, VisualBasic6Parser.DEFOBJ, VisualBasic6Parser.DEFSNG, VisualBasic6Parser.DEFSTR, VisualBasic6Parser.DEFVAR, VisualBasic6Parser.DELETESETTING, VisualBasic6Parser.DIM, VisualBasic6Parser.DO, VisualBasic6Parser.DOUBLE, VisualBasic6Parser.EACH, VisualBasic6Parser.ELSE, VisualBasic6Parser.ELSEIF, VisualBasic6Parser.END, VisualBasic6Parser.ENUM, VisualBasic6Parser.EQV, VisualBasic6Parser.ERASE, VisualBasic6Parser.ERROR, VisualBasic6Parser.EVENT, VisualBasic6Parser.FALSE, VisualBasic6Parser.FILECOPY, VisualBasic6Parser.FRIEND, VisualBasic6Parser.FOR, VisualBasic6Parser.FUNCTION, VisualBasic6Parser.GET, VisualBasic6Parser.GLOBAL, VisualBasic6Parser.GOSUB, VisualBasic6Parser.GOTO, VisualBasic6Parser.IF, VisualBasic6Parser.IMP, VisualBasic6Parser.IMPLEMENTS, VisualBasic6Parser.IN, VisualBasic6Parser.INPUT, VisualBasic6Parser.IS, VisualBasic6Parser.INTEGER, VisualBasic6Parser.KILL, VisualBasic6Parser.LOAD, VisualBasic6Parser.LOCK, VisualBasic6Parser.LONG, VisualBasic6Parser.LOOP, VisualBasic6Parser.LEN, VisualBasic6Parser.LET, VisualBasic6Parser.LIB, VisualBasic6Parser.LIKE, VisualBasic6Parser.LSET, VisualBasic6Parser.ME, VisualBasic6Parser.MID, VisualBasic6Parser.MKDIR, VisualBasic6Parser.MOD, VisualBasic6Parser.NAME, VisualBasic6Parser.NEXT, VisualBasic6Parser.NEW, VisualBasic6Parser.NOT, VisualBasic6Parser.NOTHING, VisualBasic6Parser.NULL, VisualBasic6Parser.OBJECT, VisualBasic6Parser.ON, VisualBasic6Parser.OPEN, VisualBasic6Parser.OPTIONAL, VisualBasic6Parser.OR, VisualBasic6Parser.OUTPUT, VisualBasic6Parser.PARAMARRAY, VisualBasic6Parser.PRESERVE, VisualBasic6Parser.PRINT, VisualBasic6Parser.PRIVATE, VisualBasic6Parser.PUBLIC, VisualBasic6Parser.PUT, VisualBasic6Parser.RANDOM, VisualBasic6Parser.RANDOMIZE, VisualBasic6Parser.RAISEEVENT, VisualBasic6Parser.READ, VisualBasic6Parser.REDIM, VisualBasic6Parser.REM, VisualBasic6Parser.RESET, VisualBasic6Parser.RESUME, VisualBasic6Parser.RETURN, VisualBasic6Parser.RMDIR, VisualBasic6Parser.RSET, VisualBasic6Parser.SAVEPICTURE, VisualBasic6Parser.SAVESETTING, VisualBasic6Parser.SEEK, VisualBasic6Parser.SELECT, VisualBasic6Parser.SENDKEYS, VisualBasic6Parser.SET, VisualBasic6Parser.SETATTR, VisualBasic6Parser.SHARED, VisualBasic6Parser.SINGLE, VisualBasic6Parser.SPC, VisualBasic6Parser.STATIC, VisualBasic6Parser.STEP, VisualBasic6Parser.STOP, VisualBasic6Parser.STRING, VisualBasic6Parser.SUB, VisualBasic6Parser.TAB, VisualBasic6Parser.TEXT, VisualBasic6Parser.THEN, VisualBasic6Parser.TIME, VisualBasic6Parser.TO, VisualBasic6Parser.TRUE, VisualBasic6Parser.TYPE, VisualBasic6Parser.TYPEOF, VisualBasic6Parser.UNLOAD, VisualBasic6Parser.UNLOCK, VisualBasic6Parser.UNTIL, VisualBasic6Parser.VARIANT, VisualBasic6Parser.VERSION, VisualBasic6Parser.WEND, VisualBasic6Parser.WHILE, VisualBasic6Parser.WIDTH, VisualBasic6Parser.WITH, VisualBasic6Parser.WITHEVENTS, VisualBasic6Parser.WRITE, VisualBasic6Parser.XOR]:
                        self.state = 2791
                        self.ambiguousKeyword()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 2794 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualBasic6Parser.ACCESS) | (1 << VisualBasic6Parser.ADDRESSOF) | (1 << VisualBasic6Parser.ALIAS) | (1 << VisualBasic6Parser.AND) | (1 << VisualBasic6Parser.ATTRIBUTE) | (1 << VisualBasic6Parser.APPACTIVATE) | (1 << VisualBasic6Parser.APPEND) | (1 << VisualBasic6Parser.AS) | (1 << VisualBasic6Parser.BEEP) | (1 << VisualBasic6Parser.BEGIN) | (1 << VisualBasic6Parser.BINARY) | (1 << VisualBasic6Parser.BOOLEAN) | (1 << VisualBasic6Parser.BYVAL) | (1 << VisualBasic6Parser.BYREF) | (1 << VisualBasic6Parser.BYTE) | (1 << VisualBasic6Parser.CALL) | (1 << VisualBasic6Parser.CASE) | (1 << VisualBasic6Parser.CHDIR) | (1 << VisualBasic6Parser.CHDRIVE) | (1 << VisualBasic6Parser.CLASS) | (1 << VisualBasic6Parser.CLOSE) | (1 << VisualBasic6Parser.COLLECTION) | (1 << VisualBasic6Parser.CONST) | (1 << VisualBasic6Parser.DATE) | (1 << VisualBasic6Parser.DECLARE) | (1 << VisualBasic6Parser.DEFBOOL) | (1 << VisualBasic6Parser.DEFBYTE) | (1 << VisualBasic6Parser.DEFDATE) | (1 << VisualBasic6Parser.DEFDBL) | (1 << VisualBasic6Parser.DEFDEC) | (1 << VisualBasic6Parser.DEFCUR) | (1 << VisualBasic6Parser.DEFINT) | (1 << VisualBasic6Parser.DEFLNG) | (1 << VisualBasic6Parser.DEFOBJ) | (1 << VisualBasic6Parser.DEFSNG) | (1 << VisualBasic6Parser.DEFSTR) | (1 << VisualBasic6Parser.DEFVAR) | (1 << VisualBasic6Parser.DELETESETTING) | (1 << VisualBasic6Parser.DIM) | (1 << VisualBasic6Parser.DO) | (1 << VisualBasic6Parser.DOUBLE) | (1 << VisualBasic6Parser.EACH) | (1 << VisualBasic6Parser.ELSE) | (1 << VisualBasic6Parser.ELSEIF) | (1 << VisualBasic6Parser.END) | (1 << VisualBasic6Parser.ENUM) | (1 << VisualBasic6Parser.EQV) | (1 << VisualBasic6Parser.ERASE) | (1 << VisualBasic6Parser.ERROR) | (1 << VisualBasic6Parser.EVENT))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (VisualBasic6Parser.FALSE - 66)) | (1 << (VisualBasic6Parser.FILECOPY - 66)) | (1 << (VisualBasic6Parser.FRIEND - 66)) | (1 << (VisualBasic6Parser.FOR - 66)) | (1 << (VisualBasic6Parser.FUNCTION - 66)) | (1 << (VisualBasic6Parser.GET - 66)) | (1 << (VisualBasic6Parser.GLOBAL - 66)) | (1 << (VisualBasic6Parser.GOSUB - 66)) | (1 << (VisualBasic6Parser.GOTO - 66)) | (1 << (VisualBasic6Parser.IF - 66)) | (1 << (VisualBasic6Parser.IMP - 66)) | (1 << (VisualBasic6Parser.IMPLEMENTS - 66)) | (1 << (VisualBasic6Parser.IN - 66)) | (1 << (VisualBasic6Parser.INPUT - 66)) | (1 << (VisualBasic6Parser.IS - 66)) | (1 << (VisualBasic6Parser.INTEGER - 66)) | (1 << (VisualBasic6Parser.KILL - 66)) | (1 << (VisualBasic6Parser.LOAD - 66)) | (1 << (VisualBasic6Parser.LOCK - 66)) | (1 << (VisualBasic6Parser.LONG - 66)) | (1 << (VisualBasic6Parser.LOOP - 66)) | (1 << (VisualBasic6Parser.LEN - 66)) | (1 << (VisualBasic6Parser.LET - 66)) | (1 << (VisualBasic6Parser.LIB - 66)) | (1 << (VisualBasic6Parser.LIKE - 66)) | (1 << (VisualBasic6Parser.LSET - 66)) | (1 << (VisualBasic6Parser.ME - 66)) | (1 << (VisualBasic6Parser.MID - 66)) | (1 << (VisualBasic6Parser.MKDIR - 66)) | (1 << (VisualBasic6Parser.MOD - 66)) | (1 << (VisualBasic6Parser.NAME - 66)) | (1 << (VisualBasic6Parser.NEXT - 66)) | (1 << (VisualBasic6Parser.NEW - 66)) | (1 << (VisualBasic6Parser.NOT - 66)) | (1 << (VisualBasic6Parser.NOTHING - 66)) | (1 << (VisualBasic6Parser.NULL - 66)) | (1 << (VisualBasic6Parser.OBJECT - 66)) | (1 << (VisualBasic6Parser.ON - 66)) | (1 << (VisualBasic6Parser.OPEN - 66)) | (1 << (VisualBasic6Parser.OPTIONAL - 66)) | (1 << (VisualBasic6Parser.OR - 66)) | (1 << (VisualBasic6Parser.OUTPUT - 66)) | (1 << (VisualBasic6Parser.PARAMARRAY - 66)) | (1 << (VisualBasic6Parser.PRESERVE - 66)) | (1 << (VisualBasic6Parser.PRINT - 66)) | (1 << (VisualBasic6Parser.PRIVATE - 66)) | (1 << (VisualBasic6Parser.PUBLIC - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (VisualBasic6Parser.PUT - 130)) | (1 << (VisualBasic6Parser.RANDOM - 130)) | (1 << (VisualBasic6Parser.RANDOMIZE - 130)) | (1 << (VisualBasic6Parser.RAISEEVENT - 130)) | (1 << (VisualBasic6Parser.READ - 130)) | (1 << (VisualBasic6Parser.REDIM - 130)) | (1 << (VisualBasic6Parser.REM - 130)) | (1 << (VisualBasic6Parser.RESET - 130)) | (1 << (VisualBasic6Parser.RESUME - 130)) | (1 << (VisualBasic6Parser.RETURN - 130)) | (1 << (VisualBasic6Parser.RMDIR - 130)) | (1 << (VisualBasic6Parser.RSET - 130)) | (1 << (VisualBasic6Parser.SAVEPICTURE - 130)) | (1 << (VisualBasic6Parser.SAVESETTING - 130)) | (1 << (VisualBasic6Parser.SEEK - 130)) | (1 << (VisualBasic6Parser.SELECT - 130)) | (1 << (VisualBasic6Parser.SENDKEYS - 130)) | (1 << (VisualBasic6Parser.SET - 130)) | (1 << (VisualBasic6Parser.SETATTR - 130)) | (1 << (VisualBasic6Parser.SHARED - 130)) | (1 << (VisualBasic6Parser.SINGLE - 130)) | (1 << (VisualBasic6Parser.SPC - 130)) | (1 << (VisualBasic6Parser.STATIC - 130)) | (1 << (VisualBasic6Parser.STEP - 130)) | (1 << (VisualBasic6Parser.STOP - 130)) | (1 << (VisualBasic6Parser.STRING - 130)) | (1 << (VisualBasic6Parser.SUB - 130)) | (1 << (VisualBasic6Parser.TAB - 130)) | (1 << (VisualBasic6Parser.TEXT - 130)) | (1 << (VisualBasic6Parser.THEN - 130)) | (1 << (VisualBasic6Parser.TIME - 130)) | (1 << (VisualBasic6Parser.TO - 130)) | (1 << (VisualBasic6Parser.TRUE - 130)) | (1 << (VisualBasic6Parser.TYPE - 130)) | (1 << (VisualBasic6Parser.TYPEOF - 130)) | (1 << (VisualBasic6Parser.UNLOAD - 130)) | (1 << (VisualBasic6Parser.UNLOCK - 130)) | (1 << (VisualBasic6Parser.UNTIL - 130)) | (1 << (VisualBasic6Parser.VARIANT - 130)) | (1 << (VisualBasic6Parser.VERSION - 130)) | (1 << (VisualBasic6Parser.WEND - 130)) | (1 << (VisualBasic6Parser.WHILE - 130)) | (1 << (VisualBasic6Parser.WIDTH - 130)) | (1 << (VisualBasic6Parser.WITH - 130)) | (1 << (VisualBasic6Parser.WITHEVENTS - 130)) | (1 << (VisualBasic6Parser.WRITE - 130)) | (1 << (VisualBasic6Parser.XOR - 130)))) != 0) or _la==VisualBasic6Parser.IDENTIFIER):
                        break

                self.state = 2796
                self.match(VisualBasic6Parser.R_SQUARE_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AsTypeClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(VisualBasic6Parser.AS, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def type(self):
            return self.getTypedRuleContext(VisualBasic6Parser.TypeContext,0)


        def NEW(self):
            return self.getToken(VisualBasic6Parser.NEW, 0)

        def fieldLength(self):
            return self.getTypedRuleContext(VisualBasic6Parser.FieldLengthContext,0)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_asTypeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsTypeClause" ):
                listener.enterAsTypeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsTypeClause" ):
                listener.exitAsTypeClause(self)




    def asTypeClause(self):

        localctx = VisualBasic6Parser.AsTypeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_asTypeClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2799
            self.match(VisualBasic6Parser.AS)
            self.state = 2800
            self.match(VisualBasic6Parser.WS)
            self.state = 2803
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,483,self._ctx)
            if la_ == 1:
                self.state = 2801
                self.match(VisualBasic6Parser.NEW)
                self.state = 2802
                self.match(VisualBasic6Parser.WS)


            self.state = 2805
            self.type()
            self.state = 2808
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,484,self._ctx)
            if la_ == 1:
                self.state = 2806
                self.match(VisualBasic6Parser.WS)
                self.state = 2807
                self.fieldLength()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BaseTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOLEAN(self):
            return self.getToken(VisualBasic6Parser.BOOLEAN, 0)

        def BYTE(self):
            return self.getToken(VisualBasic6Parser.BYTE, 0)

        def COLLECTION(self):
            return self.getToken(VisualBasic6Parser.COLLECTION, 0)

        def DATE(self):
            return self.getToken(VisualBasic6Parser.DATE, 0)

        def DOUBLE(self):
            return self.getToken(VisualBasic6Parser.DOUBLE, 0)

        def INTEGER(self):
            return self.getToken(VisualBasic6Parser.INTEGER, 0)

        def LONG(self):
            return self.getToken(VisualBasic6Parser.LONG, 0)

        def OBJECT(self):
            return self.getToken(VisualBasic6Parser.OBJECT, 0)

        def SINGLE(self):
            return self.getToken(VisualBasic6Parser.SINGLE, 0)

        def STRING(self):
            return self.getToken(VisualBasic6Parser.STRING, 0)

        def VARIANT(self):
            return self.getToken(VisualBasic6Parser.VARIANT, 0)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_baseType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBaseType" ):
                listener.enterBaseType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBaseType" ):
                listener.exitBaseType(self)




    def baseType(self):

        localctx = VisualBasic6Parser.BaseTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_baseType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2810
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualBasic6Parser.BOOLEAN) | (1 << VisualBasic6Parser.BYTE) | (1 << VisualBasic6Parser.COLLECTION) | (1 << VisualBasic6Parser.DATE) | (1 << VisualBasic6Parser.DOUBLE))) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (VisualBasic6Parser.INTEGER - 81)) | (1 << (VisualBasic6Parser.LONG - 81)) | (1 << (VisualBasic6Parser.OBJECT - 81)))) != 0) or ((((_la - 151)) & ~0x3f) == 0 and ((1 << (_la - 151)) & ((1 << (VisualBasic6Parser.SINGLE - 151)) | (1 << (VisualBasic6Parser.STRING - 151)) | (1 << (VisualBasic6Parser.VARIANT - 151)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CertainIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.IDENTIFIER)
            else:
                return self.getToken(VisualBasic6Parser.IDENTIFIER, i)

        def ambiguousKeyword(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.AmbiguousKeywordContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.AmbiguousKeywordContext,i)


        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_certainIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCertainIdentifier" ):
                listener.enterCertainIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCertainIdentifier" ):
                listener.exitCertainIdentifier(self)




    def certainIdentifier(self):

        localctx = VisualBasic6Parser.CertainIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_certainIdentifier)
        try:
            self.state = 2827
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualBasic6Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2812
                self.match(VisualBasic6Parser.IDENTIFIER)
                self.state = 2817
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,486,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2815
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [VisualBasic6Parser.ACCESS, VisualBasic6Parser.ADDRESSOF, VisualBasic6Parser.ALIAS, VisualBasic6Parser.AND, VisualBasic6Parser.ATTRIBUTE, VisualBasic6Parser.APPACTIVATE, VisualBasic6Parser.APPEND, VisualBasic6Parser.AS, VisualBasic6Parser.BEEP, VisualBasic6Parser.BEGIN, VisualBasic6Parser.BINARY, VisualBasic6Parser.BOOLEAN, VisualBasic6Parser.BYVAL, VisualBasic6Parser.BYREF, VisualBasic6Parser.BYTE, VisualBasic6Parser.CALL, VisualBasic6Parser.CASE, VisualBasic6Parser.CHDIR, VisualBasic6Parser.CHDRIVE, VisualBasic6Parser.CLASS, VisualBasic6Parser.CLOSE, VisualBasic6Parser.COLLECTION, VisualBasic6Parser.CONST, VisualBasic6Parser.DATE, VisualBasic6Parser.DECLARE, VisualBasic6Parser.DEFBOOL, VisualBasic6Parser.DEFBYTE, VisualBasic6Parser.DEFDATE, VisualBasic6Parser.DEFDBL, VisualBasic6Parser.DEFDEC, VisualBasic6Parser.DEFCUR, VisualBasic6Parser.DEFINT, VisualBasic6Parser.DEFLNG, VisualBasic6Parser.DEFOBJ, VisualBasic6Parser.DEFSNG, VisualBasic6Parser.DEFSTR, VisualBasic6Parser.DEFVAR, VisualBasic6Parser.DELETESETTING, VisualBasic6Parser.DIM, VisualBasic6Parser.DO, VisualBasic6Parser.DOUBLE, VisualBasic6Parser.EACH, VisualBasic6Parser.ELSE, VisualBasic6Parser.ELSEIF, VisualBasic6Parser.END, VisualBasic6Parser.ENUM, VisualBasic6Parser.EQV, VisualBasic6Parser.ERASE, VisualBasic6Parser.ERROR, VisualBasic6Parser.EVENT, VisualBasic6Parser.FALSE, VisualBasic6Parser.FILECOPY, VisualBasic6Parser.FRIEND, VisualBasic6Parser.FOR, VisualBasic6Parser.FUNCTION, VisualBasic6Parser.GET, VisualBasic6Parser.GLOBAL, VisualBasic6Parser.GOSUB, VisualBasic6Parser.GOTO, VisualBasic6Parser.IF, VisualBasic6Parser.IMP, VisualBasic6Parser.IMPLEMENTS, VisualBasic6Parser.IN, VisualBasic6Parser.INPUT, VisualBasic6Parser.IS, VisualBasic6Parser.INTEGER, VisualBasic6Parser.KILL, VisualBasic6Parser.LOAD, VisualBasic6Parser.LOCK, VisualBasic6Parser.LONG, VisualBasic6Parser.LOOP, VisualBasic6Parser.LEN, VisualBasic6Parser.LET, VisualBasic6Parser.LIB, VisualBasic6Parser.LIKE, VisualBasic6Parser.LSET, VisualBasic6Parser.ME, VisualBasic6Parser.MID, VisualBasic6Parser.MKDIR, VisualBasic6Parser.MOD, VisualBasic6Parser.NAME, VisualBasic6Parser.NEXT, VisualBasic6Parser.NEW, VisualBasic6Parser.NOT, VisualBasic6Parser.NOTHING, VisualBasic6Parser.NULL, VisualBasic6Parser.OBJECT, VisualBasic6Parser.ON, VisualBasic6Parser.OPEN, VisualBasic6Parser.OPTIONAL, VisualBasic6Parser.OR, VisualBasic6Parser.OUTPUT, VisualBasic6Parser.PARAMARRAY, VisualBasic6Parser.PRESERVE, VisualBasic6Parser.PRINT, VisualBasic6Parser.PRIVATE, VisualBasic6Parser.PUBLIC, VisualBasic6Parser.PUT, VisualBasic6Parser.RANDOM, VisualBasic6Parser.RANDOMIZE, VisualBasic6Parser.RAISEEVENT, VisualBasic6Parser.READ, VisualBasic6Parser.REDIM, VisualBasic6Parser.REM, VisualBasic6Parser.RESET, VisualBasic6Parser.RESUME, VisualBasic6Parser.RETURN, VisualBasic6Parser.RMDIR, VisualBasic6Parser.RSET, VisualBasic6Parser.SAVEPICTURE, VisualBasic6Parser.SAVESETTING, VisualBasic6Parser.SEEK, VisualBasic6Parser.SELECT, VisualBasic6Parser.SENDKEYS, VisualBasic6Parser.SET, VisualBasic6Parser.SETATTR, VisualBasic6Parser.SHARED, VisualBasic6Parser.SINGLE, VisualBasic6Parser.SPC, VisualBasic6Parser.STATIC, VisualBasic6Parser.STEP, VisualBasic6Parser.STOP, VisualBasic6Parser.STRING, VisualBasic6Parser.SUB, VisualBasic6Parser.TAB, VisualBasic6Parser.TEXT, VisualBasic6Parser.THEN, VisualBasic6Parser.TIME, VisualBasic6Parser.TO, VisualBasic6Parser.TRUE, VisualBasic6Parser.TYPE, VisualBasic6Parser.TYPEOF, VisualBasic6Parser.UNLOAD, VisualBasic6Parser.UNLOCK, VisualBasic6Parser.UNTIL, VisualBasic6Parser.VARIANT, VisualBasic6Parser.VERSION, VisualBasic6Parser.WEND, VisualBasic6Parser.WHILE, VisualBasic6Parser.WIDTH, VisualBasic6Parser.WITH, VisualBasic6Parser.WITHEVENTS, VisualBasic6Parser.WRITE, VisualBasic6Parser.XOR]:
                            self.state = 2813
                            self.ambiguousKeyword()
                            pass
                        elif token in [VisualBasic6Parser.IDENTIFIER]:
                            self.state = 2814
                            self.match(VisualBasic6Parser.IDENTIFIER)
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 2819
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,486,self._ctx)

                pass
            elif token in [VisualBasic6Parser.ACCESS, VisualBasic6Parser.ADDRESSOF, VisualBasic6Parser.ALIAS, VisualBasic6Parser.AND, VisualBasic6Parser.ATTRIBUTE, VisualBasic6Parser.APPACTIVATE, VisualBasic6Parser.APPEND, VisualBasic6Parser.AS, VisualBasic6Parser.BEEP, VisualBasic6Parser.BEGIN, VisualBasic6Parser.BINARY, VisualBasic6Parser.BOOLEAN, VisualBasic6Parser.BYVAL, VisualBasic6Parser.BYREF, VisualBasic6Parser.BYTE, VisualBasic6Parser.CALL, VisualBasic6Parser.CASE, VisualBasic6Parser.CHDIR, VisualBasic6Parser.CHDRIVE, VisualBasic6Parser.CLASS, VisualBasic6Parser.CLOSE, VisualBasic6Parser.COLLECTION, VisualBasic6Parser.CONST, VisualBasic6Parser.DATE, VisualBasic6Parser.DECLARE, VisualBasic6Parser.DEFBOOL, VisualBasic6Parser.DEFBYTE, VisualBasic6Parser.DEFDATE, VisualBasic6Parser.DEFDBL, VisualBasic6Parser.DEFDEC, VisualBasic6Parser.DEFCUR, VisualBasic6Parser.DEFINT, VisualBasic6Parser.DEFLNG, VisualBasic6Parser.DEFOBJ, VisualBasic6Parser.DEFSNG, VisualBasic6Parser.DEFSTR, VisualBasic6Parser.DEFVAR, VisualBasic6Parser.DELETESETTING, VisualBasic6Parser.DIM, VisualBasic6Parser.DO, VisualBasic6Parser.DOUBLE, VisualBasic6Parser.EACH, VisualBasic6Parser.ELSE, VisualBasic6Parser.ELSEIF, VisualBasic6Parser.END, VisualBasic6Parser.ENUM, VisualBasic6Parser.EQV, VisualBasic6Parser.ERASE, VisualBasic6Parser.ERROR, VisualBasic6Parser.EVENT, VisualBasic6Parser.FALSE, VisualBasic6Parser.FILECOPY, VisualBasic6Parser.FRIEND, VisualBasic6Parser.FOR, VisualBasic6Parser.FUNCTION, VisualBasic6Parser.GET, VisualBasic6Parser.GLOBAL, VisualBasic6Parser.GOSUB, VisualBasic6Parser.GOTO, VisualBasic6Parser.IF, VisualBasic6Parser.IMP, VisualBasic6Parser.IMPLEMENTS, VisualBasic6Parser.IN, VisualBasic6Parser.INPUT, VisualBasic6Parser.IS, VisualBasic6Parser.INTEGER, VisualBasic6Parser.KILL, VisualBasic6Parser.LOAD, VisualBasic6Parser.LOCK, VisualBasic6Parser.LONG, VisualBasic6Parser.LOOP, VisualBasic6Parser.LEN, VisualBasic6Parser.LET, VisualBasic6Parser.LIB, VisualBasic6Parser.LIKE, VisualBasic6Parser.LSET, VisualBasic6Parser.ME, VisualBasic6Parser.MID, VisualBasic6Parser.MKDIR, VisualBasic6Parser.MOD, VisualBasic6Parser.NAME, VisualBasic6Parser.NEXT, VisualBasic6Parser.NEW, VisualBasic6Parser.NOT, VisualBasic6Parser.NOTHING, VisualBasic6Parser.NULL, VisualBasic6Parser.OBJECT, VisualBasic6Parser.ON, VisualBasic6Parser.OPEN, VisualBasic6Parser.OPTIONAL, VisualBasic6Parser.OR, VisualBasic6Parser.OUTPUT, VisualBasic6Parser.PARAMARRAY, VisualBasic6Parser.PRESERVE, VisualBasic6Parser.PRINT, VisualBasic6Parser.PRIVATE, VisualBasic6Parser.PUBLIC, VisualBasic6Parser.PUT, VisualBasic6Parser.RANDOM, VisualBasic6Parser.RANDOMIZE, VisualBasic6Parser.RAISEEVENT, VisualBasic6Parser.READ, VisualBasic6Parser.REDIM, VisualBasic6Parser.REM, VisualBasic6Parser.RESET, VisualBasic6Parser.RESUME, VisualBasic6Parser.RETURN, VisualBasic6Parser.RMDIR, VisualBasic6Parser.RSET, VisualBasic6Parser.SAVEPICTURE, VisualBasic6Parser.SAVESETTING, VisualBasic6Parser.SEEK, VisualBasic6Parser.SELECT, VisualBasic6Parser.SENDKEYS, VisualBasic6Parser.SET, VisualBasic6Parser.SETATTR, VisualBasic6Parser.SHARED, VisualBasic6Parser.SINGLE, VisualBasic6Parser.SPC, VisualBasic6Parser.STATIC, VisualBasic6Parser.STEP, VisualBasic6Parser.STOP, VisualBasic6Parser.STRING, VisualBasic6Parser.SUB, VisualBasic6Parser.TAB, VisualBasic6Parser.TEXT, VisualBasic6Parser.THEN, VisualBasic6Parser.TIME, VisualBasic6Parser.TO, VisualBasic6Parser.TRUE, VisualBasic6Parser.TYPE, VisualBasic6Parser.TYPEOF, VisualBasic6Parser.UNLOAD, VisualBasic6Parser.UNLOCK, VisualBasic6Parser.UNTIL, VisualBasic6Parser.VARIANT, VisualBasic6Parser.VERSION, VisualBasic6Parser.WEND, VisualBasic6Parser.WHILE, VisualBasic6Parser.WIDTH, VisualBasic6Parser.WITH, VisualBasic6Parser.WITHEVENTS, VisualBasic6Parser.WRITE, VisualBasic6Parser.XOR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2820
                self.ambiguousKeyword()
                self.state = 2823 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2823
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [VisualBasic6Parser.ACCESS, VisualBasic6Parser.ADDRESSOF, VisualBasic6Parser.ALIAS, VisualBasic6Parser.AND, VisualBasic6Parser.ATTRIBUTE, VisualBasic6Parser.APPACTIVATE, VisualBasic6Parser.APPEND, VisualBasic6Parser.AS, VisualBasic6Parser.BEEP, VisualBasic6Parser.BEGIN, VisualBasic6Parser.BINARY, VisualBasic6Parser.BOOLEAN, VisualBasic6Parser.BYVAL, VisualBasic6Parser.BYREF, VisualBasic6Parser.BYTE, VisualBasic6Parser.CALL, VisualBasic6Parser.CASE, VisualBasic6Parser.CHDIR, VisualBasic6Parser.CHDRIVE, VisualBasic6Parser.CLASS, VisualBasic6Parser.CLOSE, VisualBasic6Parser.COLLECTION, VisualBasic6Parser.CONST, VisualBasic6Parser.DATE, VisualBasic6Parser.DECLARE, VisualBasic6Parser.DEFBOOL, VisualBasic6Parser.DEFBYTE, VisualBasic6Parser.DEFDATE, VisualBasic6Parser.DEFDBL, VisualBasic6Parser.DEFDEC, VisualBasic6Parser.DEFCUR, VisualBasic6Parser.DEFINT, VisualBasic6Parser.DEFLNG, VisualBasic6Parser.DEFOBJ, VisualBasic6Parser.DEFSNG, VisualBasic6Parser.DEFSTR, VisualBasic6Parser.DEFVAR, VisualBasic6Parser.DELETESETTING, VisualBasic6Parser.DIM, VisualBasic6Parser.DO, VisualBasic6Parser.DOUBLE, VisualBasic6Parser.EACH, VisualBasic6Parser.ELSE, VisualBasic6Parser.ELSEIF, VisualBasic6Parser.END, VisualBasic6Parser.ENUM, VisualBasic6Parser.EQV, VisualBasic6Parser.ERASE, VisualBasic6Parser.ERROR, VisualBasic6Parser.EVENT, VisualBasic6Parser.FALSE, VisualBasic6Parser.FILECOPY, VisualBasic6Parser.FRIEND, VisualBasic6Parser.FOR, VisualBasic6Parser.FUNCTION, VisualBasic6Parser.GET, VisualBasic6Parser.GLOBAL, VisualBasic6Parser.GOSUB, VisualBasic6Parser.GOTO, VisualBasic6Parser.IF, VisualBasic6Parser.IMP, VisualBasic6Parser.IMPLEMENTS, VisualBasic6Parser.IN, VisualBasic6Parser.INPUT, VisualBasic6Parser.IS, VisualBasic6Parser.INTEGER, VisualBasic6Parser.KILL, VisualBasic6Parser.LOAD, VisualBasic6Parser.LOCK, VisualBasic6Parser.LONG, VisualBasic6Parser.LOOP, VisualBasic6Parser.LEN, VisualBasic6Parser.LET, VisualBasic6Parser.LIB, VisualBasic6Parser.LIKE, VisualBasic6Parser.LSET, VisualBasic6Parser.ME, VisualBasic6Parser.MID, VisualBasic6Parser.MKDIR, VisualBasic6Parser.MOD, VisualBasic6Parser.NAME, VisualBasic6Parser.NEXT, VisualBasic6Parser.NEW, VisualBasic6Parser.NOT, VisualBasic6Parser.NOTHING, VisualBasic6Parser.NULL, VisualBasic6Parser.OBJECT, VisualBasic6Parser.ON, VisualBasic6Parser.OPEN, VisualBasic6Parser.OPTIONAL, VisualBasic6Parser.OR, VisualBasic6Parser.OUTPUT, VisualBasic6Parser.PARAMARRAY, VisualBasic6Parser.PRESERVE, VisualBasic6Parser.PRINT, VisualBasic6Parser.PRIVATE, VisualBasic6Parser.PUBLIC, VisualBasic6Parser.PUT, VisualBasic6Parser.RANDOM, VisualBasic6Parser.RANDOMIZE, VisualBasic6Parser.RAISEEVENT, VisualBasic6Parser.READ, VisualBasic6Parser.REDIM, VisualBasic6Parser.REM, VisualBasic6Parser.RESET, VisualBasic6Parser.RESUME, VisualBasic6Parser.RETURN, VisualBasic6Parser.RMDIR, VisualBasic6Parser.RSET, VisualBasic6Parser.SAVEPICTURE, VisualBasic6Parser.SAVESETTING, VisualBasic6Parser.SEEK, VisualBasic6Parser.SELECT, VisualBasic6Parser.SENDKEYS, VisualBasic6Parser.SET, VisualBasic6Parser.SETATTR, VisualBasic6Parser.SHARED, VisualBasic6Parser.SINGLE, VisualBasic6Parser.SPC, VisualBasic6Parser.STATIC, VisualBasic6Parser.STEP, VisualBasic6Parser.STOP, VisualBasic6Parser.STRING, VisualBasic6Parser.SUB, VisualBasic6Parser.TAB, VisualBasic6Parser.TEXT, VisualBasic6Parser.THEN, VisualBasic6Parser.TIME, VisualBasic6Parser.TO, VisualBasic6Parser.TRUE, VisualBasic6Parser.TYPE, VisualBasic6Parser.TYPEOF, VisualBasic6Parser.UNLOAD, VisualBasic6Parser.UNLOCK, VisualBasic6Parser.UNTIL, VisualBasic6Parser.VARIANT, VisualBasic6Parser.VERSION, VisualBasic6Parser.WEND, VisualBasic6Parser.WHILE, VisualBasic6Parser.WIDTH, VisualBasic6Parser.WITH, VisualBasic6Parser.WITHEVENTS, VisualBasic6Parser.WRITE, VisualBasic6Parser.XOR]:
                            self.state = 2821
                            self.ambiguousKeyword()
                            pass
                        elif token in [VisualBasic6Parser.IDENTIFIER]:
                            self.state = 2822
                            self.match(VisualBasic6Parser.IDENTIFIER)
                            pass
                        else:
                            raise NoViableAltException(self)


                    else:
                        raise NoViableAltException(self)
                    self.state = 2825 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,488,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComparisonOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(VisualBasic6Parser.LT, 0)

        def LEQ(self):
            return self.getToken(VisualBasic6Parser.LEQ, 0)

        def GT(self):
            return self.getToken(VisualBasic6Parser.GT, 0)

        def GEQ(self):
            return self.getToken(VisualBasic6Parser.GEQ, 0)

        def EQ(self):
            return self.getToken(VisualBasic6Parser.EQ, 0)

        def NEQ(self):
            return self.getToken(VisualBasic6Parser.NEQ, 0)

        def IS(self):
            return self.getToken(VisualBasic6Parser.IS, 0)

        def LIKE(self):
            return self.getToken(VisualBasic6Parser.LIKE, 0)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)




    def comparisonOperator(self):

        localctx = VisualBasic6Parser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_comparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2829
            _la = self._input.LA(1)
            if not(_la==VisualBasic6Parser.IS or _la==VisualBasic6Parser.LIKE or ((((_la - 186)) & ~0x3f) == 0 and ((1 << (_la - 186)) & ((1 << (VisualBasic6Parser.EQ - 186)) | (1 << (VisualBasic6Parser.GEQ - 186)) | (1 << (VisualBasic6Parser.GT - 186)) | (1 << (VisualBasic6Parser.LEQ - 186)) | (1 << (VisualBasic6Parser.LT - 186)) | (1 << (VisualBasic6Parser.NEQ - 186)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComplexTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.AmbiguousIdentifierContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.AmbiguousIdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.DOT)
            else:
                return self.getToken(VisualBasic6Parser.DOT, i)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_complexType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexType" ):
                listener.enterComplexType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexType" ):
                listener.exitComplexType(self)




    def complexType(self):

        localctx = VisualBasic6Parser.ComplexTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_complexType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2831
            self.ambiguousIdentifier()
            self.state = 2836
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,490,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2832
                    self.match(VisualBasic6Parser.DOT)
                    self.state = 2833
                    self.ambiguousIdentifier() 
                self.state = 2838
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,490,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FieldLengthContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MULT(self):
            return self.getToken(VisualBasic6Parser.MULT, 0)

        def INTEGERLITERAL(self):
            return self.getToken(VisualBasic6Parser.INTEGERLITERAL, 0)

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(VisualBasic6Parser.AmbiguousIdentifierContext,0)


        def WS(self):
            return self.getToken(VisualBasic6Parser.WS, 0)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_fieldLength

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldLength" ):
                listener.enterFieldLength(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldLength" ):
                listener.exitFieldLength(self)




    def fieldLength(self):

        localctx = VisualBasic6Parser.FieldLengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_fieldLength)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2839
            self.match(VisualBasic6Parser.MULT)
            self.state = 2841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VisualBasic6Parser.WS:
                self.state = 2840
                self.match(VisualBasic6Parser.WS)


            self.state = 2845
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VisualBasic6Parser.INTEGERLITERAL]:
                self.state = 2843
                self.match(VisualBasic6Parser.INTEGERLITERAL)
                pass
            elif token in [VisualBasic6Parser.ACCESS, VisualBasic6Parser.ADDRESSOF, VisualBasic6Parser.ALIAS, VisualBasic6Parser.AND, VisualBasic6Parser.ATTRIBUTE, VisualBasic6Parser.APPACTIVATE, VisualBasic6Parser.APPEND, VisualBasic6Parser.AS, VisualBasic6Parser.BEEP, VisualBasic6Parser.BEGIN, VisualBasic6Parser.BINARY, VisualBasic6Parser.BOOLEAN, VisualBasic6Parser.BYVAL, VisualBasic6Parser.BYREF, VisualBasic6Parser.BYTE, VisualBasic6Parser.CALL, VisualBasic6Parser.CASE, VisualBasic6Parser.CHDIR, VisualBasic6Parser.CHDRIVE, VisualBasic6Parser.CLASS, VisualBasic6Parser.CLOSE, VisualBasic6Parser.COLLECTION, VisualBasic6Parser.CONST, VisualBasic6Parser.DATE, VisualBasic6Parser.DECLARE, VisualBasic6Parser.DEFBOOL, VisualBasic6Parser.DEFBYTE, VisualBasic6Parser.DEFDATE, VisualBasic6Parser.DEFDBL, VisualBasic6Parser.DEFDEC, VisualBasic6Parser.DEFCUR, VisualBasic6Parser.DEFINT, VisualBasic6Parser.DEFLNG, VisualBasic6Parser.DEFOBJ, VisualBasic6Parser.DEFSNG, VisualBasic6Parser.DEFSTR, VisualBasic6Parser.DEFVAR, VisualBasic6Parser.DELETESETTING, VisualBasic6Parser.DIM, VisualBasic6Parser.DO, VisualBasic6Parser.DOUBLE, VisualBasic6Parser.EACH, VisualBasic6Parser.ELSE, VisualBasic6Parser.ELSEIF, VisualBasic6Parser.END, VisualBasic6Parser.ENUM, VisualBasic6Parser.EQV, VisualBasic6Parser.ERASE, VisualBasic6Parser.ERROR, VisualBasic6Parser.EVENT, VisualBasic6Parser.FALSE, VisualBasic6Parser.FILECOPY, VisualBasic6Parser.FRIEND, VisualBasic6Parser.FOR, VisualBasic6Parser.FUNCTION, VisualBasic6Parser.GET, VisualBasic6Parser.GLOBAL, VisualBasic6Parser.GOSUB, VisualBasic6Parser.GOTO, VisualBasic6Parser.IF, VisualBasic6Parser.IMP, VisualBasic6Parser.IMPLEMENTS, VisualBasic6Parser.IN, VisualBasic6Parser.INPUT, VisualBasic6Parser.IS, VisualBasic6Parser.INTEGER, VisualBasic6Parser.KILL, VisualBasic6Parser.LOAD, VisualBasic6Parser.LOCK, VisualBasic6Parser.LONG, VisualBasic6Parser.LOOP, VisualBasic6Parser.LEN, VisualBasic6Parser.LET, VisualBasic6Parser.LIB, VisualBasic6Parser.LIKE, VisualBasic6Parser.LSET, VisualBasic6Parser.ME, VisualBasic6Parser.MID, VisualBasic6Parser.MKDIR, VisualBasic6Parser.MOD, VisualBasic6Parser.NAME, VisualBasic6Parser.NEXT, VisualBasic6Parser.NEW, VisualBasic6Parser.NOT, VisualBasic6Parser.NOTHING, VisualBasic6Parser.NULL, VisualBasic6Parser.OBJECT, VisualBasic6Parser.ON, VisualBasic6Parser.OPEN, VisualBasic6Parser.OPTIONAL, VisualBasic6Parser.OR, VisualBasic6Parser.OUTPUT, VisualBasic6Parser.PARAMARRAY, VisualBasic6Parser.PRESERVE, VisualBasic6Parser.PRINT, VisualBasic6Parser.PRIVATE, VisualBasic6Parser.PUBLIC, VisualBasic6Parser.PUT, VisualBasic6Parser.RANDOM, VisualBasic6Parser.RANDOMIZE, VisualBasic6Parser.RAISEEVENT, VisualBasic6Parser.READ, VisualBasic6Parser.REDIM, VisualBasic6Parser.REM, VisualBasic6Parser.RESET, VisualBasic6Parser.RESUME, VisualBasic6Parser.RETURN, VisualBasic6Parser.RMDIR, VisualBasic6Parser.RSET, VisualBasic6Parser.SAVEPICTURE, VisualBasic6Parser.SAVESETTING, VisualBasic6Parser.SEEK, VisualBasic6Parser.SELECT, VisualBasic6Parser.SENDKEYS, VisualBasic6Parser.SET, VisualBasic6Parser.SETATTR, VisualBasic6Parser.SHARED, VisualBasic6Parser.SINGLE, VisualBasic6Parser.SPC, VisualBasic6Parser.STATIC, VisualBasic6Parser.STEP, VisualBasic6Parser.STOP, VisualBasic6Parser.STRING, VisualBasic6Parser.SUB, VisualBasic6Parser.TAB, VisualBasic6Parser.TEXT, VisualBasic6Parser.THEN, VisualBasic6Parser.TIME, VisualBasic6Parser.TO, VisualBasic6Parser.TRUE, VisualBasic6Parser.TYPE, VisualBasic6Parser.TYPEOF, VisualBasic6Parser.UNLOAD, VisualBasic6Parser.UNLOCK, VisualBasic6Parser.UNTIL, VisualBasic6Parser.VARIANT, VisualBasic6Parser.VERSION, VisualBasic6Parser.WEND, VisualBasic6Parser.WHILE, VisualBasic6Parser.WIDTH, VisualBasic6Parser.WITH, VisualBasic6Parser.WITHEVENTS, VisualBasic6Parser.WRITE, VisualBasic6Parser.XOR, VisualBasic6Parser.L_SQUARE_BRACKET, VisualBasic6Parser.IDENTIFIER]:
                self.state = 2844
                self.ambiguousIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LetterrangeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def certainIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VisualBasic6Parser.CertainIdentifierContext)
            else:
                return self.getTypedRuleContext(VisualBasic6Parser.CertainIdentifierContext,i)


        def MINUS(self):
            return self.getToken(VisualBasic6Parser.MINUS, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_letterrange

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetterrange" ):
                listener.enterLetterrange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetterrange" ):
                listener.exitLetterrange(self)




    def letterrange(self):

        localctx = VisualBasic6Parser.LetterrangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_letterrange)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2847
            self.certainIdentifier()
            self.state = 2856
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,495,self._ctx)
            if la_ == 1:
                self.state = 2849
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualBasic6Parser.WS:
                    self.state = 2848
                    self.match(VisualBasic6Parser.WS)


                self.state = 2851
                self.match(VisualBasic6Parser.MINUS)
                self.state = 2853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualBasic6Parser.WS:
                    self.state = 2852
                    self.match(VisualBasic6Parser.WS)


                self.state = 2855
                self.certainIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LineLabelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ambiguousIdentifier(self):
            return self.getTypedRuleContext(VisualBasic6Parser.AmbiguousIdentifierContext,0)


        def COLON(self):
            return self.getToken(VisualBasic6Parser.COLON, 0)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_lineLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineLabel" ):
                listener.enterLineLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineLabel" ):
                listener.exitLineLabel(self)




    def lineLabel(self):

        localctx = VisualBasic6Parser.LineLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_lineLabel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2858
            self.ambiguousIdentifier()
            self.state = 2859
            self.match(VisualBasic6Parser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLORLITERAL(self):
            return self.getToken(VisualBasic6Parser.COLORLITERAL, 0)

        def DATELITERAL(self):
            return self.getToken(VisualBasic6Parser.DATELITERAL, 0)

        def DOUBLELITERAL(self):
            return self.getToken(VisualBasic6Parser.DOUBLELITERAL, 0)

        def FILENUMBER(self):
            return self.getToken(VisualBasic6Parser.FILENUMBER, 0)

        def INTEGERLITERAL(self):
            return self.getToken(VisualBasic6Parser.INTEGERLITERAL, 0)

        def OCTALLITERAL(self):
            return self.getToken(VisualBasic6Parser.OCTALLITERAL, 0)

        def STRINGLITERAL(self):
            return self.getToken(VisualBasic6Parser.STRINGLITERAL, 0)

        def TRUE(self):
            return self.getToken(VisualBasic6Parser.TRUE, 0)

        def FALSE(self):
            return self.getToken(VisualBasic6Parser.FALSE, 0)

        def NOTHING(self):
            return self.getToken(VisualBasic6Parser.NOTHING, 0)

        def NULL(self):
            return self.getToken(VisualBasic6Parser.NULL, 0)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = VisualBasic6Parser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2861
            _la = self._input.LA(1)
            if not(((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (VisualBasic6Parser.FALSE - 66)) | (1 << (VisualBasic6Parser.NOTHING - 66)) | (1 << (VisualBasic6Parser.NULL - 66)))) != 0) or ((((_la - 163)) & ~0x3f) == 0 and ((1 << (_la - 163)) & ((1 << (VisualBasic6Parser.TRUE - 163)) | (1 << (VisualBasic6Parser.STRINGLITERAL - 163)) | (1 << (VisualBasic6Parser.DATELITERAL - 163)) | (1 << (VisualBasic6Parser.COLORLITERAL - 163)) | (1 << (VisualBasic6Parser.INTEGERLITERAL - 163)) | (1 << (VisualBasic6Parser.DOUBLELITERAL - 163)) | (1 << (VisualBasic6Parser.FILENUMBER - 163)) | (1 << (VisualBasic6Parser.OCTALLITERAL - 163)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PublicPrivateVisibilityContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIVATE(self):
            return self.getToken(VisualBasic6Parser.PRIVATE, 0)

        def PUBLIC(self):
            return self.getToken(VisualBasic6Parser.PUBLIC, 0)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_publicPrivateVisibility

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPublicPrivateVisibility" ):
                listener.enterPublicPrivateVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPublicPrivateVisibility" ):
                listener.exitPublicPrivateVisibility(self)




    def publicPrivateVisibility(self):

        localctx = VisualBasic6Parser.PublicPrivateVisibilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_publicPrivateVisibility)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2863
            _la = self._input.LA(1)
            if not(_la==VisualBasic6Parser.PRIVATE or _la==VisualBasic6Parser.PUBLIC):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PublicPrivateGlobalVisibilityContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIVATE(self):
            return self.getToken(VisualBasic6Parser.PRIVATE, 0)

        def PUBLIC(self):
            return self.getToken(VisualBasic6Parser.PUBLIC, 0)

        def GLOBAL(self):
            return self.getToken(VisualBasic6Parser.GLOBAL, 0)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_publicPrivateGlobalVisibility

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPublicPrivateGlobalVisibility" ):
                listener.enterPublicPrivateGlobalVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPublicPrivateGlobalVisibility" ):
                listener.exitPublicPrivateGlobalVisibility(self)




    def publicPrivateGlobalVisibility(self):

        localctx = VisualBasic6Parser.PublicPrivateGlobalVisibilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_publicPrivateGlobalVisibility)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2865
            _la = self._input.LA(1)
            if not(((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (VisualBasic6Parser.GLOBAL - 72)) | (1 << (VisualBasic6Parser.PRIVATE - 72)) | (1 << (VisualBasic6Parser.PUBLIC - 72)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def baseType(self):
            return self.getTypedRuleContext(VisualBasic6Parser.BaseTypeContext,0)


        def complexType(self):
            return self.getTypedRuleContext(VisualBasic6Parser.ComplexTypeContext,0)


        def LPAREN(self):
            return self.getToken(VisualBasic6Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(VisualBasic6Parser.RPAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(VisualBasic6Parser.WS)
            else:
                return self.getToken(VisualBasic6Parser.WS, i)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType" ):
                listener.enterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType" ):
                listener.exitType(self)




    def type(self):

        localctx = VisualBasic6Parser.TypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2869
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,496,self._ctx)
            if la_ == 1:
                self.state = 2867
                self.baseType()
                pass

            elif la_ == 2:
                self.state = 2868
                self.complexType()
                pass


            self.state = 2879
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,499,self._ctx)
            if la_ == 1:
                self.state = 2872
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualBasic6Parser.WS:
                    self.state = 2871
                    self.match(VisualBasic6Parser.WS)


                self.state = 2874
                self.match(VisualBasic6Parser.LPAREN)
                self.state = 2876
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VisualBasic6Parser.WS:
                    self.state = 2875
                    self.match(VisualBasic6Parser.WS)


                self.state = 2878
                self.match(VisualBasic6Parser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeHintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AMPERSAND(self):
            return self.getToken(VisualBasic6Parser.AMPERSAND, 0)

        def AT(self):
            return self.getToken(VisualBasic6Parser.AT, 0)

        def DOLLAR(self):
            return self.getToken(VisualBasic6Parser.DOLLAR, 0)

        def EXCLAMATIONMARK(self):
            return self.getToken(VisualBasic6Parser.EXCLAMATIONMARK, 0)

        def HASH(self):
            return self.getToken(VisualBasic6Parser.HASH, 0)

        def PERCENT(self):
            return self.getToken(VisualBasic6Parser.PERCENT, 0)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_typeHint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeHint" ):
                listener.enterTypeHint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeHint" ):
                listener.exitTypeHint(self)




    def typeHint(self):

        localctx = VisualBasic6Parser.TypeHintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_typeHint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2881
            _la = self._input.LA(1)
            if not(((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & ((1 << (VisualBasic6Parser.AMPERSAND - 178)) | (1 << (VisualBasic6Parser.AT - 178)) | (1 << (VisualBasic6Parser.DOLLAR - 178)) | (1 << (VisualBasic6Parser.EXCLAMATIONMARK - 178)) | (1 << (VisualBasic6Parser.HASH - 178)) | (1 << (VisualBasic6Parser.PERCENT - 178)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VisibilityContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIVATE(self):
            return self.getToken(VisualBasic6Parser.PRIVATE, 0)

        def PUBLIC(self):
            return self.getToken(VisualBasic6Parser.PUBLIC, 0)

        def FRIEND(self):
            return self.getToken(VisualBasic6Parser.FRIEND, 0)

        def GLOBAL(self):
            return self.getToken(VisualBasic6Parser.GLOBAL, 0)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_visibility

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibility" ):
                listener.enterVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibility" ):
                listener.exitVisibility(self)




    def visibility(self):

        localctx = VisualBasic6Parser.VisibilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_visibility)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2883
            _la = self._input.LA(1)
            if not(((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (VisualBasic6Parser.FRIEND - 68)) | (1 << (VisualBasic6Parser.GLOBAL - 68)) | (1 << (VisualBasic6Parser.PRIVATE - 68)) | (1 << (VisualBasic6Parser.PUBLIC - 68)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AmbiguousKeywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCESS(self):
            return self.getToken(VisualBasic6Parser.ACCESS, 0)

        def ADDRESSOF(self):
            return self.getToken(VisualBasic6Parser.ADDRESSOF, 0)

        def ALIAS(self):
            return self.getToken(VisualBasic6Parser.ALIAS, 0)

        def AND(self):
            return self.getToken(VisualBasic6Parser.AND, 0)

        def ATTRIBUTE(self):
            return self.getToken(VisualBasic6Parser.ATTRIBUTE, 0)

        def APPACTIVATE(self):
            return self.getToken(VisualBasic6Parser.APPACTIVATE, 0)

        def APPEND(self):
            return self.getToken(VisualBasic6Parser.APPEND, 0)

        def AS(self):
            return self.getToken(VisualBasic6Parser.AS, 0)

        def BEEP(self):
            return self.getToken(VisualBasic6Parser.BEEP, 0)

        def BEGIN(self):
            return self.getToken(VisualBasic6Parser.BEGIN, 0)

        def BINARY(self):
            return self.getToken(VisualBasic6Parser.BINARY, 0)

        def BOOLEAN(self):
            return self.getToken(VisualBasic6Parser.BOOLEAN, 0)

        def BYVAL(self):
            return self.getToken(VisualBasic6Parser.BYVAL, 0)

        def BYREF(self):
            return self.getToken(VisualBasic6Parser.BYREF, 0)

        def BYTE(self):
            return self.getToken(VisualBasic6Parser.BYTE, 0)

        def CALL(self):
            return self.getToken(VisualBasic6Parser.CALL, 0)

        def CASE(self):
            return self.getToken(VisualBasic6Parser.CASE, 0)

        def CLASS(self):
            return self.getToken(VisualBasic6Parser.CLASS, 0)

        def CLOSE(self):
            return self.getToken(VisualBasic6Parser.CLOSE, 0)

        def CHDIR(self):
            return self.getToken(VisualBasic6Parser.CHDIR, 0)

        def CHDRIVE(self):
            return self.getToken(VisualBasic6Parser.CHDRIVE, 0)

        def COLLECTION(self):
            return self.getToken(VisualBasic6Parser.COLLECTION, 0)

        def CONST(self):
            return self.getToken(VisualBasic6Parser.CONST, 0)

        def DATE(self):
            return self.getToken(VisualBasic6Parser.DATE, 0)

        def DECLARE(self):
            return self.getToken(VisualBasic6Parser.DECLARE, 0)

        def DEFBOOL(self):
            return self.getToken(VisualBasic6Parser.DEFBOOL, 0)

        def DEFBYTE(self):
            return self.getToken(VisualBasic6Parser.DEFBYTE, 0)

        def DEFCUR(self):
            return self.getToken(VisualBasic6Parser.DEFCUR, 0)

        def DEFDBL(self):
            return self.getToken(VisualBasic6Parser.DEFDBL, 0)

        def DEFDATE(self):
            return self.getToken(VisualBasic6Parser.DEFDATE, 0)

        def DEFDEC(self):
            return self.getToken(VisualBasic6Parser.DEFDEC, 0)

        def DEFINT(self):
            return self.getToken(VisualBasic6Parser.DEFINT, 0)

        def DEFLNG(self):
            return self.getToken(VisualBasic6Parser.DEFLNG, 0)

        def DEFOBJ(self):
            return self.getToken(VisualBasic6Parser.DEFOBJ, 0)

        def DEFSNG(self):
            return self.getToken(VisualBasic6Parser.DEFSNG, 0)

        def DEFSTR(self):
            return self.getToken(VisualBasic6Parser.DEFSTR, 0)

        def DEFVAR(self):
            return self.getToken(VisualBasic6Parser.DEFVAR, 0)

        def DELETESETTING(self):
            return self.getToken(VisualBasic6Parser.DELETESETTING, 0)

        def DIM(self):
            return self.getToken(VisualBasic6Parser.DIM, 0)

        def DO(self):
            return self.getToken(VisualBasic6Parser.DO, 0)

        def DOUBLE(self):
            return self.getToken(VisualBasic6Parser.DOUBLE, 0)

        def EACH(self):
            return self.getToken(VisualBasic6Parser.EACH, 0)

        def ELSE(self):
            return self.getToken(VisualBasic6Parser.ELSE, 0)

        def ELSEIF(self):
            return self.getToken(VisualBasic6Parser.ELSEIF, 0)

        def END(self):
            return self.getToken(VisualBasic6Parser.END, 0)

        def ENUM(self):
            return self.getToken(VisualBasic6Parser.ENUM, 0)

        def EQV(self):
            return self.getToken(VisualBasic6Parser.EQV, 0)

        def ERASE(self):
            return self.getToken(VisualBasic6Parser.ERASE, 0)

        def ERROR(self):
            return self.getToken(VisualBasic6Parser.ERROR, 0)

        def EVENT(self):
            return self.getToken(VisualBasic6Parser.EVENT, 0)

        def FALSE(self):
            return self.getToken(VisualBasic6Parser.FALSE, 0)

        def FILECOPY(self):
            return self.getToken(VisualBasic6Parser.FILECOPY, 0)

        def FRIEND(self):
            return self.getToken(VisualBasic6Parser.FRIEND, 0)

        def FOR(self):
            return self.getToken(VisualBasic6Parser.FOR, 0)

        def FUNCTION(self):
            return self.getToken(VisualBasic6Parser.FUNCTION, 0)

        def GET(self):
            return self.getToken(VisualBasic6Parser.GET, 0)

        def GLOBAL(self):
            return self.getToken(VisualBasic6Parser.GLOBAL, 0)

        def GOSUB(self):
            return self.getToken(VisualBasic6Parser.GOSUB, 0)

        def GOTO(self):
            return self.getToken(VisualBasic6Parser.GOTO, 0)

        def IF(self):
            return self.getToken(VisualBasic6Parser.IF, 0)

        def IMP(self):
            return self.getToken(VisualBasic6Parser.IMP, 0)

        def IMPLEMENTS(self):
            return self.getToken(VisualBasic6Parser.IMPLEMENTS, 0)

        def IN(self):
            return self.getToken(VisualBasic6Parser.IN, 0)

        def INPUT(self):
            return self.getToken(VisualBasic6Parser.INPUT, 0)

        def IS(self):
            return self.getToken(VisualBasic6Parser.IS, 0)

        def INTEGER(self):
            return self.getToken(VisualBasic6Parser.INTEGER, 0)

        def KILL(self):
            return self.getToken(VisualBasic6Parser.KILL, 0)

        def LOAD(self):
            return self.getToken(VisualBasic6Parser.LOAD, 0)

        def LOCK(self):
            return self.getToken(VisualBasic6Parser.LOCK, 0)

        def LONG(self):
            return self.getToken(VisualBasic6Parser.LONG, 0)

        def LOOP(self):
            return self.getToken(VisualBasic6Parser.LOOP, 0)

        def LEN(self):
            return self.getToken(VisualBasic6Parser.LEN, 0)

        def LET(self):
            return self.getToken(VisualBasic6Parser.LET, 0)

        def LIB(self):
            return self.getToken(VisualBasic6Parser.LIB, 0)

        def LIKE(self):
            return self.getToken(VisualBasic6Parser.LIKE, 0)

        def LSET(self):
            return self.getToken(VisualBasic6Parser.LSET, 0)

        def ME(self):
            return self.getToken(VisualBasic6Parser.ME, 0)

        def MID(self):
            return self.getToken(VisualBasic6Parser.MID, 0)

        def MKDIR(self):
            return self.getToken(VisualBasic6Parser.MKDIR, 0)

        def MOD(self):
            return self.getToken(VisualBasic6Parser.MOD, 0)

        def NAME(self):
            return self.getToken(VisualBasic6Parser.NAME, 0)

        def NEXT(self):
            return self.getToken(VisualBasic6Parser.NEXT, 0)

        def NEW(self):
            return self.getToken(VisualBasic6Parser.NEW, 0)

        def NOT(self):
            return self.getToken(VisualBasic6Parser.NOT, 0)

        def NOTHING(self):
            return self.getToken(VisualBasic6Parser.NOTHING, 0)

        def NULL(self):
            return self.getToken(VisualBasic6Parser.NULL, 0)

        def OBJECT(self):
            return self.getToken(VisualBasic6Parser.OBJECT, 0)

        def ON(self):
            return self.getToken(VisualBasic6Parser.ON, 0)

        def OPEN(self):
            return self.getToken(VisualBasic6Parser.OPEN, 0)

        def OPTIONAL(self):
            return self.getToken(VisualBasic6Parser.OPTIONAL, 0)

        def OR(self):
            return self.getToken(VisualBasic6Parser.OR, 0)

        def OUTPUT(self):
            return self.getToken(VisualBasic6Parser.OUTPUT, 0)

        def PARAMARRAY(self):
            return self.getToken(VisualBasic6Parser.PARAMARRAY, 0)

        def PRESERVE(self):
            return self.getToken(VisualBasic6Parser.PRESERVE, 0)

        def PRINT(self):
            return self.getToken(VisualBasic6Parser.PRINT, 0)

        def PRIVATE(self):
            return self.getToken(VisualBasic6Parser.PRIVATE, 0)

        def PUBLIC(self):
            return self.getToken(VisualBasic6Parser.PUBLIC, 0)

        def PUT(self):
            return self.getToken(VisualBasic6Parser.PUT, 0)

        def RANDOM(self):
            return self.getToken(VisualBasic6Parser.RANDOM, 0)

        def RANDOMIZE(self):
            return self.getToken(VisualBasic6Parser.RANDOMIZE, 0)

        def RAISEEVENT(self):
            return self.getToken(VisualBasic6Parser.RAISEEVENT, 0)

        def READ(self):
            return self.getToken(VisualBasic6Parser.READ, 0)

        def REDIM(self):
            return self.getToken(VisualBasic6Parser.REDIM, 0)

        def REM(self):
            return self.getToken(VisualBasic6Parser.REM, 0)

        def RESET(self):
            return self.getToken(VisualBasic6Parser.RESET, 0)

        def RESUME(self):
            return self.getToken(VisualBasic6Parser.RESUME, 0)

        def RETURN(self):
            return self.getToken(VisualBasic6Parser.RETURN, 0)

        def RMDIR(self):
            return self.getToken(VisualBasic6Parser.RMDIR, 0)

        def RSET(self):
            return self.getToken(VisualBasic6Parser.RSET, 0)

        def SAVEPICTURE(self):
            return self.getToken(VisualBasic6Parser.SAVEPICTURE, 0)

        def SAVESETTING(self):
            return self.getToken(VisualBasic6Parser.SAVESETTING, 0)

        def SEEK(self):
            return self.getToken(VisualBasic6Parser.SEEK, 0)

        def SELECT(self):
            return self.getToken(VisualBasic6Parser.SELECT, 0)

        def SENDKEYS(self):
            return self.getToken(VisualBasic6Parser.SENDKEYS, 0)

        def SET(self):
            return self.getToken(VisualBasic6Parser.SET, 0)

        def SETATTR(self):
            return self.getToken(VisualBasic6Parser.SETATTR, 0)

        def SHARED(self):
            return self.getToken(VisualBasic6Parser.SHARED, 0)

        def SINGLE(self):
            return self.getToken(VisualBasic6Parser.SINGLE, 0)

        def SPC(self):
            return self.getToken(VisualBasic6Parser.SPC, 0)

        def STATIC(self):
            return self.getToken(VisualBasic6Parser.STATIC, 0)

        def STEP(self):
            return self.getToken(VisualBasic6Parser.STEP, 0)

        def STOP(self):
            return self.getToken(VisualBasic6Parser.STOP, 0)

        def STRING(self):
            return self.getToken(VisualBasic6Parser.STRING, 0)

        def SUB(self):
            return self.getToken(VisualBasic6Parser.SUB, 0)

        def TAB(self):
            return self.getToken(VisualBasic6Parser.TAB, 0)

        def TEXT(self):
            return self.getToken(VisualBasic6Parser.TEXT, 0)

        def THEN(self):
            return self.getToken(VisualBasic6Parser.THEN, 0)

        def TIME(self):
            return self.getToken(VisualBasic6Parser.TIME, 0)

        def TO(self):
            return self.getToken(VisualBasic6Parser.TO, 0)

        def TRUE(self):
            return self.getToken(VisualBasic6Parser.TRUE, 0)

        def TYPE(self):
            return self.getToken(VisualBasic6Parser.TYPE, 0)

        def TYPEOF(self):
            return self.getToken(VisualBasic6Parser.TYPEOF, 0)

        def UNLOAD(self):
            return self.getToken(VisualBasic6Parser.UNLOAD, 0)

        def UNLOCK(self):
            return self.getToken(VisualBasic6Parser.UNLOCK, 0)

        def UNTIL(self):
            return self.getToken(VisualBasic6Parser.UNTIL, 0)

        def VARIANT(self):
            return self.getToken(VisualBasic6Parser.VARIANT, 0)

        def VERSION(self):
            return self.getToken(VisualBasic6Parser.VERSION, 0)

        def WEND(self):
            return self.getToken(VisualBasic6Parser.WEND, 0)

        def WHILE(self):
            return self.getToken(VisualBasic6Parser.WHILE, 0)

        def WIDTH(self):
            return self.getToken(VisualBasic6Parser.WIDTH, 0)

        def WITH(self):
            return self.getToken(VisualBasic6Parser.WITH, 0)

        def WITHEVENTS(self):
            return self.getToken(VisualBasic6Parser.WITHEVENTS, 0)

        def WRITE(self):
            return self.getToken(VisualBasic6Parser.WRITE, 0)

        def XOR(self):
            return self.getToken(VisualBasic6Parser.XOR, 0)

        def getRuleIndex(self):
            return VisualBasic6Parser.RULE_ambiguousKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAmbiguousKeyword" ):
                listener.enterAmbiguousKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAmbiguousKeyword" ):
                listener.exitAmbiguousKeyword(self)




    def ambiguousKeyword(self):

        localctx = VisualBasic6Parser.AmbiguousKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_ambiguousKeyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2885
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VisualBasic6Parser.ACCESS) | (1 << VisualBasic6Parser.ADDRESSOF) | (1 << VisualBasic6Parser.ALIAS) | (1 << VisualBasic6Parser.AND) | (1 << VisualBasic6Parser.ATTRIBUTE) | (1 << VisualBasic6Parser.APPACTIVATE) | (1 << VisualBasic6Parser.APPEND) | (1 << VisualBasic6Parser.AS) | (1 << VisualBasic6Parser.BEEP) | (1 << VisualBasic6Parser.BEGIN) | (1 << VisualBasic6Parser.BINARY) | (1 << VisualBasic6Parser.BOOLEAN) | (1 << VisualBasic6Parser.BYVAL) | (1 << VisualBasic6Parser.BYREF) | (1 << VisualBasic6Parser.BYTE) | (1 << VisualBasic6Parser.CALL) | (1 << VisualBasic6Parser.CASE) | (1 << VisualBasic6Parser.CHDIR) | (1 << VisualBasic6Parser.CHDRIVE) | (1 << VisualBasic6Parser.CLASS) | (1 << VisualBasic6Parser.CLOSE) | (1 << VisualBasic6Parser.COLLECTION) | (1 << VisualBasic6Parser.CONST) | (1 << VisualBasic6Parser.DATE) | (1 << VisualBasic6Parser.DECLARE) | (1 << VisualBasic6Parser.DEFBOOL) | (1 << VisualBasic6Parser.DEFBYTE) | (1 << VisualBasic6Parser.DEFDATE) | (1 << VisualBasic6Parser.DEFDBL) | (1 << VisualBasic6Parser.DEFDEC) | (1 << VisualBasic6Parser.DEFCUR) | (1 << VisualBasic6Parser.DEFINT) | (1 << VisualBasic6Parser.DEFLNG) | (1 << VisualBasic6Parser.DEFOBJ) | (1 << VisualBasic6Parser.DEFSNG) | (1 << VisualBasic6Parser.DEFSTR) | (1 << VisualBasic6Parser.DEFVAR) | (1 << VisualBasic6Parser.DELETESETTING) | (1 << VisualBasic6Parser.DIM) | (1 << VisualBasic6Parser.DO) | (1 << VisualBasic6Parser.DOUBLE) | (1 << VisualBasic6Parser.EACH) | (1 << VisualBasic6Parser.ELSE) | (1 << VisualBasic6Parser.ELSEIF) | (1 << VisualBasic6Parser.END) | (1 << VisualBasic6Parser.ENUM) | (1 << VisualBasic6Parser.EQV) | (1 << VisualBasic6Parser.ERASE) | (1 << VisualBasic6Parser.ERROR) | (1 << VisualBasic6Parser.EVENT))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (VisualBasic6Parser.FALSE - 66)) | (1 << (VisualBasic6Parser.FILECOPY - 66)) | (1 << (VisualBasic6Parser.FRIEND - 66)) | (1 << (VisualBasic6Parser.FOR - 66)) | (1 << (VisualBasic6Parser.FUNCTION - 66)) | (1 << (VisualBasic6Parser.GET - 66)) | (1 << (VisualBasic6Parser.GLOBAL - 66)) | (1 << (VisualBasic6Parser.GOSUB - 66)) | (1 << (VisualBasic6Parser.GOTO - 66)) | (1 << (VisualBasic6Parser.IF - 66)) | (1 << (VisualBasic6Parser.IMP - 66)) | (1 << (VisualBasic6Parser.IMPLEMENTS - 66)) | (1 << (VisualBasic6Parser.IN - 66)) | (1 << (VisualBasic6Parser.INPUT - 66)) | (1 << (VisualBasic6Parser.IS - 66)) | (1 << (VisualBasic6Parser.INTEGER - 66)) | (1 << (VisualBasic6Parser.KILL - 66)) | (1 << (VisualBasic6Parser.LOAD - 66)) | (1 << (VisualBasic6Parser.LOCK - 66)) | (1 << (VisualBasic6Parser.LONG - 66)) | (1 << (VisualBasic6Parser.LOOP - 66)) | (1 << (VisualBasic6Parser.LEN - 66)) | (1 << (VisualBasic6Parser.LET - 66)) | (1 << (VisualBasic6Parser.LIB - 66)) | (1 << (VisualBasic6Parser.LIKE - 66)) | (1 << (VisualBasic6Parser.LSET - 66)) | (1 << (VisualBasic6Parser.ME - 66)) | (1 << (VisualBasic6Parser.MID - 66)) | (1 << (VisualBasic6Parser.MKDIR - 66)) | (1 << (VisualBasic6Parser.MOD - 66)) | (1 << (VisualBasic6Parser.NAME - 66)) | (1 << (VisualBasic6Parser.NEXT - 66)) | (1 << (VisualBasic6Parser.NEW - 66)) | (1 << (VisualBasic6Parser.NOT - 66)) | (1 << (VisualBasic6Parser.NOTHING - 66)) | (1 << (VisualBasic6Parser.NULL - 66)) | (1 << (VisualBasic6Parser.OBJECT - 66)) | (1 << (VisualBasic6Parser.ON - 66)) | (1 << (VisualBasic6Parser.OPEN - 66)) | (1 << (VisualBasic6Parser.OPTIONAL - 66)) | (1 << (VisualBasic6Parser.OR - 66)) | (1 << (VisualBasic6Parser.OUTPUT - 66)) | (1 << (VisualBasic6Parser.PARAMARRAY - 66)) | (1 << (VisualBasic6Parser.PRESERVE - 66)) | (1 << (VisualBasic6Parser.PRINT - 66)) | (1 << (VisualBasic6Parser.PRIVATE - 66)) | (1 << (VisualBasic6Parser.PUBLIC - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (VisualBasic6Parser.PUT - 130)) | (1 << (VisualBasic6Parser.RANDOM - 130)) | (1 << (VisualBasic6Parser.RANDOMIZE - 130)) | (1 << (VisualBasic6Parser.RAISEEVENT - 130)) | (1 << (VisualBasic6Parser.READ - 130)) | (1 << (VisualBasic6Parser.REDIM - 130)) | (1 << (VisualBasic6Parser.REM - 130)) | (1 << (VisualBasic6Parser.RESET - 130)) | (1 << (VisualBasic6Parser.RESUME - 130)) | (1 << (VisualBasic6Parser.RETURN - 130)) | (1 << (VisualBasic6Parser.RMDIR - 130)) | (1 << (VisualBasic6Parser.RSET - 130)) | (1 << (VisualBasic6Parser.SAVEPICTURE - 130)) | (1 << (VisualBasic6Parser.SAVESETTING - 130)) | (1 << (VisualBasic6Parser.SEEK - 130)) | (1 << (VisualBasic6Parser.SELECT - 130)) | (1 << (VisualBasic6Parser.SENDKEYS - 130)) | (1 << (VisualBasic6Parser.SET - 130)) | (1 << (VisualBasic6Parser.SETATTR - 130)) | (1 << (VisualBasic6Parser.SHARED - 130)) | (1 << (VisualBasic6Parser.SINGLE - 130)) | (1 << (VisualBasic6Parser.SPC - 130)) | (1 << (VisualBasic6Parser.STATIC - 130)) | (1 << (VisualBasic6Parser.STEP - 130)) | (1 << (VisualBasic6Parser.STOP - 130)) | (1 << (VisualBasic6Parser.STRING - 130)) | (1 << (VisualBasic6Parser.SUB - 130)) | (1 << (VisualBasic6Parser.TAB - 130)) | (1 << (VisualBasic6Parser.TEXT - 130)) | (1 << (VisualBasic6Parser.THEN - 130)) | (1 << (VisualBasic6Parser.TIME - 130)) | (1 << (VisualBasic6Parser.TO - 130)) | (1 << (VisualBasic6Parser.TRUE - 130)) | (1 << (VisualBasic6Parser.TYPE - 130)) | (1 << (VisualBasic6Parser.TYPEOF - 130)) | (1 << (VisualBasic6Parser.UNLOAD - 130)) | (1 << (VisualBasic6Parser.UNLOCK - 130)) | (1 << (VisualBasic6Parser.UNTIL - 130)) | (1 << (VisualBasic6Parser.VARIANT - 130)) | (1 << (VisualBasic6Parser.VERSION - 130)) | (1 << (VisualBasic6Parser.WEND - 130)) | (1 << (VisualBasic6Parser.WHILE - 130)) | (1 << (VisualBasic6Parser.WIDTH - 130)) | (1 << (VisualBasic6Parser.WITH - 130)) | (1 << (VisualBasic6Parser.WITHEVENTS - 130)) | (1 << (VisualBasic6Parser.WRITE - 130)) | (1 << (VisualBasic6Parser.XOR - 130)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[110] = self.valueStmt_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def valueStmt_sempred(self, localctx:ValueStmtContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 3)
         




